generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                 @id @default(cuid())
  email                  String                 @unique
  name                   String?
  avatar                 String?
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")
  city                   String?
  congressional_district String?
  phone                  String?
  state                  String?
  street                 String?
  zip                    String?
  account                account[]
  sessions               Session[]
  templates              Template[]
  representatives        user_representatives[]
  personalizations       template_personalization[]
  writing_style          user_writing_style?

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Template {
  id                String              @id @default(cuid())
  slug              String              @unique
  title             String
  description       String
  category          String
  type              String
  deliveryMethod    String              @map("delivery_method")
  subject           String?
  preview           String
  message_body      String
  delivery_config   Json
  cwc_config        Json?
  recipient_config  Json
  metrics           Json
  campaign_id       String?
  status            String              @default("draft")
  is_public         Boolean             @default(false)
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  userId            String?             @map("user_id")
  user              User?               @relation(fields: [userId], references: [id])
  template_campaign template_campaign[]
  personalizations  template_personalization[]
  ai_suggestions    ai_suggestions[]
  analytics         template_analytics[]

  @@map("template")
}

model account {
  id                  String   @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  created_at          DateTime @default(now())
  updated_at          DateTime
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model congressional_office {
  id           String   @id
  office_code  String   @unique
  state        String
  district     String
  member_name  String
  party        String?
  is_active    Boolean  @default(true)
  last_updated DateTime @default(now())
}

model template_campaign {
  id              String    @id
  template_id     String
  delivery_type   String
  recipient_id    String?
  cwc_delivery_id String?
  status          String    @default("pending")
  sent_at         DateTime?
  delivered_at    DateTime?
  error_message   String?
  metadata        Json?
  created_at      DateTime  @default(now())
  updated_at      DateTime
  template        Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
}

model representative {
  id                   String                 @id @default(cuid())
  bioguide_id          String                 @unique
  name                 String
  party                String
  state                String
  district             String
  chamber              String
  office_code          String
  phone                String?
  email                String?
  is_active            Boolean                @default(true)
  last_updated         DateTime               @default(now())
  user_representatives user_representatives[]

  @@map("representative")
}

model user_representatives {
  id                String         @id @default(cuid())
  user_id           String         @map("user_id")
  representative_id String         @map("representative_id")
  relationship      String
  is_active         Boolean        @default(true)
  assigned_at       DateTime       @default(now()) @map("assigned_at")
  last_validated    DateTime?      @map("last_validated")
  representative    representative @relation(fields: [representative_id], references: [id], onDelete: Cascade)
  user              User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, representative_id])
  @@map("user_representatives")
}

// New models for enhanced templating features

model template_personalization {
  id                    String   @id @default(cuid())
  user_id               String   @map("user_id")
  template_id           String   @map("template_id")
  variable_name         String   @map("variable_name")
  custom_value          String   @map("custom_value")
  usage_count           Int      @default(1) @map("usage_count")
  last_used             DateTime @default(now()) @map("last_used")
  created_at            DateTime @default(now()) @map("created_at")
  updated_at            DateTime @updatedAt @map("updated_at")
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  template              Template @relation(fields: [template_id], references: [id], onDelete: Cascade)

  @@unique([user_id, template_id, variable_name])
  @@map("template_personalization")
}

model ai_suggestions {
  id                    String   @id @default(cuid())
  template_id           String   @map("template_id")
  variable_name         String   @map("variable_name")
  category              String   // e.g., "personal_story", "reasoning", "example"
  suggestion_text       String   @map("suggestion_text")
  context_tags          Json?    @map("context_tags") // ["education", "family", "healthcare"]
  usage_count           Int      @default(0) @map("usage_count")
  effectiveness_score   Float?   @map("effectiveness_score") // ML-derived score
  is_active             Boolean  @default(true) @map("is_active")
  created_at            DateTime @default(now()) @map("created_at")
  updated_at            DateTime @updatedAt @map("updated_at")
  template              Template @relation(fields: [template_id], references: [id], onDelete: Cascade)

  @@index([template_id, variable_name])
  @@map("ai_suggestions")
}

model user_writing_style {
  id                    String   @id @default(cuid())
  user_id               String   @unique @map("user_id")
  tone_preference       String?  @map("tone_preference") // "formal", "casual", "passionate"
  length_preference     String?  @map("length_preference") // "concise", "detailed", "moderate"
  personal_themes       Json?    @map("personal_themes") // ["family", "career", "community"]
  writing_samples       Json?    @map("writing_samples") // Store anonymized samples for ML
  engagement_metrics    Json?    @map("engagement_metrics") // Track what works for this user
  last_analyzed         DateTime? @map("last_analyzed")
  created_at            DateTime @default(now()) @map("created_at")
  updated_at            DateTime @updatedAt @map("updated_at")
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_writing_style")
}

model template_analytics {
  id                    String   @id @default(cuid())
  template_id           String   @map("template_id")
  variable_name         String   @map("variable_name")
  date                  DateTime
  total_uses            Int      @default(0) @map("total_uses")
  personalization_rate  Float    @default(0) @map("personalization_rate") // % of users who customize
  avg_length            Float?   @map("avg_length") // Average length of personalized content
  engagement_score      Float?   @map("engagement_score") // Derived from campaign performance
  top_themes            Json?    @map("top_themes") // Most common themes/topics
  created_at            DateTime @default(now()) @map("created_at")
  updated_at            DateTime @updatedAt @map("updated_at")
  template              Template @relation(fields: [template_id], references: [id], onDelete: Cascade)

  @@unique([template_id, variable_name, date])
  @@map("template_analytics")
}
