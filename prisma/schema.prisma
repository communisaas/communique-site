generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                 @id @default(cuid())
  email                  String                 @unique
  name                   String?
  avatar                 String?
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")
  city                   String?
  congressional_district String?
  phone                  String?
  state                  String?
  street                 String?
  zip                    String?
  account                account[]
  sessions               Session[]
  templates              Template[]
  representatives        user_representatives[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Template {
  id                String              @id @default(cuid())
  title             String
  description       String
  category          String
  type              String
  deliveryMethod    String              @map("delivery_method")
  subject           String?
  preview           String
  message_body      String
  delivery_config   Json
  cwc_config        Json?
  recipient_config  Json
  metrics           Json
  campaign_id       String?
  status            String              @default("draft")
  is_public         Boolean             @default(false)
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  userId            String?             @map("user_id")
  user              User?               @relation(fields: [userId], references: [id])
  template_campaign template_campaign[]

  @@map("template")
}

model account {
  id                  String   @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  created_at          DateTime @default(now())
  updated_at          DateTime
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model congressional_office {
  id           String   @id
  office_code  String   @unique
  state        String
  district     String
  member_name  String
  party        String?
  is_active    Boolean  @default(true)
  last_updated DateTime @default(now())
}

model template_campaign {
  id              String    @id
  template_id     String
  delivery_type   String
  recipient_id    String?
  cwc_delivery_id String?
  status          String    @default("pending")
  sent_at         DateTime?
  delivered_at    DateTime?
  error_message   String?
  metadata        Json?
  created_at      DateTime  @default(now())
  updated_at      DateTime
  template        Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
}

model representative {
  id                   String                 @id @default(cuid())
  bioguide_id          String                 @unique
  name                 String
  party                String
  state                String
  district             String
  chamber              String
  office_code          String
  phone                String?
  email                String?
  is_active            Boolean                @default(true)
  last_updated         DateTime               @default(now())
  user_representatives user_representatives[]

  @@map("representative")
}

model user_representatives {
  id                String         @id @default(cuid())
  user_id           String         @map("user_id")
  representative_id String         @map("representative_id")
  relationship      String
  is_active         Boolean        @default(true)
  assigned_at       DateTime       @default(now()) @map("assigned_at")
  last_validated    DateTime?      @map("last_validated")
  representative    representative @relation(fields: [representative_id], references: [id], onDelete: Cascade)
  user              User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, representative_id])
  @@map("user_representatives")
}
