generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                     @id @default(cuid())
  email                     String                     @unique
  name                      String?
  avatar                    String?
  createdAt                 DateTime                   @default(now()) @map("created_at")
  updatedAt                 DateTime                   @updatedAt @map("updated_at")
  
  // === CONSOLIDATED ADDRESS FIELDS ===
  city                      String?
  congressional_district    String?
  phone                     String?
  state                     String?
  street                    String?
  zip                       String?
  
  // === MERGED COORDINATES DATA (from user_coordinates table) ===
  latitude                  Float?                     // From user_coordinates
  longitude                 Float?                     // From user_coordinates
  political_embedding       Json?                      @map("political_embedding") // From user_coordinates
  community_sheaves         Json?                      @map("community_sheaves") // From user_coordinates
  embedding_version         String?                    @default("v1") @map("embedding_version") // From user_coordinates
  coordinates_updated_at    DateTime?                  @map("coordinates_updated_at") // From user_coordinates.last_calculated
  
  // === VERIFICATION FIELDS ===
  is_verified               Boolean                    @default(false) @map("is_verified")
  verification_method       String?                    @map("verification_method")
  verification_data         Json?                      @map("verification_data")
  verified_at               DateTime?                  @map("verified_at")
  
  // === CONSOLIDATED WALLET FIELDS (CRITICAL FIX) ===
  wallet_address            String?                    @unique @map("wallet_address") // Consolidate voter_address + wallet_address
  district_hash             String?                    @map("district_hash")
  trust_score               Int                        @default(0) @map("trust_score")
  reputation_tier           String                     @default("novice") @map("reputation_tier")
  
  // === VOTER PROTOCOL FIELDS ===
  pending_rewards           String?                    @map("pending_rewards") // BigInt as string
  total_earned              String?                    @map("total_earned")    // BigInt as string
  last_certification        DateTime?                  @map("last_certification")
  challenge_score           Int?                       @map("challenge_score")
  civic_score               Int?                       @map("civic_score")
  discourse_score           Int?                       @map("discourse_score")
  
  // === PROFILE FIELDS ===
  role                      String?
  organization              String?
  location                  String?                    // General location description
  connection                String?
  connection_details        String?                    @map("connection_details")
  profile_completed_at      DateTime?                  @map("profile_completed_at")
  profile_visibility        String                     @default("private") @map("profile_visibility")
  // === RELATIONS (keep existing) ===
  account                   account[]
  political_bubbles         local_political_bubble[]
  political_dead_ends       political_dead_end[]
  political_uncertainties   political_uncertainty[]
  sessions                  Session[]
  templates                 Template[]
  campaigns                 template_campaign[]        @relation("UserCampaigns")
  template_personalizations template_personalization[]
  source_activations        user_activation[]          @relation("UserSources")
  activations               user_activation[]          @relation("UserActivations")
  context_stack             user_context_stack?
  representatives           user_representatives[]     // Keep this relation
  writing_style             user_writing_style?
  secondary_emails          UserEmail[]                // Keep for multiple email management
  
  // === CONSOLIDATED AUDIT SYSTEM ===
  audit_logs                AuditLog[]                 // Unified audit trail (replaces ReputationLog + CertificationLog)
  civic_actions             CivicAction[]              // Blockchain-only actions
  
  // VOTER Protocol challenge relations
  challenger_challenges     Challenge[]            @relation("ChallengerChallenges")
  defender_challenges       Challenge[]            @relation("DefenderChallenges") 
  won_challenges            Challenge[]            @relation("WonChallenges")
  challenge_stakes          ChallengeStake[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model UserEmail {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  email      String    @unique
  isVerified Boolean   @default(false) @map("is_verified")
  verifiedAt DateTime? @map("verified_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([email])
  @@index([userId])
  @@map("user_emails")
}

model Template {
  id                        String                     @id @default(cuid())
  slug                      String                     @unique
  title                     String
  description               String
  category                  String
  type                      String
  deliveryMethod            String                     @map("delivery_method")
  preview                   String
  message_body              String
  delivery_config           Json
  cwc_config                Json?
  recipient_config          Json
  metrics                   Json
  campaign_id               String?
  status                    String                     @default("draft")
  is_public                 Boolean                    @default(false)
  
  // Usage tracking
  send_count                Int                        @default(0) @map("send_count")
  last_sent_at              DateTime?                  @map("last_sent_at")
  
  // Geographic scope
  applicable_countries      String[]                   @default([])
  jurisdiction_level        String?
  specific_locations        String[]                   @default([])
  
  // === STATUS AND TRACKING ===
  verification_status       String?                    @default("pending") @map("verification_status") // 'pending', 'approved', 'rejected'
  country_code              String?                    @default("US") @map("country_code")
  reviewed_at               DateTime?                  @map("reviewed_at")
  reviewed_by               String?                    @map("reviewed_by")
  
  // Quality metrics
  quality_score             Int                        @default(50) @map("quality_score") // 0-100
  grammar_score             Int?                       @map("grammar_score")
  clarity_score             Int?                       @map("clarity_score")
  completeness_score        Int?                       @map("completeness_score")
  
  // === AGENT-AGNOSTIC TRACKING (Phase 1) ===
  // Agent orchestration
  processing_pipeline       Json?                      @map("processing_pipeline") // Dynamic pipeline configuration
  agent_assignments         Json?                      @map("agent_assignments") // Which agents handled each stage
  consensus_weights         Json?                      @map("consensus_weights") // How votes were weighted
  
  // Economic tracking  
  budget_allocated          Decimal?                   @map("budget_allocated") // User's budget for this template
  cost_breakdown            Json?                      @map("cost_breakdown") // Cost per agent/stage
  optimization_metrics      Json?                      @map("optimization_metrics") // Quality vs cost tradeoffs
  
  // Performance analytics
  pipeline_efficiency       Decimal?                   @map("pipeline_efficiency") // How well the pipeline performed
  agent_performance         Json?                      @map("agent_performance") // Individual agent metrics
  consensus_quality         Decimal?                   @map("consensus_quality") // Quality of consensus decision
  
  // Dynamic routing
  fallback_attempts         Json?                      @map("fallback_attempts") // Any agent fallbacks used
  optimization_applied      Json?                      @map("optimization_applied") // Dynamic optimizations made
  user_satisfaction        Int?                       @map("user_satisfaction") // Feedback for future optimization
  
  // Enhanced content tracking
  enhanced_content          String?                    @map("enhanced_content") // AI-enhanced version
  change_log                Json?                      @map("change_log") // Detailed changes made
  intent_preservation       Float?                     @map("intent_preservation") // How well intent was preserved
  
  // Risk assessment
  toxicity_classification   Int?                       @map("toxicity_classification") // 0-4 scale
  political_sensitivity     String?                    @map("political_sensitivity") // low/medium/high
  adversarial_score         Float?                     @map("adversarial_score") // Gaming attempt detection
  
  // Processing flow tracking
  submission_flow          String?                     @map("submission_flow") // 'voter-protocol' or 'direct-delivery'
  processing_stages        Json?                       @map("processing_stages") // Stage-by-stage results
  total_processing_time    Int?                        @map("total_processing_time") // Total time in milliseconds
  cache_efficiency         Float?                      @map("cache_efficiency") // Cache hit ratio
  
  // User deposit and refund tracking
  user_deposit             Decimal?                    @map("user_deposit") // VOTER tokens deposited
  deposit_refunded         Boolean                     @default(false) @map("deposit_refunded")
  deposit_refund_amount    Decimal?                    @map("deposit_refund_amount")
  
  // Reputation impact (quadratic)
  reputation_delta          Float                      @default(0) @map("reputation_delta")
  reputation_applied        Boolean                    @default(false) @map("reputation_applied")
  
  // Enhanced timestamps
  createdAt                 DateTime                   @default(now()) @map("created_at")
  updatedAt                 DateTime                   @updatedAt @map("updated_at")
  submitted_at              DateTime?                  @map("submitted_at") // When submitted for verification
  corrected_at              DateTime?                  @map("corrected_at") // When AI corrections applied
  
  // User relationship
  userId                    String?                    @map("user_id")
  user                      User?                      @relation(fields: [userId], references: [id])
  
  // === EXISTING RELATIONS (preserve all) ===
  ai_suggestions            ai_suggestions[]
  founding_communities      community_lifecycle[]
  political_uncertainties   political_uncertainty[]
  adaptations               template_adaptation[]
  template_analytics        template_analytics[]
  template_campaign         template_campaign[]
  source_morphisms          template_morphism[]        @relation("SourceMorphisms")
  target_morphisms          template_morphism[]        @relation("TargetMorphisms")
  template_personalizations template_personalization[]
  activations               user_activation[]
  civic_actions             CivicAction[]
  analytics_events          analytics_event[]          @relation("TemplateAnalyticsEvents")
  
  @@index([verification_status])
  @@index([quality_score])
  @@index([country_code])
  @@index([userId])
  @@map("template")
}

model account {
  id                  String   @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}


model template_campaign {
  id              String    @id
  template_id     String
  user_id         String
  delivery_type   String
  recipient_id    String?
  cwc_delivery_id String?
  status          String    @default("pending")
  sent_at         DateTime?
  delivered_at    DateTime?
  error_message   String?
  metadata        Json?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  template        Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
  user            User      @relation("UserCampaigns", fields: [user_id], references: [id], onDelete: Cascade)
}

model representative {
  id                        String                 @id @default(cuid())
  bioguide_id               String                 @unique
  name                      String
  party                     String
  state                     String
  district                  String
  chamber                   String
  office_code               String
  phone                     String?
  email                     String?
  
  // === ENHANCED OFFICE INFORMATION (from congressional_office) ===
  member_name               String?                @map("member_name") // From congressional_office (may differ from name)
  office_address            String?                @map("office_address")
  office_city               String?                @map("office_city")
  office_state              String?                @map("office_state")
  office_zip                String?                @map("office_zip")
  
  // === ENHANCED TERM INFORMATION ===
  term_start                DateTime?              @map("term_start")
  term_end                  DateTime?              @map("term_end")
  current_term              Int?                   @map("current_term") // Term number
  
  // === STATUS AND METADATA ===
  is_active                 Boolean                @default(true)
  last_updated              DateTime               @default(now()) @map("last_updated")
  
  // === DATA SOURCE TRACKING ===
  data_source               String?                @map("data_source") // 'congress_api', 'bioguide', 'manual'
  source_updated_at         DateTime?              @map("source_updated_at")
  
  // === RELATIONS (preserve all) ===
  user_representatives      user_representatives[]

  @@index([state, district])
  @@index([chamber, is_active])
  @@index([bioguide_id])
  @@index([office_code])
  @@map("representative")
}

model user_representatives {
  id                String         @id @default(cuid())
  user_id           String         @map("user_id")
  representative_id String         @map("representative_id")
  relationship      String
  is_active         Boolean        @default(true)
  assigned_at       DateTime       @default(now()) @map("assigned_at")
  last_validated    DateTime?      @map("last_validated")
  representative    representative @relation(fields: [representative_id], references: [id], onDelete: Cascade)
  user              User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, representative_id])
  @@map("user_representatives")
}

model template_personalization {
  id            String   @id @default(cuid())
  user_id       String   @map("user_id")
  template_id   String   @map("template_id")
  variable_name String   @map("variable_name")
  custom_value  String   @map("custom_value")
  usage_count   Int      @default(1) @map("usage_count")
  last_used     DateTime @default(now()) @map("last_used")
  created_at    DateTime @default(now()) @map("created_at")
  updated_at    DateTime @updatedAt @map("updated_at")
  template      Template @relation(fields: [template_id], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, template_id, variable_name])
  @@map("template_personalization")
}

model ai_suggestions {
  id                  String   @id @default(cuid())
  template_id         String   @map("template_id")
  variable_name       String   @map("variable_name")
  category            String
  suggestion_text     String   @map("suggestion_text")
  context_tags        Json?    @map("context_tags")
  usage_count         Int      @default(0) @map("usage_count")
  effectiveness_score Float?   @map("effectiveness_score")
  is_active           Boolean  @default(true) @map("is_active")
  created_at          DateTime @default(now()) @map("created_at")
  updated_at          DateTime @updatedAt @map("updated_at")
  template            Template @relation(fields: [template_id], references: [id], onDelete: Cascade)

  @@index([template_id, variable_name])
  @@map("ai_suggestions")
}

model user_writing_style {
  id                 String    @id @default(cuid())
  user_id            String    @unique @map("user_id")
  tone_preference    String?   @map("tone_preference")
  length_preference  String?   @map("length_preference")
  personal_themes    Json?     @map("personal_themes")
  writing_samples    Json?     @map("writing_samples")
  engagement_metrics Json?     @map("engagement_metrics")
  last_analyzed      DateTime? @map("last_analyzed")
  created_at         DateTime  @default(now()) @map("created_at")
  updated_at         DateTime  @updatedAt @map("updated_at")
  user               User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_writing_style")
}

model template_analytics {
  id                   String   @id @default(cuid())
  template_id          String   @map("template_id")
  variable_name        String   @map("variable_name")
  date                 DateTime
  total_uses           Int      @default(0) @map("total_uses")
  personalization_rate Float    @default(0) @map("personalization_rate")
  avg_length           Float?   @map("avg_length")
  engagement_score     Float?   @map("engagement_score")
  top_themes           Json?    @map("top_themes")
  created_at           DateTime @default(now()) @map("created_at")
  updated_at           DateTime @updatedAt @map("updated_at")
  template             Template @relation(fields: [template_id], references: [id], onDelete: Cascade)

  @@unique([template_id, variable_name, date])
  @@map("template_analytics")
}

model user_activation {
  id                    String   @id @default(cuid())
  user_id               String   @map("user_id")
  template_id           String   @map("template_id")
  source_user_id        String?  @map("source_user_id")
  activation_generation Int      @default(0) @map("activation_generation")
  activation_method     String   @map("activation_method")
  geographic_distance   Float?   @map("geographic_distance")
  activation_time       DateTime @default(now()) @map("activation_time")
  time_to_activation    Float?   @map("time_to_activation")
  cascade_metadata      Json?    @map("cascade_metadata")
  created_at            DateTime @default(now()) @map("created_at")
  source_user           User?    @relation("UserSources", fields: [source_user_id], references: [id])
  template              Template @relation(fields: [template_id], references: [id], onDelete: Cascade)
  user                  User     @relation("UserActivations", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, template_id])
  @@index([template_id, activation_time])
  @@index([source_user_id, activation_time])
  @@map("user_activation")
}


model template_morphism {
  id                  String   @id @default(cuid())
  source_template_id  String   @map("source_template_id")
  target_template_id  String   @map("target_template_id")
  transformation_type String   @map("transformation_type")
  morphism_data       Json     @map("morphism_data")
  similarity_score    Float?   @map("similarity_score")
  usage_count         Int      @default(0) @map("usage_count")
  effectiveness_score Float?   @map("effectiveness_score")
  is_active           Boolean  @default(true) @map("is_active")
  created_at          DateTime @default(now()) @map("created_at")
  updated_at          DateTime @updatedAt @map("updated_at")
  source_template     Template @relation("SourceMorphisms", fields: [source_template_id], references: [id], onDelete: Cascade)
  target_template     Template @relation("TargetMorphisms", fields: [target_template_id], references: [id], onDelete: Cascade)

  @@unique([source_template_id, target_template_id])
  @@index([transformation_type, similarity_score])
  @@map("template_morphism")
}

model political_field_state {
  id                 String   @id @default(cuid())
  timestamp          DateTime @default(now())
  field_data         Json
  critical_points    Json?
  community_topology Json?
  field_version      String   @default("v1") @map("field_version")
  calculation_params Json?    @map("calculation_params")

  @@index([timestamp])
  @@map("political_field_state")
}

model local_political_bubble {
  id              String   @id @default(cuid())
  center_user_id  String   @map("center_user_id")
  radius_miles    Float    @map("radius_miles")
  shared_beliefs  Json     @map("shared_beliefs")
  bubble_strength Float    @map("bubble_strength")
  edge_conflicts  Json?    @map("edge_conflicts")
  member_count    Int      @default(1) @map("member_count")
  formation_date  DateTime @default(now()) @map("formation_date")
  last_updated    DateTime @updatedAt @map("last_updated")
  is_active       Boolean  @default(true) @map("is_active")
  center_user     User     @relation(fields: [center_user_id], references: [id], onDelete: Cascade)

  @@index([center_user_id, radius_miles])
  @@index([bubble_strength])
  @@map("local_political_bubble")
}

model community_intersection {
  id                    String   @id @default(cuid())
  community_a           String   @map("community_a")
  community_b           String   @map("community_b")
  shared_users          Json     @map("shared_users")
  shared_issues         Json     @map("shared_issues")
  conflict_issues       Json?    @map("conflict_issues")
  influence_flow        Json?    @map("influence_flow")
  intersection_strength Float    @map("intersection_strength")
  discovered_at         DateTime @default(now()) @map("discovered_at")
  last_calculated       DateTime @updatedAt @map("last_calculated")

  @@unique([community_a, community_b])
  @@index([intersection_strength])
  @@map("community_intersection")
}

model political_dead_end {
  id               String   @id @default(cuid())
  political_view   Json     @map("political_view")
  origin_user_id   String   @map("origin_user_id")
  origin_location  Json     @map("origin_location")
  blocking_factors Json     @map("blocking_factors")
  max_reach_miles  Float    @map("max_reach_miles")
  decay_rate       Float    @map("decay_rate")
  attempt_count    Int      @default(0) @map("attempt_count")
  last_attempt     DateTime @default(now()) @map("last_attempt")
  identified_at    DateTime @default(now()) @map("identified_at")
  origin_user      User     @relation(fields: [origin_user_id], references: [id], onDelete: Cascade)

  @@index([decay_rate, max_reach_miles])
  @@map("political_dead_end")
}

model community_lifecycle {
  id                    String    @id @default(cuid())
  community_name        String    @map("community_name")
  community_type        String    @map("community_type")
  formation_date        DateTime  @default(now()) @map("formation_date")
  peak_date             DateTime? @map("peak_date")
  dissolution_date      DateTime? @map("dissolution_date")
  trigger_event         String?   @map("trigger_event")
  founding_template_id  String?   @map("founding_template_id")
  member_count_timeline Json      @map("member_count_timeline")
  engagement_timeline   Json      @map("engagement_timeline")
  current_status        String    @default("active") @map("current_status")
  founding_template     Template? @relation(fields: [founding_template_id], references: [id])

  @@index([community_type, current_status])
  @@index([formation_date])
  @@map("community_lifecycle")
}

model user_context_stack {
  id                    String   @id @default(cuid())
  user_id               String   @unique @map("user_id")
  geographic_context    Json     @map("geographic_context")
  economic_context      Json     @map("economic_context")
  social_context        Json     @map("social_context")
  institutional_context Json     @map("institutional_context")
  context_conflicts     Json?    @map("context_conflicts")
  dominant_context      String?  @map("dominant_context")
  context_stability     Float    @default(0.5) @map("context_stability")
  last_calculated       DateTime @updatedAt @map("last_calculated")
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_context_stack")
}

model political_flow {
  id                String   @id @default(cuid())
  timestamp         DateTime @default(now())
  time_window_hours Int      @default(24) @map("time_window_hours")
  flow_sources      Json     @map("flow_sources")
  flow_sinks        Json     @map("flow_sinks")
  flow_velocity     Json     @map("flow_velocity")
  flow_direction    Json     @map("flow_direction")
  turbulence_zones  Json?    @map("turbulence_zones")
  flow_strength     Float    @map("flow_strength")
  dominant_issues   Json     @map("dominant_issues")

  @@index([timestamp, flow_strength])
  @@map("political_flow")
}

model political_uncertainty {
  id                        String    @id @default(cuid())
  user_id                   String    @map("user_id")
  template_id               String?   @map("template_id")
  position_cloud            Json      @map("position_cloud")
  certainty_level           Float     @map("certainty_level")
  change_likelihood         Float     @map("change_likelihood")
  influence_susceptibility  Json      @map("influence_susceptibility")
  position_volatility       Float     @default(0.5) @map("position_volatility")
  last_position_change      DateTime? @map("last_position_change")
  uncertainty_calculated_at DateTime  @default(now()) @map("uncertainty_calculated_at")
  updated_at                DateTime  @updatedAt @map("updated_at")
  template                  Template? @relation(fields: [template_id], references: [id], onDelete: Cascade)
  user                      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, template_id])
  @@index([certainty_level, change_likelihood])
  @@map("political_uncertainty")
}

model legislative_channel {
  id                    String                @id @default(cuid())
  country_code          String                @unique
  country_name          String
  legislature_name      String
  legislature_type      String
  access_method         String
  access_tier           Int                   @default(3)
  email_pattern         String?
  email_domain          String?
  email_format_notes    String?
  api_endpoint          String?
  api_auth_type         String?
  api_documentation_url String?
  rate_limit_requests   Int?
  rate_limit_daily      Int?
  form_url              String?
  form_requires_captcha Boolean               @default(false)
  form_max_length       Int?
  primary_language      String
  supported_languages   String[]
  requires_constituent  Boolean               @default(false)
  requires_real_address Boolean               @default(false)
  forbidden_words       String[]              @default([])
  message_guidelines    String?
  population            BigInt?
  internet_penetration  Float?
  democracy_index       Float?
  is_active             Boolean               @default(true)
  last_verified         DateTime?
  created_at            DateTime              @default(now()) @map("created_at")
  updated_at            DateTime              @updatedAt @map("updated_at")
  legislative_bodies    legislative_body[]
  template_adaptations  template_adaptation[]

  @@index([access_tier, is_active])
  @@index([country_code])
  @@map("legislative_channel")
}

model legislative_body {
  id                  String              @id @default(cuid())
  channel_id          String              @map("channel_id")
  body_name           String
  body_type           String
  member_count        Int
  member_title        String
  email_pattern       String?
  api_endpoint        String?
  term_length_years   Int
  last_election       DateTime?
  next_election       DateTime?
  created_at          DateTime            @default(now()) @map("created_at")
  updated_at          DateTime            @updatedAt @map("updated_at")
  legislative_channel legislative_channel @relation(fields: [channel_id], references: [id], onDelete: Cascade)

  @@index([channel_id])
  @@map("legislative_body")
}

model template_adaptation {
  id                  String              @id @default(cuid())
  source_template_id  String              @map("source_template_id")
  target_country_code String              @map("target_country_code")
  target_language     String              @map("target_language")
  adapted_title       String
  adapted_subject     String?
  adapted_body        String
  currency_symbol     String?
  number_format       String?
  local_examples      Json?
  local_officials     Json?
  local_data_sources  Json?
  tone_adjustment     String?
  cultural_notes      String?
  usage_count         Int                 @default(0)
  success_rate        Float?
  viral_coefficient   Float?
  is_active           Boolean             @default(true)
  created_at          DateTime            @default(now()) @map("created_at")
  updated_at          DateTime            @updatedAt @map("updated_at")
  source_template     Template            @relation(fields: [source_template_id], references: [id], onDelete: Cascade)
  legislative_channel legislative_channel @relation(fields: [target_country_code], references: [country_code], onDelete: Cascade)

  @@unique([source_template_id, target_country_code, target_language])
  @@index([target_country_code, is_active])
  @@map("template_adaptation")
}




// ANALYTICS MODELS (Consolidated: 8→3 models)

model analytics_session {
  session_id        String    @id @unique
  user_id           String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  
  // UTM and acquisition data
  utm_source        String?
  utm_medium        String?
  utm_campaign      String?
  landing_page      String?
  referrer          String?
  
  // Device and technical data (consolidated into JSONB)
  device_data       Json      @default("{}") // ip_address, user_agent, fingerprint
  
  // Session metrics (aggregated from events)
  session_metrics   Json      @default("{}") // events_count, page_views, conversion_data
  
  // Funnel progress tracking
  funnel_progress   Json      @default("{}") // Current step per active funnel
  
  events            analytics_event[]
  
  @@index([user_id])
  @@index([created_at])
  @@index([utm_campaign])
  @@map("analytics_session")
}

model analytics_event {
  id                String    @id @default(cuid())
  session_id        String
  user_id           String?
  timestamp         DateTime  @default(now())
  name              String
  event_type        String    @default("interaction") // 'pageview', 'interaction', 'conversion', 'funnel', 'campaign'
  template_id       String?   // For template-related events
  funnel_step       Int?      // Current funnel step
  experiment_id     String?   // Replaces funnel_id, campaign_id, variation_id
  properties        Json      @default("{}") // Replaces analytics_event_property table
  computed_metrics  Json      @default("{}") // Cached aggregations for performance
  created_at        DateTime  @default(now()) @map("created_at")

  session           analytics_session? @relation(fields: [session_id], references: [session_id])
  experiment        analytics_experiment? @relation(fields: [experiment_id], references: [id])
  template          Template? @relation("TemplateAnalyticsEvents", fields: [template_id], references: [id])

  @@index([session_id, timestamp])
  @@index([user_id, timestamp])
  @@index([name, timestamp])
  @@index([event_type, timestamp])
  @@index([experiment_id])
  @@map("analytics_event")
}

model analytics_experiment {
  id                String    @id @default(cuid())
  name              String    @unique
  type              String    // 'funnel', 'campaign', 'ab_test'
  status            String    @default("active") // 'active', 'paused', 'completed'
  
  // Unified configuration (JSONB for flexibility)
  config            Json      @default("{}") // Steps, variations, targeting rules
  
  // Timeline
  start_date        DateTime?
  end_date          DateTime?
  
  // Metrics cache for dashboard performance
  metrics_cache     Json      @default("{}") // Performance data, conversion rates
  
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @updatedAt @map("updated_at")
  
  events            analytics_event[]
  
  @@index([type, status])
  @@index([created_at])
  @@map("analytics_experiment")
}



model DeliveryLog {
  id              String   @id @default(cuid())
  template_id     String   @map("template_id")
  user_id         String   @map("user_id")
  delivery_method String   @map("delivery_method") // 'certified' | 'direct'
  success         Boolean
  submission_id   String?  @map("submission_id")
  error_message   String?  @map("error_message")
  metadata        Json     @default("{}")
  delivered_at    DateTime @default(now()) @map("delivered_at")
  
  @@index([template_id])
  @@index([user_id])
  @@index([delivery_method])
  @@map("delivery_logs")
}

// ============= CONSOLIDATED AUDIT SYSTEM (4→2 MODELS) =============
// Enhanced unified audit trail for all user actions

model AuditLog {
  id                        String    @id @default(cuid())
  user_id                   String    @map("user_id")
  
  // Core audit classification
  action_type               String    @map("action_type") // 'civic_action', 'reputation_change', 'verification', 'authentication', 'template_action'
  action_subtype            String?   @map("action_subtype") // 'cwc_message', 'challenge_create', 'score_update', 'login', 'template_submit'
  
  // Unified audit data (flexible JSONB storage)
  audit_data                Json      @default("{}") @map("audit_data") // Flexible data storage for any audit type
  
  // Agent provenance & evidence (from ReputationLog)
  agent_source              String?   @map("agent_source") // Which agent made the decision
  agent_decisions           Json?     @map("agent_decisions") // AI decision trail
  evidence_hash             String?   @map("evidence_hash") // IPFS hash of evidence
  confidence                Float?    @map("confidence") // Agent confidence 0-1
  
  // Reputation tracking (consolidated from ReputationLog)
  score_before              Int?      @map("score_before")
  score_after               Int?      @map("score_after") 
  change_amount             Int?      @map("change_amount")
  change_reason             String?   @map("change_reason")
  
  // Certification tracking (consolidated from CertificationLog)
  certification_type        String?   @map("certification_type") // 'voter_protocol', 'template_approval', 'identity_verification'
  certification_hash        String?   @map("certification_hash")
  certification_data        Json?     @map("certification_data")
  reward_amount             String?   @map("reward_amount") // BigInt as string (VOTER tokens)
  recipient_emails          String[] @default([]) @map("recipient_emails")
  
  // Blockchain correlation (link to CivicAction if applicable)
  civic_action_id           String?   @unique @map("civic_action_id")
  
  // Technical audit data (from original AuditLog)
  ip_address                String?   @map("ip_address")
  user_agent                String?   @map("user_agent")
  
  // Metadata & status
  status                    String    @default("completed") // 'pending', 'completed', 'failed', 'cancelled'
  error_message             String?   @map("error_message")
  metadata                  Json?     @default("{}") @map("metadata")
  
  // Timestamps
  created_at                DateTime  @default(now()) @map("created_at")
  
  // Relations
  user                      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  civic_action              CivicAction? @relation(fields: [civic_action_id], references: [id])
  
  @@index([user_id])
  @@index([action_type])
  @@index([created_at])
  @@index([change_reason])
  @@index([certification_type])
  @@index([certification_hash])
  @@map("audit_log")
}

// ============= VOTER PROTOCOL EXTENSIONS =============
// Blockchain identity and civic action tracking

// Refocused CivicAction: Blockchain-specific only
model CivicAction {
  id                        String    @id @default(cuid())
  user_id                   String    @map("user_id")
  
  // Core action identification (minimal, just for blockchain correlation)
  action_type               String    @map("action_type") // 'cwc_message', 'template_submit', 'challenge_create'
  template_id               String?   @map("template_id")
  
  // === BLOCKCHAIN INTEGRATION ONLY ===
  tx_hash                   String?   @map("tx_hash") // Ethereum/Monad transaction hash
  reward_wei                String?   @map("reward_wei") // BigInt as string (VOTER tokens)
  status                    String    @default("pending") // 'pending', 'confirmed', 'failed'
  
  // Blockchain proof & validation
  block_number              Int?      @map("block_number")
  confirmation_count        Int?      @map("confirmation_count")
  gas_used                  String?   @map("gas_used") // BigInt as string
  
  // Multi-agent consensus for blockchain actions
  consensus_data            Json?     @map("consensus_data") // Multi-model voting results for rewards
  
  // Timestamps
  created_at                DateTime  @default(now()) @map("created_at")
  confirmed_at              DateTime? @map("confirmed_at")
  
  // Relations
  user                      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  template                  Template? @relation(fields: [template_id], references: [id])
  audit_log                 AuditLog? // One-to-one with audit trail entry
  
  @@index([user_id])
  @@index([action_type])
  @@index([status])
  @@index([tx_hash])
  @@index([created_at])
  @@map("civic_action")
}


model Challenge {
  id                String    @id @default(cuid())
  
  // Participants (using existing user IDs)
  challenger_id     String    @map("challenger_id")
  defender_id       String    @map("defender_id")
  
  // Challenge data
  claim_hash        String    @unique @map("claim_hash")
  evidence_ipfs     String    @map("evidence_ipfs")
  stake_amount      String    @map("stake_amount")      // BigInt as string (VOTER tokens)
  
  // Status tracking
  status            String    @default("active")        // 'active', 'resolved', 'cancelled'
  resolution        String?   @map("resolution")        // 'challenger_wins', 'defender_wins'
  winner_id         String?   @map("winner_id")
  
  // Voting period
  voting_deadline   DateTime  @map("voting_deadline")
  
  // Timing
  created_at        DateTime  @default(now()) @map("created_at")
  resolved_at       DateTime? @map("resolved_at")
  
  // Blockchain proof
  creation_tx       String?   @map("creation_tx")
  resolution_tx     String?   @map("resolution_tx")
  
  // Challenge description
  title             String
  description       String
  category          String?
  
  // Relations
  challenger        User      @relation("ChallengerChallenges", fields: [challenger_id], references: [id])
  defender          User      @relation("DefenderChallenges", fields: [defender_id], references: [id])
  winner            User?     @relation("WonChallenges", fields: [winner_id], references: [id])
  stakes            ChallengeStake[]
  
  @@map("challenge")
  @@index([status])
  @@index([created_at])
  @@index([voting_deadline])
}

model ChallengeStake {
  id             String    @id @default(cuid())
  challenge_id   String    @map("challenge_id")
  user_id        String    @map("user_id")
  
  // Stake details
  amount         String    @map("amount")           // BigInt as string
  side           String    @map("side")             // 'support', 'oppose'
  claimed        Boolean   @default(false)
  
  // Quadratic voting power calculation
  voting_power   Float     @map("voting_power")     // sqrt(amount)
  
  // Blockchain proof
  stake_tx       String?   @map("stake_tx")
  claim_tx       String?   @map("claim_tx")
  
  created_at     DateTime  @default(now()) @map("created_at")
  claimed_at     DateTime? @map("claimed_at")
  
  // Relations
  challenge      Challenge @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [user_id], references: [id])
  
  @@map("challenge_stake")
  @@unique([challenge_id, user_id])  // One stake per user per challenge
  @@index([challenge_id])
  @@index([user_id])
}

model RewardCalculation {
  id                String    @id @default(cuid())
  user_address      String    @map("user_address")
  action_type       String    @map("action_type")
  
  // Reward calculation details
  base_reward_usd   String    @map("base_reward_usd")
  total_multiplier  String    @map("total_multiplier")
  reward_usd        String    @map("reward_usd")
  reward_wei        String    @map("reward_wei")
  eth_price         String    @map("eth_price")
  
  // Agent decision data
  multipliers       Json      @default("{}") @map("multipliers")
  network_activity  Json      @default("{}") @map("network_activity")
  agent_decisions   Json      @default("{}") @map("agent_decisions")
  
  created_at        DateTime  @default(now()) @map("created_at")
  
  @@map("reward_calculation")
  @@index([user_address])
  @@index([action_type])
  @@index([created_at])
}