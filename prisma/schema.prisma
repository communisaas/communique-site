generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                     @id @default(cuid())
  email                     String                     @unique
  name                      String?
  avatar                    String?
  createdAt                 DateTime                   @default(now()) @map("created_at")
  updatedAt                 DateTime                   @updatedAt @map("updated_at")
  city                      String?
  congressional_district    String?
  phone                     String?
  state                     String?
  street                    String?
  zip                       String?
  is_verified               Boolean                    @default(false) @map("is_verified")
  verification_method       String?                    @map("verification_method")
  verification_data         Json?                      @map("verification_data")
  verified_at               DateTime?                  @map("verified_at")
  voter_address             String?                    @unique @map("voter_address") // VOTER Protocol wallet address
  voter_reputation          Int                        @default(0) @map("voter_reputation") // VOTER reputation score
  // Profile fields
  role                      String?                    // User's role/profession
  organization              String?                    // User's organization  
  location                  String?                    // General location description
  connection                String?                    // Connection to issues they advocate for
  connection_details        String?                    @map("connection_details") // Additional connection context
  profile_completed_at      DateTime?                  @map("profile_completed_at") // When profile was completed
  profile_visibility        String                     @default("private") @map("profile_visibility") // public, private, limited
  account                   account[]
  certification_logs        CertificationLog[]
  political_bubbles         local_political_bubble[]
  political_dead_ends       political_dead_end[]
  political_uncertainties   political_uncertainty[]
  sessions                  Session[]
  templates                 Template[]
  campaigns                 template_campaign[]        @relation("UserCampaigns")
  template_personalizations template_personalization[]
  source_activations        user_activation[]          @relation("UserSources")
  activations               user_activation[]          @relation("UserActivations")
  context_stack             user_context_stack?
  coordinates               user_coordinates?
  representatives           user_representatives[]
  writing_style             user_writing_style?
  template_verifications    TemplateVerification[]
  secondary_emails          UserEmail[]
  

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model UserEmail {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  email      String    @unique
  isPrimary  Boolean   @default(false) @map("is_primary")
  isVerified Boolean   @default(false) @map("is_verified")
  verifiedAt DateTime? @map("verified_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([email])
  @@index([userId])
  @@map("user_emails")
}

model Template {
  id                        String                     @id @default(cuid())
  slug                      String                     @unique
  title                     String
  description               String
  category                  String
  type                      String
  deliveryMethod            String                     @map("delivery_method") // 'direct' | 'certified'
  subject                   String?
  preview                   String
  message_body              String
  delivery_config           Json
  cwc_config                Json?
  recipient_config          Json
  metrics                   Json
  campaign_id               String?
  status                    String                     @default("draft")
  is_public                 Boolean                    @default(false)
  createdAt                 DateTime                   @default(now()) @map("created_at")
  updatedAt                 DateTime                   @updatedAt @map("updated_at")
  userId                    String?                    @map("user_id")
  applicable_countries      String[]                   @default([])
  jurisdiction_level        String?
  specific_locations        String[]                   @default([])
  ai_suggestions            ai_suggestions[]
  founding_communities      community_lifecycle[]
  political_uncertainties   political_uncertainty[]
  user                      User?                      @relation(fields: [userId], references: [id])
  adaptations               template_adaptation[]
  template_analytics        template_analytics[]
  template_campaign         template_campaign[]
  source_morphisms          template_morphism[]        @relation("SourceMorphisms")
  target_morphisms          template_morphism[]        @relation("TargetMorphisms")
  template_personalizations template_personalization[]
  activations               user_activation[]
  verification              TemplateVerification?

  @@map("template")
}

model account {
  id                  String   @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model congressional_office {
  id           String   @id @default(cuid())
  office_code  String   @unique
  state        String
  district     String
  member_name  String
  party        String?
  is_active    Boolean  @default(true)
  last_updated DateTime @default(now())
}

model template_campaign {
  id              String    @id
  template_id     String
  user_id         String
  delivery_type   String
  recipient_id    String?
  cwc_delivery_id String?
  status          String    @default("pending")
  sent_at         DateTime?
  delivered_at    DateTime?
  error_message   String?
  metadata        Json?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  template        Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
  user            User      @relation("UserCampaigns", fields: [user_id], references: [id], onDelete: Cascade)
}

model representative {
  id                   String                 @id @default(cuid())
  bioguide_id          String                 @unique
  name                 String
  party                String
  state                String
  district             String
  chamber              String
  office_code          String
  phone                String?
  email                String?
  is_active            Boolean                @default(true)
  last_updated         DateTime               @default(now())
  user_representatives user_representatives[]

  @@map("representative")
}

model user_representatives {
  id                String         @id @default(cuid())
  user_id           String         @map("user_id")
  representative_id String         @map("representative_id")
  relationship      String
  is_active         Boolean        @default(true)
  assigned_at       DateTime       @default(now()) @map("assigned_at")
  last_validated    DateTime?      @map("last_validated")
  representative    representative @relation(fields: [representative_id], references: [id], onDelete: Cascade)
  user              User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, representative_id])
  @@map("user_representatives")
}

model template_personalization {
  id            String   @id @default(cuid())
  user_id       String   @map("user_id")
  template_id   String   @map("template_id")
  variable_name String   @map("variable_name")
  custom_value  String   @map("custom_value")
  usage_count   Int      @default(1) @map("usage_count")
  last_used     DateTime @default(now()) @map("last_used")
  created_at    DateTime @default(now()) @map("created_at")
  updated_at    DateTime @updatedAt @map("updated_at")
  template      Template @relation(fields: [template_id], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, template_id, variable_name])
  @@map("template_personalization")
}

model ai_suggestions {
  id                  String   @id @default(cuid())
  template_id         String   @map("template_id")
  variable_name       String   @map("variable_name")
  category            String
  suggestion_text     String   @map("suggestion_text")
  context_tags        Json?    @map("context_tags")
  usage_count         Int      @default(0) @map("usage_count")
  effectiveness_score Float?   @map("effectiveness_score")
  is_active           Boolean  @default(true) @map("is_active")
  created_at          DateTime @default(now()) @map("created_at")
  updated_at          DateTime @updatedAt @map("updated_at")
  template            Template @relation(fields: [template_id], references: [id], onDelete: Cascade)

  @@index([template_id, variable_name])
  @@map("ai_suggestions")
}

model user_writing_style {
  id                 String    @id @default(cuid())
  user_id            String    @unique @map("user_id")
  tone_preference    String?   @map("tone_preference")
  length_preference  String?   @map("length_preference")
  personal_themes    Json?     @map("personal_themes")
  writing_samples    Json?     @map("writing_samples")
  engagement_metrics Json?     @map("engagement_metrics")
  last_analyzed      DateTime? @map("last_analyzed")
  created_at         DateTime  @default(now()) @map("created_at")
  updated_at         DateTime  @updatedAt @map("updated_at")
  user               User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_writing_style")
}

model template_analytics {
  id                   String   @id @default(cuid())
  template_id          String   @map("template_id")
  variable_name        String   @map("variable_name")
  date                 DateTime
  total_uses           Int      @default(0) @map("total_uses")
  personalization_rate Float    @default(0) @map("personalization_rate")
  avg_length           Float?   @map("avg_length")
  engagement_score     Float?   @map("engagement_score")
  top_themes           Json?    @map("top_themes")
  created_at           DateTime @default(now()) @map("created_at")
  updated_at           DateTime @updatedAt @map("updated_at")
  template             Template @relation(fields: [template_id], references: [id], onDelete: Cascade)

  @@unique([template_id, variable_name, date])
  @@map("template_analytics")
}

model user_activation {
  id                    String   @id @default(cuid())
  user_id               String   @map("user_id")
  template_id           String   @map("template_id")
  source_user_id        String?  @map("source_user_id")
  activation_generation Int      @default(0) @map("activation_generation")
  activation_method     String   @map("activation_method")
  geographic_distance   Float?   @map("geographic_distance")
  activation_time       DateTime @default(now()) @map("activation_time")
  time_to_activation    Float?   @map("time_to_activation")
  cascade_metadata      Json?    @map("cascade_metadata")
  created_at            DateTime @default(now()) @map("created_at")
  source_user           User?    @relation("UserSources", fields: [source_user_id], references: [id])
  template              Template @relation(fields: [template_id], references: [id], onDelete: Cascade)
  user                  User     @relation("UserActivations", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, template_id])
  @@index([template_id, activation_time])
  @@index([source_user_id, activation_time])
  @@map("user_activation")
}

model user_coordinates {
  user_id             String   @id @map("user_id")
  latitude            Float?
  longitude           Float?
  political_embedding Json?
  community_sheaves   Json?
  embedding_version   String   @default("v1") @map("embedding_version")
  last_calculated     DateTime @default(now()) @map("last_calculated")
  updated_at          DateTime @updatedAt @map("updated_at")
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_coordinates")
}

model template_morphism {
  id                  String   @id @default(cuid())
  source_template_id  String   @map("source_template_id")
  target_template_id  String   @map("target_template_id")
  transformation_type String   @map("transformation_type")
  morphism_data       Json     @map("morphism_data")
  similarity_score    Float?   @map("similarity_score")
  usage_count         Int      @default(0) @map("usage_count")
  effectiveness_score Float?   @map("effectiveness_score")
  is_active           Boolean  @default(true) @map("is_active")
  created_at          DateTime @default(now()) @map("created_at")
  updated_at          DateTime @updatedAt @map("updated_at")
  source_template     Template @relation("SourceMorphisms", fields: [source_template_id], references: [id], onDelete: Cascade)
  target_template     Template @relation("TargetMorphisms", fields: [target_template_id], references: [id], onDelete: Cascade)

  @@unique([source_template_id, target_template_id])
  @@index([transformation_type, similarity_score])
  @@map("template_morphism")
}

model political_field_state {
  id                 String   @id @default(cuid())
  timestamp          DateTime @default(now())
  field_data         Json
  critical_points    Json?
  community_topology Json?
  field_version      String   @default("v1") @map("field_version")
  calculation_params Json?    @map("calculation_params")

  @@index([timestamp])
  @@map("political_field_state")
}

model local_political_bubble {
  id              String   @id @default(cuid())
  center_user_id  String   @map("center_user_id")
  radius_miles    Float    @map("radius_miles")
  shared_beliefs  Json     @map("shared_beliefs")
  bubble_strength Float    @map("bubble_strength")
  edge_conflicts  Json?    @map("edge_conflicts")
  member_count    Int      @default(1) @map("member_count")
  formation_date  DateTime @default(now()) @map("formation_date")
  last_updated    DateTime @updatedAt @map("last_updated")
  is_active       Boolean  @default(true) @map("is_active")
  center_user     User     @relation(fields: [center_user_id], references: [id], onDelete: Cascade)

  @@index([center_user_id, radius_miles])
  @@index([bubble_strength])
  @@map("local_political_bubble")
}

model community_intersection {
  id                    String   @id @default(cuid())
  community_a           String   @map("community_a")
  community_b           String   @map("community_b")
  shared_users          Json     @map("shared_users")
  shared_issues         Json     @map("shared_issues")
  conflict_issues       Json?    @map("conflict_issues")
  influence_flow        Json?    @map("influence_flow")
  intersection_strength Float    @map("intersection_strength")
  discovered_at         DateTime @default(now()) @map("discovered_at")
  last_calculated       DateTime @updatedAt @map("last_calculated")

  @@unique([community_a, community_b])
  @@index([intersection_strength])
  @@map("community_intersection")
}

model political_dead_end {
  id               String   @id @default(cuid())
  political_view   Json     @map("political_view")
  origin_user_id   String   @map("origin_user_id")
  origin_location  Json     @map("origin_location")
  blocking_factors Json     @map("blocking_factors")
  max_reach_miles  Float    @map("max_reach_miles")
  decay_rate       Float    @map("decay_rate")
  attempt_count    Int      @default(0) @map("attempt_count")
  last_attempt     DateTime @default(now()) @map("last_attempt")
  identified_at    DateTime @default(now()) @map("identified_at")
  origin_user      User     @relation(fields: [origin_user_id], references: [id], onDelete: Cascade)

  @@index([decay_rate, max_reach_miles])
  @@map("political_dead_end")
}

model community_lifecycle {
  id                    String    @id @default(cuid())
  community_name        String    @map("community_name")
  community_type        String    @map("community_type")
  formation_date        DateTime  @default(now()) @map("formation_date")
  peak_date             DateTime? @map("peak_date")
  dissolution_date      DateTime? @map("dissolution_date")
  trigger_event         String?   @map("trigger_event")
  founding_template_id  String?   @map("founding_template_id")
  member_count_timeline Json      @map("member_count_timeline")
  engagement_timeline   Json      @map("engagement_timeline")
  current_status        String    @default("active") @map("current_status")
  founding_template     Template? @relation(fields: [founding_template_id], references: [id])

  @@index([community_type, current_status])
  @@index([formation_date])
  @@map("community_lifecycle")
}

model user_context_stack {
  id                    String   @id @default(cuid())
  user_id               String   @unique @map("user_id")
  geographic_context    Json     @map("geographic_context")
  economic_context      Json     @map("economic_context")
  social_context        Json     @map("social_context")
  institutional_context Json     @map("institutional_context")
  context_conflicts     Json?    @map("context_conflicts")
  dominant_context      String?  @map("dominant_context")
  context_stability     Float    @default(0.5) @map("context_stability")
  last_calculated       DateTime @updatedAt @map("last_calculated")
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_context_stack")
}

model political_flow {
  id                String   @id @default(cuid())
  timestamp         DateTime @default(now())
  time_window_hours Int      @default(24) @map("time_window_hours")
  flow_sources      Json     @map("flow_sources")
  flow_sinks        Json     @map("flow_sinks")
  flow_velocity     Json     @map("flow_velocity")
  flow_direction    Json     @map("flow_direction")
  turbulence_zones  Json?    @map("turbulence_zones")
  flow_strength     Float    @map("flow_strength")
  dominant_issues   Json     @map("dominant_issues")

  @@index([timestamp, flow_strength])
  @@map("political_flow")
}

model political_uncertainty {
  id                        String    @id @default(cuid())
  user_id                   String    @map("user_id")
  template_id               String?   @map("template_id")
  position_cloud            Json      @map("position_cloud")
  certainty_level           Float     @map("certainty_level")
  change_likelihood         Float     @map("change_likelihood")
  influence_susceptibility  Json      @map("influence_susceptibility")
  position_volatility       Float     @default(0.5) @map("position_volatility")
  last_position_change      DateTime? @map("last_position_change")
  uncertainty_calculated_at DateTime  @default(now()) @map("uncertainty_calculated_at")
  updated_at                DateTime  @updatedAt @map("updated_at")
  template                  Template? @relation(fields: [template_id], references: [id], onDelete: Cascade)
  user                      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, template_id])
  @@index([certainty_level, change_likelihood])
  @@map("political_uncertainty")
}

model legislative_channel {
  id                    String                @id @default(cuid())
  country_code          String                @unique
  country_name          String
  legislature_name      String
  legislature_type      String
  access_method         String
  access_tier           Int                   @default(3)
  email_pattern         String?
  email_domain          String?
  email_format_notes    String?
  api_endpoint          String?
  api_auth_type         String?
  api_documentation_url String?
  rate_limit_requests   Int?
  rate_limit_daily      Int?
  form_url              String?
  form_requires_captcha Boolean               @default(false)
  form_max_length       Int?
  primary_language      String
  supported_languages   String[]
  requires_constituent  Boolean               @default(false)
  requires_real_address Boolean               @default(false)
  forbidden_words       String[]              @default([])
  message_guidelines    String?
  population            BigInt?
  internet_penetration  Float?
  democracy_index       Float?
  is_active             Boolean               @default(true)
  last_verified         DateTime?
  created_at            DateTime              @default(now()) @map("created_at")
  updated_at            DateTime              @updatedAt @map("updated_at")
  legislative_bodies    legislative_body[]
  template_adaptations  template_adaptation[]
  template_verifications TemplateVerification[]

  @@index([access_tier, is_active])
  @@index([country_code])
  @@map("legislative_channel")
}

model legislative_body {
  id                  String              @id @default(cuid())
  channel_id          String              @map("channel_id")
  body_name           String
  body_type           String
  member_count        Int
  member_title        String
  email_pattern       String?
  api_endpoint        String?
  term_length_years   Int
  last_election       DateTime?
  next_election       DateTime?
  created_at          DateTime            @default(now()) @map("created_at")
  updated_at          DateTime            @updatedAt @map("updated_at")
  legislative_channel legislative_channel @relation(fields: [channel_id], references: [id], onDelete: Cascade)

  @@index([channel_id])
  @@map("legislative_body")
}

model template_adaptation {
  id                  String              @id @default(cuid())
  source_template_id  String              @map("source_template_id")
  target_country_code String              @map("target_country_code")
  target_language     String              @map("target_language")
  adapted_title       String
  adapted_subject     String?
  adapted_body        String
  currency_symbol     String?
  number_format       String?
  local_examples      Json?
  local_officials     Json?
  local_data_sources  Json?
  tone_adjustment     String?
  cultural_notes      String?
  usage_count         Int                 @default(0)
  success_rate        Float?
  viral_coefficient   Float?
  is_active           Boolean             @default(true)
  created_at          DateTime            @default(now()) @map("created_at")
  updated_at          DateTime            @updatedAt @map("updated_at")
  source_template     Template            @relation(fields: [source_template_id], references: [id], onDelete: Cascade)
  legislative_channel legislative_channel @relation(fields: [target_country_code], references: [country_code], onDelete: Cascade)

  @@unique([source_template_id, target_country_code, target_language])
  @@index([target_country_code, is_active])
  @@map("template_adaptation")
}




// ANALYTICS MODELS

model user_session {
  id               String    @id @default(cuid())
  session_id       String    @unique
  user_id          String?
  fingerprint      String?
  ip_address       String?
  user_agent       String?
  referrer         String?
  utm_source       String?
  utm_medium       String?
  utm_campaign     String?
  landing_page     String?
  events_count     Int       @default(0)
  page_views       Int       @default(0)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now()) @updatedAt

  @@index([session_id])
  @@index([user_id])
  @@index([created_at])
}

model analytics_event {
  id          String    @id @default(cuid())
  session_id  String
  user_id     String?
  timestamp   DateTime  @default(now())
  name        String
  funnel_id   String?
  campaign_id String?
  variation_id String?

  funnel      analytics_funnel?   @relation(fields: [funnel_id], references: [id])
  campaign    analytics_campaign? @relation(fields: [campaign_id], references: [id])
  variation   analytics_variation? @relation(fields: [variation_id], references: [id])
  properties  analytics_event_property[]

  @@index([session_id, timestamp])
  @@index([user_id, timestamp])
  @@index([name, timestamp])
}

model analytics_event_property {
  id      String @id @default(cuid())
  event_id String
  name    String
  value   String

  event   analytics_event @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@unique([event_id, name])
}

model analytics_funnel {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())

  steps       analytics_funnel_step[]
  events      analytics_event[]
}

model analytics_funnel_step {
  id          String   @id @default(cuid())
  funnel_id   String
  name        String
  step_order  Int

  funnel      analytics_funnel @relation(fields: [funnel_id], references: [id], onDelete: Cascade)

  @@unique([funnel_id, step_order])
}

model analytics_campaign {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  start_date  DateTime
  end_date    DateTime?
  budget      Float?

  events      analytics_event[]
}

model analytics_variation {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?

  events      analytics_event[]
}

// VOTER Protocol Integration
model CertificationLog {
  id                 String   @id @default(uuid())
  user_id            String   @map("user_id")
  certification_hash String?  @map("certification_hash")
  action_type        String   @map("action_type")
  reward_amount      BigInt?  @map("reward_amount")
  reputation_change  Int?     @map("reputation_change")
  template_id        String?  @map("template_id")
  recipient_emails   String[] @map("recipient_emails")
  status             String   @default("pending") // pending, certified, failed
  error_message      String?  @map("error_message")
  created_at         DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [user_id], references: [id])
  
  @@index([user_id])
  @@index([certification_hash])
  @@index([created_at])
  @@map("certification_log")
}

model TemplateVerification {
  id                    String    @id @default(cuid())
  template_id           String    @unique @map("template_id")
  user_id               String    @map("user_id")
  country_code          String    @default("US") @map("country_code")
  
  // Stage 1: Auto-correction
  correction_log        Json?     @map("correction_log") // Grammar, clarity fixes applied
  original_content      Json?     @map("original_content") // Before corrections
  
  // Stage 2: Moderation  
  moderation_status     String    @default("pending") @map("moderation_status") // pending, reviewing, approved, rejected
  severity_level        Int?      @map("severity_level") // 1-10 scale
  
  // Multi-agent consensus
  agent_votes           Json?     @map("agent_votes") // {openai: 0.8, gemini: 0.7}
  consensus_score       Float?    @map("consensus_score") // Weighted average
  
  // Quality metrics
  quality_score         Int       @default(50) @map("quality_score") // 0-100
  grammar_score         Int?      @map("grammar_score")
  clarity_score         Int?      @map("clarity_score")
  completeness_score    Int?      @map("completeness_score")
  
  // Reputation impact (quadratic)
  reputation_delta      Float     @default(0) @map("reputation_delta")
  reputation_applied    Boolean   @default(false) @map("reputation_applied")
  
  // Timestamps
  submitted_at          DateTime  @default(now()) @map("submitted_at")
  corrected_at          DateTime? @map("corrected_at")
  reviewed_at           DateTime? @map("reviewed_at")
  
  // Relations
  template              Template  @relation(fields: [template_id], references: [id])
  user                  User      @relation(fields: [user_id], references: [id])
  legislative_channel   legislative_channel? @relation(fields: [country_code], references: [country_code])
  
  @@index([template_id])
  @@index([user_id])
  @@index([moderation_status])
  @@map("template_verification")
}

model DeliveryLog {
  id              String   @id @default(cuid())
  template_id     String   @map("template_id")
  user_id         String   @map("user_id")
  delivery_method String   @map("delivery_method") // 'certified' | 'direct'
  success         Boolean
  submission_id   String?  @map("submission_id")
  error_message   String?  @map("error_message")
  metadata        Json     @default("{}")
  delivered_at    DateTime @default(now()) @map("delivered_at")
  
  @@index([template_id])
  @@index([user_id])
  @@index([delivery_method])
  @@map("delivery_logs")
}

model AuditLog {
  id         String   @id @default(cuid())
  user_id    String   @map("user_id")
  action     String
  metadata   Json     @default("{}")
  ip_address String?  @map("ip_address")
  user_agent String?  @map("user_agent")
  created_at DateTime @default(now()) @map("created_at")
  
  @@index([user_id])
  @@index([action])
  @@index([created_at])
  @@map("audit_logs")
}