// Core Production Schema
// Contains only the essential models used in production

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AUTHENTICATION & USERS

model User {
  id                     String                 @id @default(cuid())
  email                  String                 @unique
  name                   String?
  avatar                 String?
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")
  city                   String?
  congressional_district String?
  phone                  String?
  state                  String?
  street                 String?
  zip                    String?
  
  // Verification status
  is_verified            Boolean                @default(false) @map("is_verified")
  verification_method    String?                @map("verification_method") // 'self.xyz' | 'didit' | 'government_id'
  verification_data      Json?                  @map("verification_data") // Store verification details
  verified_at            DateTime?              @map("verified_at")

  // Sybil resistance (Phase 1A)
  identity_hash          String?                @unique @map("identity_hash")        // SHA-256(passport+nationality+birthYear) - prevents duplicates
  identity_fingerprint   String?                @map("identity_fingerprint")         // First 16 chars for audit-safe logging
  birth_year             Int?                   @map("birth_year")                   // For age verification (18+ requirement)

  // Rate limiting (Phase 1A)
  verification_attempts  Int                    @default(0) @map("verification_attempts")
  verification_cooldown_until DateTime?         @map("verification_cooldown_until")

  // Fraud detection (Phase 1A)
  flagged_for_review     Boolean                @default(false) @map("flagged_for_review")
  review_reason          String?                @map("review_reason")

  // Phase 2: VOTER Protocol blockchain identity (not implemented yet)
  // wallet_address, district_hash, trust_score, reputation_tier
  // pending_rewards, total_earned, challenge_score, civic_score, discourse_score
  // These fields exist in schema but unused in Phase 1

  // Profile fields
  role                   String?                // User's role/profession
  organization           String?                // User's organization  
  location               String?                // General location description
  connection             String?                // Connection to issues they advocate for
  connection_details     String?                @map("connection_details") // Additional connection context
  profile_completed_at   DateTime?              @map("profile_completed_at") // When profile was completed
  profile_visibility     String                 @default("private") @map("profile_visibility") // public, private, limited
  
  // Core relations
  account                account[]
  sessions               Session[]
  templates              Template[]
  representatives        user_representatives[]
  campaigns              template_campaign[] @relation("UserCampaigns")
  verification_audits    VerificationAudit[]
  verification_sessions  VerificationSession[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model account {
  id                  String   @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

// CORE BUSINESS LOGIC

model Template {
  id                String              @id @default(cuid())
  slug              String              @unique
  title             String
  description       String
  category          String
  type              String
  deliveryMethod    String              @map("delivery_method")
  subject           String?
  preview           String
  message_body      String
  delivery_config   Json
  cwc_config        Json?
  recipient_config  Json
  metrics           Json
  campaign_id       String?
  status            String              @default("draft")
  is_public         Boolean             @default(false)
  
  // Usage tracking
  send_count        Int                 @default(0) @map("send_count")
  last_sent_at      DateTime?           @map("last_sent_at")
  
  // Geographic scope
  applicable_countries String[]          @default([]) // ISO country codes ["US", "CA", "UK"]
  jurisdiction_level   String?           // "municipal", "state", "federal", "international"
  specific_locations   String[]          @default([]) // ["San Francisco", "Chicago", "Toronto"]
  
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  userId            String?             @map("user_id")
  user              User?               @relation(fields: [userId], references: [id])
  
  // Core relations
  template_campaign template_campaign[]
  
  @@map("template")
  @@index([userId])
  @@index([createdAt])
}

model template_campaign {
  id              String    @id
  template_id     String
  user_id         String    // WHO actually used this template
  delivery_type   String
  recipient_id    String?
  cwc_delivery_id String?
  status          String    @default("pending")
  sent_at         DateTime?
  delivered_at    DateTime?
  error_message   String?
  metadata        Json?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  template        Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
  user            User      @relation("UserCampaigns", fields: [user_id], references: [id], onDelete: Cascade)
}

// CONGRESSIONAL FEATURES

model representative {
  id                        String                 @id @default(cuid())
  bioguide_id               String                 @unique
  name                      String
  party                     String
  state                     String
  district                  String
  chamber                   String
  office_code               String
  phone                     String?
  email                     String?
  
  // === ENHANCED OFFICE INFORMATION (from congressional_office) ===
  member_name               String?                @map("member_name") // From congressional_office (may differ from name)
  office_address            String?                @map("office_address")
  office_city               String?                @map("office_city")
  office_state              String?                @map("office_state")
  office_zip                String?                @map("office_zip")
  
  // === ENHANCED TERM INFORMATION ===
  term_start                DateTime?              @map("term_start")
  term_end                  DateTime?              @map("term_end")
  current_term              Int?                   @map("current_term") // Term number
  
  // === STATUS AND METADATA ===
  is_active                 Boolean                @default(true)
  last_updated              DateTime               @default(now()) @map("last_updated")
  
  // === DATA SOURCE TRACKING ===
  data_source               String?                @map("data_source") // 'congress_api', 'bioguide', 'manual'
  source_updated_at         DateTime?              @map("source_updated_at")
  
  // === RELATIONS (preserve all) ===
  user_representatives      user_representatives[]

  @@index([state, district])
  @@index([chamber, is_active])
  @@index([bioguide_id])
  @@index([office_code])
  @@map("representative")
}

model user_representatives {
  id                String         @id @default(cuid())
  user_id           String         @map("user_id")
  representative_id String         @map("representative_id")
  relationship      String
  is_active         Boolean        @default(true)
  assigned_at       DateTime       @default(now()) @map("assigned_at")
  last_validated    DateTime?      @map("last_validated")
  representative    representative @relation(fields: [representative_id], references: [id], onDelete: Cascade)
  user              User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, representative_id])
  @@map("user_representatives")
}


// LEGISLATIVE SYSTEM (BETA)

model legislative_channel {
  id                    String                @id @default(cuid())
  country_code          String                // ISO code - removed unique constraint
  country_name          String
  legislature_name      String
  legislature_type      String
  access_method         String
  access_tier           Int                   @default(3)
  email_pattern         String?
  email_domain          String?
  email_format_notes    String?
  api_endpoint          String?
  api_auth_type         String?
  api_documentation_url String?
  rate_limit_requests   Int?
  rate_limit_daily      Int?
  form_url              String?
  form_requires_captcha Boolean               @default(false)
  form_max_length       Int?
  primary_language      String
  supported_languages   String[]
  requires_constituent  Boolean               @default(false)
  requires_real_address Boolean               @default(false)
  forbidden_words       String[]              @default([])
  message_guidelines    String?
  population            BigInt?
  internet_penetration  Float?
  democracy_index       Float?
  is_active             Boolean               @default(true)
  last_verified         DateTime?
  created_at            DateTime              @default(now()) @map("created_at")
  updated_at            DateTime              @updatedAt @map("updated_at")

  @@index([access_tier, is_active])
  @@index([country_code])
  @@map("legislative_channel")
}

model legislative_body {
  id                String   @id @default(cuid())
  name              String
  type              String   // "congress", "parliament", "legislature"
  country_code      String   // ISO code
  state_code        String?  // For state-level bodies
  jurisdiction_level String  // "federal", "state", "municipal"
  is_active         Boolean  @default(true)
  created_at        DateTime @default(now()) @map("created_at")

  @@map("legislative_body")
}

// IDENTITY VERIFICATION (PHASE 1A)

model VerificationAudit {
  id                   String    @id @default(cuid())
  user_id              String
  method               String    // 'self.xyz' | 'didit'
  status               String    // 'pending' | 'success' | 'failed' | 'expired'
  failure_reason       String?   // 'age_below_18' | 'duplicate_identity' | 'expired_passport' | 'invalid_proof'
  identity_hash        String?   // Only for successful verifications (helps detect duplicates)
  identity_fingerprint String?   // First 16 chars (audit-safe logging)
  ip_address_hash      String?   // SHA-256(IP + daily_salt) for fraud detection
  metadata             Json?     // SDK responses (sanitized, no PII)
  created_at           DateTime  @default(now()) @map("created_at")

  // Relations
  user                 User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, created_at])
  @@index([identity_hash])
  @@index([status, created_at])
  @@map("verification_audit")
}

model VerificationSession {
  id          String   @id @default(cuid())
  user_id     String
  nonce       String   @unique  // Cryptographic nonce (prevents replay attacks)
  challenge   String            // QR code data / verification challenge
  expires_at  DateTime          // 5-minute expiration (security best practice)
  status      String   @default("pending") // 'pending' | 'verified' | 'expired' | 'failed'
  method      String            // 'self.xyz' | 'didit'
  created_at  DateTime @default(now()) @map("created_at")

  // Relations
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, created_at])
  @@index([expires_at]) // For cleanup job
  @@map("verification_session")
}
