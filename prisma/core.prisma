// Core Production Schema
// Contains only the essential models used in production

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AUTHENTICATION & USERS

model User {
  id                     String                 @id @default(cuid())
  email                  String                 @unique
  name                   String?
  avatar                 String?
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")
  city                   String?
  congressional_district String?
  phone                  String?
  state                  String?
  street                 String?
  zip                    String?
  
  // Verification status
  is_verified            Boolean                @default(false) @map("is_verified")
  verification_method    String?                @map("verification_method") // 'didit', 'government_id', 'email'
  verification_data      Json?                  @map("verification_data") // Store verification details
  verified_at            DateTime?              @map("verified_at")
  
  // VOTER Protocol blockchain identity
  wallet_address         String?                @unique @map("wallet_address")
  district_hash          String?                @map("district_hash")       // Privacy-preserving district ID
  trust_score            Int                    @default(0) @map("trust_score")
  reputation_tier        String                 @default("novice") @map("reputation_tier") // 'expert', 'verified', 'novice'
  
  // Profile fields
  role                   String?                // User's role/profession
  organization           String?                // User's organization  
  location               String?                // General location description
  connection             String?                // Connection to issues they advocate for
  connection_details     String?                @map("connection_details") // Additional connection context
  profile_completed_at   DateTime?              @map("profile_completed_at") // When profile was completed
  profile_visibility     String                 @default("private") @map("profile_visibility") // public, private, limited
  
  // Core relations
  account                account[]
  sessions               Session[]
  templates              Template[]
  representatives        user_representatives[]
  campaigns              template_campaign[] @relation("UserCampaigns")
  
  // VOTER Protocol relations
  civic_actions          CivicAction[]
  reputation_logs        ReputationLog[]
  challenger_challenges  Challenge[]            @relation("ChallengerChallenges")
  defender_challenges    Challenge[]            @relation("DefenderChallenges") 
  won_challenges         Challenge[]            @relation("WonChallenges")
  challenge_stakes       ChallengeStake[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model account {
  id                  String   @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

// CORE BUSINESS LOGIC

model Template {
  id                String              @id @default(cuid())
  slug              String              @unique
  title             String
  description       String
  category          String
  type              String
  deliveryMethod    String              @map("delivery_method")
  subject           String?
  preview           String
  message_body      String
  delivery_config   Json
  cwc_config        Json?
  recipient_config  Json
  metrics           Json
  campaign_id       String?
  status            String              @default("draft")
  is_public         Boolean             @default(false)
  
  // Geographic scope
  applicable_countries String[]          @default([]) // ISO country codes ["US", "CA", "UK"]
  jurisdiction_level   String?           // "municipal", "state", "federal", "international"
  specific_locations   String[]          @default([]) // ["San Francisco", "Chicago", "Toronto"]
  
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  userId            String?             @map("user_id")
  user              User?               @relation(fields: [userId], references: [id])
  
  // Core relations
  template_campaign template_campaign[]
  civic_actions     CivicAction[]

  @@map("template")
}

model template_campaign {
  id              String    @id
  template_id     String
  user_id         String    // WHO actually used this template
  delivery_type   String
  recipient_id    String?
  cwc_delivery_id String?
  status          String    @default("pending")
  sent_at         DateTime?
  delivered_at    DateTime?
  error_message   String?
  metadata        Json?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  template        Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
  user            User      @relation("UserCampaigns", fields: [user_id], references: [id], onDelete: Cascade)
}

// CONGRESSIONAL FEATURES

model representative {
  id                   String                 @id @default(cuid())
  bioguide_id          String                 @unique
  name                 String
  party                String
  state                String
  district             String
  chamber              String
  office_code          String
  phone                String?
  email                String?
  is_active            Boolean                @default(true)
  last_updated         DateTime               @default(now()) @map("last_updated")
  user_representatives user_representatives[]

  @@map("representative")
}

model user_representatives {
  id                String         @id @default(cuid())
  user_id           String         @map("user_id")
  representative_id String         @map("representative_id")
  relationship      String
  is_active         Boolean        @default(true)
  assigned_at       DateTime       @default(now()) @map("assigned_at")
  last_validated    DateTime?      @map("last_validated")
  representative    representative @relation(fields: [representative_id], references: [id], onDelete: Cascade)
  user              User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, representative_id])
  @@map("user_representatives")
}

model congressional_office {
  id           String   @id @default(cuid())
  office_code  String   @unique
  state        String
  district     String
  member_name  String
  party        String?
  is_active    Boolean  @default(true)
  last_updated DateTime @default(now()) @map("last_updated")
}

// LEGISLATIVE SYSTEM (BETA)

model legislative_channel {
  id                    String                @id @default(cuid())
  country_code          String                // ISO code - removed unique constraint
  country_name          String
  legislature_name      String
  legislature_type      String
  access_method         String
  access_tier           Int                   @default(3)
  email_pattern         String?
  email_domain          String?
  email_format_notes    String?
  api_endpoint          String?
  api_auth_type         String?
  api_documentation_url String?
  rate_limit_requests   Int?
  rate_limit_daily      Int?
  form_url              String?
  form_requires_captcha Boolean               @default(false)
  form_max_length       Int?
  primary_language      String
  supported_languages   String[]
  requires_constituent  Boolean               @default(false)
  requires_real_address Boolean               @default(false)
  forbidden_words       String[]              @default([])
  message_guidelines    String?
  population            BigInt?
  internet_penetration  Float?
  democracy_index       Float?
  is_active             Boolean               @default(true)
  last_verified         DateTime?
  created_at            DateTime              @default(now()) @map("created_at")
  updated_at            DateTime              @updatedAt @map("updated_at")

  @@index([access_tier, is_active])
  @@index([country_code])
  @@map("legislative_channel")
}

model legislative_body {
  id                String   @id @default(cuid())
  name              String
  type              String   // "congress", "parliament", "legislature"
  country_code      String   // ISO code
  state_code        String?  // For state-level bodies
  jurisdiction_level String  // "federal", "state", "municipal"
  is_active         Boolean  @default(true)
  created_at        DateTime @default(now()) @map("created_at")

  @@map("legislative_body")
}

// ============= VOTER PROTOCOL EXTENSIONS =============
// Blockchain identity and civic action tracking

model CivicAction {
  id              String    @id @default(cuid())
  user_id         String    @map("user_id")
  template_id     String?   @map("template_id")
  action_type     String    @map("action_type")    // 'cwc_message', 'template_submit', 'challenge_create'
  
  // Blockchain integration
  tx_hash         String?   @map("tx_hash")        // Ethereum/Ronin transaction
  reward_wei      String?   @map("reward_wei")     // BigInt as string
  status          String    @default("pending")    // 'pending', 'completed', 'failed'
  
  // Provenance data from AI agents
  agent_decisions Json?     @map("agent_decisions") // AI decision trail
  consensus_data  Json?     @map("consensus_data")  // Multi-model voting results
  
  // Metadata for extensibility
  metadata        Json?     @default("{}")
  
  created_at      DateTime  @default(now()) @map("created_at")
  completed_at    DateTime? @map("completed_at")
  
  // Relations  
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  template        Template? @relation(fields: [template_id], references: [id])
  
  @@map("civic_action")
  @@index([user_id])
  @@index([action_type])
  @@index([status])
  @@index([created_at])
}

model ReputationLog {
  id              String    @id @default(cuid())
  user_id         String    @map("user_id")
  
  // Score changes for ERC-8004 compliance
  score_before    Int       @map("score_before")
  score_after     Int       @map("score_after")
  change_amount   Int       @map("change_amount")
  change_reason   String    @map("change_reason")
  
  // Blockchain proof
  tx_hash         String?   @map("tx_hash")
  block_number    Int?      @map("block_number")
  
  // Agent provenance
  agent_source    String?   @map("agent_source")    // Which agent made change
  evidence_hash   String?   @map("evidence_hash")   // IPFS hash of evidence
  confidence      Float?    @map("confidence")      // Agent confidence 0-1
  
  created_at      DateTime  @default(now()) @map("created_at")
  
  // Relations
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("reputation_log")
  @@index([user_id])
  @@index([created_at])
  @@index([change_reason])
}

model Challenge {
  id                String    @id @default(cuid())
  
  // Participants (using existing user IDs)
  challenger_id     String    @map("challenger_id")
  defender_id       String    @map("defender_id")
  
  // Challenge data
  claim_hash        String    @unique @map("claim_hash")
  evidence_ipfs     String    @map("evidence_ipfs")
  stake_amount      String    @map("stake_amount")      // BigInt as string (VOTER tokens)
  
  // Status tracking
  status            String    @default("active")        // 'active', 'resolved', 'cancelled'
  resolution        String?   @map("resolution")        // 'challenger_wins', 'defender_wins'
  winner_id         String?   @map("winner_id")
  
  // Voting period
  voting_deadline   DateTime  @map("voting_deadline")
  
  // Timing
  created_at        DateTime  @default(now()) @map("created_at")
  resolved_at       DateTime? @map("resolved_at")
  
  // Blockchain proof
  creation_tx       String?   @map("creation_tx")
  resolution_tx     String?   @map("resolution_tx")
  
  // Challenge description
  title             String
  description       String
  category          String?
  
  // Relations
  challenger        User      @relation("ChallengerChallenges", fields: [challenger_id], references: [id])
  defender          User      @relation("DefenderChallenges", fields: [defender_id], references: [id])
  winner            User?     @relation("WonChallenges", fields: [winner_id], references: [id])
  stakes            ChallengeStake[]
  
  @@map("challenge")
  @@index([status])
  @@index([created_at])
  @@index([voting_deadline])
}

model ChallengeStake {
  id             String    @id @default(cuid())
  challenge_id   String    @map("challenge_id")
  user_id        String    @map("user_id")
  
  // Stake details
  amount         String    @map("amount")           // BigInt as string
  side           String    @map("side")             // 'support', 'oppose'
  claimed        Boolean   @default(false)
  
  // Quadratic voting power calculation
  voting_power   Float     @map("voting_power")     // sqrt(amount)
  
  // Blockchain proof
  stake_tx       String?   @map("stake_tx")
  claim_tx       String?   @map("claim_tx")
  
  created_at     DateTime  @default(now()) @map("created_at")
  claimed_at     DateTime? @map("claimed_at")
  
  // Relations
  challenge      Challenge @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [user_id], references: [id])
  
  @@map("challenge_stake")
  @@unique([challenge_id, user_id])  // One stake per user per challenge
  @@index([challenge_id])
  @@index([user_id])
}

// ============= N8N WORKFLOW OPERATIONAL TABLES =============
// Tables for workflow execution state and caching

model WorkflowExecution {
  id                String    @id @default(cuid())
  execution_id      String    @unique @map("execution_id")    // N8N execution ID
  workflow_name     String    @map("workflow_name")
  
  // Execution tracking
  started_at        DateTime  @default(now()) @map("started_at")
  completed_at      DateTime? @map("completed_at")
  status            String    @default("running")            // 'running', 'success', 'failed'
  error_message     String?   @map("error_message")
  
  // Data payload
  input_data        Json?     @map("input_data")
  output_data       Json?     @map("output_data")
  execution_time_ms Int?      @map("execution_time_ms")
  
  // Workflow steps for debugging
  checkpoints       WorkflowCheckpoint[]
  
  @@map("workflow_execution")
  @@index([workflow_name])
  @@index([started_at])
  @@index([status])
}

model WorkflowCheckpoint {
  id             String    @id @default(cuid())
  execution_id   String    @map("execution_id")
  step_name      String    @map("step_name")
  step_data      Json      @map("step_data")
  created_at     DateTime  @default(now()) @map("created_at")
  
  // Relations
  execution      WorkflowExecution @relation(fields: [execution_id], references: [execution_id], onDelete: Cascade)
  
  @@map("workflow_checkpoint")
  @@index([execution_id])
}

model AgentDecisionCache {
  id             String    @id @default(cuid())
  cache_key      String    @unique @map("cache_key")
  agent_type     String    @map("agent_type")        // 'template_verifier', 'consensus_voter'
  input_hash     String    @map("input_hash")        // Hash of input for deduplication
  
  // Decision data
  decision       Json      @map("decision")
  confidence     Float?    @map("confidence")
  reasoning      String?   @map("reasoning")
  
  // Cache management
  created_at     DateTime  @default(now()) @map("created_at")
  expires_at     DateTime  @map("expires_at")
  hit_count      Int       @default(1) @map("hit_count")
  
  @@map("agent_decision_cache")
  @@index([agent_type])
  @@index([expires_at])
  @@index([created_at])
}

model ConsensusVotingSession {
  id               String    @id @default(cuid())
  session_id       String    @unique @map("session_id")
  template_id      String    @map("template_id")
  
  // Voting progress
  agents_expected  Int       @map("agents_expected")
  agents_responded Int       @default(0) @map("agents_responded")
  votes            Json      @default("{}") @map("votes")    // Individual agent votes
  
  // Results
  final_consensus  String?   @map("final_consensus")        // 'APPROVE', 'REJECT', 'NEEDS_REVIEW'
  confidence       Float?    @map("confidence")
  unanimous        Boolean   @default(false)
  
  created_at       DateTime  @default(now()) @map("created_at")
  completed_at     DateTime? @map("completed_at")
  
  @@map("consensus_voting_session")
  @@index([template_id])
  @@index([created_at])
}

model PerformanceMetric {
  id             String    @id @default(cuid())
  metric_name    String    @map("metric_name")        // 'template_verify_time', 'consensus_accuracy'
  metric_value   Float     @map("metric_value")
  
  // Dimensions for filtering
  tags           Json      @default("{}") @map("tags")
  
  recorded_at    DateTime  @default(now()) @map("recorded_at")
  
  @@map("performance_metric")
  @@index([metric_name])
  @@index([recorded_at])
}