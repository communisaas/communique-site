{"/Users/noot/Documents/communique/src/lib/services/personalization.ts":{"path":"/Users/noot/Documents/communique/src/lib/services/personalization.ts","statementMap":{"0":{"start":{"line":2,"column":17},"end":{"line":2,"column":25}},"1":{"start":{"line":3,"column":2},"end":{"line":5,"column":3}},"2":{"start":{"line":4,"column":4},"end":{"line":4,"column":56}},"3":{"start":{"line":6,"column":2},"end":{"line":8,"column":3}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":56}},"5":{"start":{"line":9,"column":2},"end":{"line":11,"column":3}},"6":{"start":{"line":10,"column":4},"end":{"line":10,"column":62}},"7":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"8":{"start":{"line":13,"column":4},"end":{"line":13,"column":81}},"9":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"10":{"start":{"line":16,"column":4},"end":{"line":16,"column":83}},"11":{"start":{"line":18,"column":2},"end":{"line":18,"column":18}}},"fnMap":{"0":{"name":"resolveVariables","decl":{"start":{"line":1,"column":16},"end":{"line":1,"column":32}},"loc":{"start":{"line":1,"column":65},"end":{"line":19,"column":1}},"line":1}},"branchMap":{"0":{"loc":{"start":{"line":3,"column":2},"end":{"line":5,"column":3}},"type":"if","locations":[{"start":{"line":3,"column":2},"end":{"line":5,"column":3}},{"start":{},"end":{}}],"line":3},"1":{"loc":{"start":{"line":6,"column":2},"end":{"line":8,"column":3}},"type":"if","locations":[{"start":{"line":6,"column":2},"end":{"line":8,"column":3}},{"start":{},"end":{}}],"line":6},"2":{"loc":{"start":{"line":9,"column":2},"end":{"line":11,"column":3}},"type":"if","locations":[{"start":{"line":9,"column":2},"end":{"line":11,"column":3}},{"start":{},"end":{}}],"line":9},"3":{"loc":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"type":"if","locations":[{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},{"start":{},"end":{}}],"line":12},"4":{"loc":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},{"start":{},"end":{}}],"line":15}},"s":{"0":10,"1":10,"2":10,"3":10,"4":9,"5":10,"6":0,"7":10,"8":3,"9":10,"10":0,"11":10},"f":{"0":10},"b":{"0":[10,0],"1":[9,1],"2":[0,10],"3":[3,7],"4":[0,10]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/lib/services/personalization.ts"],"sourcesContent":["/**\n * Template personalization service\n * Handles variable resolution in template messages\n */\n\nexport interface PersonalizationContext {\n  user: {\n    name: string;\n    city?: string;\n    state?: string;\n    address?: string;\n  };\n  representative?: {\n    name: string;\n    title?: string;\n    office?: string;\n  };\n  template: {\n    message_body: string;\n  };\n}\n\n/**\n * Resolves template variables with user and representative data\n */\nexport function resolveVariables(\n  template: string,\n  user: PersonalizationContext['user'],\n  representative?: PersonalizationContext['representative']\n): string {\n  let resolved = template;\n\n  // Replace user variables\n  if (user.name) {\n    resolved = resolved.replace(/\\[Name\\]/g, user.name);\n  }\n  if (user.city) {\n    resolved = resolved.replace(/\\[City\\]/g, user.city);\n  }\n  if (user.address) {\n    resolved = resolved.replace(/\\[Address\\]/g, user.address);\n  }\n\n  // Replace representative variables\n  if (representative?.name) {\n    resolved = resolved.replace(/\\[Representative Name\\]/g, representative.name);\n  }\n  if (representative?.title) {\n    resolved = resolved.replace(/\\[Representative Title\\]/g, representative.title);\n  }\n\n  return resolved;\n}"],"mappings":"AAyBO,gBAAS,iBACd,UACA,MACA,gBACQ;AACR,MAAI,WAAW;AAGf,MAAI,KAAK,MAAM;AACb,eAAW,SAAS,QAAQ,aAAa,KAAK,IAAI;AAAA,EACpD;AACA,MAAI,KAAK,MAAM;AACb,eAAW,SAAS,QAAQ,aAAa,KAAK,IAAI;AAAA,EACpD;AACA,MAAI,KAAK,SAAS;AAChB,eAAW,SAAS,QAAQ,gBAAgB,KAAK,OAAO;AAAA,EAC1D;AAGA,MAAI,gBAAgB,MAAM;AACxB,eAAW,SAAS,QAAQ,4BAA4B,eAAe,IAAI;AAAA,EAC7E;AACA,MAAI,gBAAgB,OAAO;AACzB,eAAW,SAAS,QAAQ,6BAA6B,eAAe,KAAK;AAAA,EAC/E;AAEA,SAAO;AACT;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"123d2e486bf40395801f08436dd10ac8c0cf423b"}}