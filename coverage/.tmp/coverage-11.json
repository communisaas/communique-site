{"/Users/noot/Documents/communique/src/routes/api/errors/report/+server.ts":{"path":"/Users/noot/Documents/communique/src/routes/api/errors/report/+server.ts","statementMap":{"0":{"start":{"line":2,"column":20},"end":{"line":36,"column":1}},"1":{"start":{"line":3,"column":2},"end":{"line":35,"column":3}},"2":{"start":{"line":4,"column":43},"end":{"line":4,"column":63}},"3":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"4":{"start":{"line":6,"column":6},"end":{"line":6,"column":84}},"5":{"start":{"line":8,"column":24},"end":{"line":20,"column":5}},"6":{"start":{"line":21,"column":4},"end":{"line":24,"column":5}},"7":{"start":{"line":22,"column":6},"end":{"line":22,"column":52}},"8":{"start":{"line":25,"column":4},"end":{"line":28,"column":7}},"9":{"start":{"line":30,"column":4},"end":{"line":30,"column":58}},"10":{"start":{"line":31,"column":4},"end":{"line":34,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":20},"end":{"line":2,"column":21}},"loc":{"start":{"line":2,"column":51},"end":{"line":36,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{},"end":{}}],"line":5},"1":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":43}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":14}},{"start":{"line":5,"column":18},"end":{"line":5,"column":43}}],"line":5},"2":{"loc":{"start":{"line":9,"column":15},"end":{"line":9,"column":47}},"type":"binary-expr","locations":[{"start":{"line":9,"column":15},"end":{"line":9,"column":28}},{"start":{"line":9,"column":32},"end":{"line":9,"column":47}}],"line":9},"3":{"loc":{"start":{"line":11,"column":15},"end":{"line":11,"column":35}},"type":"binary-expr","locations":[{"start":{"line":11,"column":15},"end":{"line":11,"column":22}},{"start":{"line":11,"column":26},"end":{"line":11,"column":35}}],"line":11},"4":{"loc":{"start":{"line":12,"column":17},"end":{"line":12,"column":46}},"type":"binary-expr","locations":[{"start":{"line":12,"column":17},"end":{"line":12,"column":32}},{"start":{"line":12,"column":36},"end":{"line":12,"column":46}}],"line":12},"5":{"loc":{"start":{"line":17,"column":20},"end":{"line":17,"column":35}},"type":"binary-expr","locations":[{"start":{"line":17,"column":20},"end":{"line":17,"column":30}},{"start":{"line":17,"column":34},"end":{"line":17,"column":35}}],"line":17},"6":{"loc":{"start":{"line":21,"column":4},"end":{"line":24,"column":5}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":24,"column":5}},{"start":{"line":23,"column":11},"end":{"line":24,"column":5}}],"line":21}},"s":{"0":1,"1":14,"2":14,"3":13,"4":3,"5":10,"6":10,"7":0,"8":10,"9":1,"10":1},"f":{"0":14},"b":{"0":[3,10],"1":[13,11],"2":[10,1],"3":[10,7],"4":[10,8],"5":[10,8],"6":[0,10]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/routes/api/errors/report/+server.ts"],"sourcesContent":["import { json } from '@sveltejs/kit';\nimport type { RequestHandler } from './$types';\nimport type { ErrorReport } from '$lib/utils/errorBoundary';\n\nexport const POST: RequestHandler = async ({ request, locals }) => {\n\ttry {\n\t\tconst { error, context, retryCount } = await request.json();\n\t\t\n\t\t// Basic validation\n\t\tif (!error || typeof error !== 'object') {\n\t\t\treturn json({ success: false, error: 'Invalid error data' }, { status: 400 });\n\t\t}\n\n\t\tconst errorReport: ErrorReport = {\n\t\t\tmessage: error.message || 'Unknown error',\n\t\t\tstack: error.stack,\n\t\t\tcontext: context || 'unknown',\n\t\t\ttimestamp: error.timestamp || Date.now(),\n\t\t\tuserAgent: error.userAgent,\n\t\t\turl: error.url,\n\t\t\tuserId: locals.user?.id,\n\t\t\tadditionalData: {\n\t\t\t\tretryCount: retryCount || 0,\n\t\t\t\tsessionId: locals.session?.id\n\t\t\t}\n\t\t};\n\n\t\t// Log error (in production, send to monitoring service)\n\t\tif (process.env.NODE_ENV === 'development') {\n\t\t\tconsole.error('Error reported:', errorReport);\n\t\t} else {\n\t\t\t// TODO: Send to monitoring service (Sentry, DataDog, etc.)\n\t\t\t// await sendToMonitoringService(errorReport);\n\t\t}\n\n\t\t// TODO: Store in database for analysis\n\t\t// await db.error_reports.create({ data: errorReport });\n\n\t\treturn json({ \n\t\t\tsuccess: true, \n\t\t\tmessage: 'Error reported successfully' \n\t\t});\n\n\t} catch (err) {\n\t\tconsole.error('Failed to process error report:', err);\n\t\treturn json({ \n\t\t\tsuccess: false, \n\t\t\terror: 'Failed to process error report' \n\t\t}, { status: 500 });\n\t}\n};"],"mappings":"AAAA,SAAS,YAAY;AAId,aAAM,OAAuB,OAAO,EAAE,SAAS,OAAO,MAAM;AAClE,MAAI;AACH,UAAM,EAAE,OAAO,SAAS,WAAW,IAAI,MAAM,QAAQ,KAAK;AAG1D,QAAI,CAAC,SAAS,OAAO,UAAU,UAAU;AACxC,aAAO,KAAK,EAAE,SAAS,OAAO,OAAO,qBAAqB,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC7E;AAEA,UAAM,cAA2B;AAAA,MAChC,SAAS,MAAM,WAAW;AAAA,MAC1B,OAAO,MAAM;AAAA,MACb,SAAS,WAAW;AAAA,MACpB,WAAW,MAAM,aAAa,KAAK,IAAI;AAAA,MACvC,WAAW,MAAM;AAAA,MACjB,KAAK,MAAM;AAAA,MACX,QAAQ,OAAO,MAAM;AAAA,MACrB,gBAAgB;AAAA,QACf,YAAY,cAAc;AAAA,QAC1B,WAAW,OAAO,SAAS;AAAA,MAC5B;AAAA,IACD;AAGA,QAAI,QAAQ,IAAI,aAAa,eAAe;AAC3C,cAAQ,MAAM,mBAAmB,WAAW;AAAA,IAC7C,OAAO;AAAA,IAGP;AAKA,WAAO,KAAK;AAAA,MACX,SAAS;AAAA,MACT,SAAS;AAAA,IACV,CAAC;AAAA,EAEF,SAAS,KAAK;AACb,YAAQ,MAAM,mCAAmC,GAAG;AACpD,WAAO,KAAK;AAAA,MACX,SAAS;AAAA,MACT,OAAO;AAAA,IACR,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,EACnB;AACD;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7cd4f089a5b3edef89bd097fbc8b9346e6bbaac9"}}