{"/Users/noot/Documents/communique/src/lib/services/personalization.ts":{"path":"/Users/noot/Documents/communique/src/lib/services/personalization.ts","statementMap":{"0":{"start":{"line":1,"column":20},"end":{"line":7,"column":1}},"1":{"start":{"line":2,"column":22},"end":{"line":2,"column":37}},"2":{"start":{"line":3,"column":25},"end":{"line":3,"column":104}},"3":{"start":{"line":4,"column":42},"end":{"line":4,"column":57}},"4":{"start":{"line":5,"column":33},"end":{"line":5,"column":35}},"5":{"start":{"line":9,"column":21},"end":{"line":9,"column":25}},"6":{"start":{"line":10,"column":2},"end":{"line":25,"column":3}},"7":{"start":{"line":11,"column":18},"end":{"line":11,"column":37}},"8":{"start":{"line":12,"column":23},"end":{"line":12,"column":45}},"9":{"start":{"line":13,"column":23},"end":{"line":13,"column":74}},"10":{"start":{"line":14,"column":24},"end":{"line":14,"column":51}},"11":{"start":{"line":15,"column":4},"end":{"line":24,"column":5}},"12":{"start":{"line":16,"column":6},"end":{"line":16,"column":62}},"13":{"start":{"line":18,"column":22},"end":{"line":18,"column":58}},"14":{"start":{"line":19,"column":6},"end":{"line":23,"column":7}},"15":{"start":{"line":20,"column":8},"end":{"line":20,"column":31}},"16":{"start":{"line":22,"column":8},"end":{"line":22,"column":61}},"17":{"start":{"line":26,"column":31},"end":{"line":26,"column":78}},"18":{"start":{"line":27,"column":2},"end":{"line":27,"column":64}},"19":{"start":{"line":28,"column":32},"end":{"line":28,"column":60}},"20":{"start":{"line":29,"column":2},"end":{"line":29,"column":65}},"21":{"start":{"line":30,"column":2},"end":{"line":30,"column":57}},"22":{"start":{"line":31,"column":2},"end":{"line":31,"column":29}},"23":{"start":{"line":34,"column":2},"end":{"line":34,"column":55}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":12},"end":{"line":2,"column":13}},"loc":{"start":{"line":2,"column":22},"end":{"line":2,"column":37}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":3,"column":15},"end":{"line":3,"column":16}},"loc":{"start":{"line":3,"column":25},"end":{"line":3,"column":104}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":4,"column":27},"end":{"line":4,"column":28}},"loc":{"start":{"line":4,"column":42},"end":{"line":4,"column":57}},"line":4},"3":{"name":"(anonymous_3)","decl":{"start":{"line":5,"column":27},"end":{"line":5,"column":28}},"loc":{"start":{"line":5,"column":33},"end":{"line":5,"column":35}},"line":5},"4":{"name":"resolveVariables","decl":{"start":{"line":8,"column":16},"end":{"line":8,"column":32}},"loc":{"start":{"line":8,"column":50},"end":{"line":32,"column":1}},"line":8},"5":{"name":"escapeRegExp","decl":{"start":{"line":33,"column":9},"end":{"line":33,"column":21}},"loc":{"start":{"line":33,"column":30},"end":{"line":35,"column":1}},"line":33}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":2,"column":37}},"type":"binary-expr","locations":[{"start":{"line":2,"column":22},"end":{"line":2,"column":31}},{"start":{"line":2,"column":35},"end":{"line":2,"column":37}}],"line":2},"1":{"loc":{"start":{"line":3,"column":25},"end":{"line":3,"column":104}},"type":"binary-expr","locations":[{"start":{"line":3,"column":25},"end":{"line":3,"column":98}},{"start":{"line":3,"column":102},"end":{"line":3,"column":104}}],"line":3},"2":{"loc":{"start":{"line":4,"column":42},"end":{"line":4,"column":57}},"type":"binary-expr","locations":[{"start":{"line":4,"column":42},"end":{"line":4,"column":51}},{"start":{"line":4,"column":55},"end":{"line":4,"column":57}}],"line":4},"3":{"loc":{"start":{"line":15,"column":4},"end":{"line":24,"column":5}},"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":24,"column":5}},{"start":{"line":17,"column":11},"end":{"line":24,"column":5}}],"line":15},"4":{"loc":{"start":{"line":19,"column":6},"end":{"line":23,"column":7}},"type":"if","locations":[{"start":{"line":19,"column":6},"end":{"line":23,"column":7}},{"start":{"line":21,"column":13},"end":{"line":23,"column":7}}],"line":19}},"s":{"0":1,"1":32,"2":32,"3":32,"4":32,"5":32,"6":32,"7":128,"8":128,"9":128,"10":128,"11":128,"12":89,"13":39,"14":39,"15":6,"16":33,"17":32,"18":32,"19":32,"20":32,"21":32,"22":32,"23":128},"f":{"0":32,"1":32,"2":32,"3":32,"4":32,"5":128},"b":{"0":[32,5],"1":[32,1],"2":[32,1],"3":[89,39],"4":[6,33]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/lib/services/personalization.ts"],"sourcesContent":["import type { User, representative } from '@prisma/client';\n\n// Define a map of variables and their resolution logic\nconst variableMap: Record<string, (user: User, rep?: representative) => string> = {\n    '[Name]': (user) => user.name || '',\n    '[Address]': (user) => [user.street, user.city, user.state, user.zip].filter(Boolean).join(', ') || '',\n    '[Representative Name]': (user, rep) => rep?.name || '',\n    '[Personal Connection]': () => '' // This is user-defined and should be in the body already\n};\n\n/**\n * Resolves variables in the email body.\n * \n * @param body The email body with unresolved variables\n * @param user The user sending the email\n * @param rep The representative receiving the email\n * @returns The email body with all variables resolved\n */\nexport function resolveVariables(body: string, user: User, rep?: representative): string {\n\tlet resolvedBody = body;\n\n\t// Handle resolved variables\n\tfor (const [variable, resolver] of Object.entries(variableMap)) {\n\t\tconst value = resolver(user, rep);\n\t\tconst escapedVar = escapeRegExp(variable);\n\n\t\t// Regex for a variable on a line by itself (a \"block\")\n\t\tconst blockRegex = new RegExp(`^[ \\t]*${escapedVar}[ \\t]*\\\\r?\\\\n`, 'gm');\n\t\t// Regex for an inline variable\n\t\tconst inlineRegex = new RegExp(escapedVar, 'g');\n\n\t\tif (value) {\n\t\t\t// If there's a value, just do a simple inline replacement\n\t\t\tresolvedBody = resolvedBody.replace(inlineRegex, value);\n\t\t} else {\n\t\t\t// If the value is empty, we first try to remove it as a block.\n\t\t\tconst newBody = resolvedBody.replace(blockRegex, '');\n\t\t\tif (resolvedBody.length !== newBody.length) {\n\t\t\t\t// The block was successfully removed.\n\t\t\t\tresolvedBody = newBody;\n\t\t\t} else {\n\t\t\t\t// Block removal didn't happen, so it must be an inline variable.\n\t\t\t\tresolvedBody = resolvedBody.replace(inlineRegex, '');\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove any unresolved variables that are on their own lines\n\tconst unresolvedBlockRegex = new RegExp(`^[ \\t]*\\\\[.*?\\\\][ \\t]*\\\\r?\\\\n`, 'gm');\n\tresolvedBody = resolvedBody.replace(unresolvedBlockRegex, '');\n\n\t// Remove any remaining inline unresolved variables\n\tconst unresolvedInlineRegex = new RegExp(`\\\\[.*?\\\\]`, 'g');\n\tresolvedBody = resolvedBody.replace(unresolvedInlineRegex, '');\n\n\n\t// Clean up any extra newlines that might result from empty variables\n\tresolvedBody = resolvedBody.replace(/\\n{3,}/g, '\\n\\n');\n\n\treturn resolvedBody.trim();\n}\n\n/**\n * Escapes special characters in a string for use in a regular expression.\n */\nfunction escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n} "],"mappings":"AAGA,MAAM,cAA4E;AAAA,EAC9E,UAAU,CAAC,SAAS,KAAK,QAAQ;AAAA,EACjC,aAAa,CAAC,SAAS,CAAC,KAAK,QAAQ,KAAK,MAAM,KAAK,OAAO,KAAK,GAAG,EAAE,OAAO,OAAO,EAAE,KAAK,IAAI,KAAK;AAAA,EACpG,yBAAyB,CAAC,MAAM,QAAQ,KAAK,QAAQ;AAAA,EACrD,yBAAyB,MAAM;AAAA;AACnC;AAUO,gBAAS,iBAAiB,MAAc,MAAY,KAA8B;AACxF,MAAI,eAAe;AAGnB,aAAW,CAAC,UAAU,QAAQ,KAAK,OAAO,QAAQ,WAAW,GAAG;AAC/D,UAAM,QAAQ,SAAS,MAAM,GAAG;AAChC,UAAM,aAAa,aAAa,QAAQ;AAGxC,UAAM,aAAa,IAAI,OAAO,SAAU,UAAU,gBAAiB,IAAI;AAEvE,UAAM,cAAc,IAAI,OAAO,YAAY,GAAG;AAE9C,QAAI,OAAO;AAEV,qBAAe,aAAa,QAAQ,aAAa,KAAK;AAAA,IACvD,OAAO;AAEN,YAAM,UAAU,aAAa,QAAQ,YAAY,EAAE;AACnD,UAAI,aAAa,WAAW,QAAQ,QAAQ;AAE3C,uBAAe;AAAA,MAChB,OAAO;AAEN,uBAAe,aAAa,QAAQ,aAAa,EAAE;AAAA,MACpD;AAAA,IACD;AAAA,EACD;AAGA,QAAM,uBAAuB,IAAI,OAAO,+BAAiC,IAAI;AAC7E,iBAAe,aAAa,QAAQ,sBAAsB,EAAE;AAG5D,QAAM,wBAAwB,IAAI,OAAO,aAAa,GAAG;AACzD,iBAAe,aAAa,QAAQ,uBAAuB,EAAE;AAI7D,iBAAe,aAAa,QAAQ,WAAW,MAAM;AAErD,SAAO,aAAa,KAAK;AAC1B;AAKA,SAAS,aAAa,QAAwB;AAC1C,SAAO,OAAO,QAAQ,uBAAuB,MAAM;AACvD;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3d62d6c8851fde72b2662bd128aa67e28fd8109c"}}