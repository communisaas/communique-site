{"/Users/noot/Documents/communique/src/routes/api/address/lookup/+server.ts":{"path":"/Users/noot/Documents/communique/src/routes/api/address/lookup/+server.ts","statementMap":{"0":{"start":{"line":3,"column":20},"end":{"line":60,"column":1}},"1":{"start":{"line":4,"column":2},"end":{"line":59,"column":3}},"2":{"start":{"line":5,"column":17},"end":{"line":5,"column":37}},"3":{"start":{"line":6,"column":41},"end":{"line":6,"column":45}},"4":{"start":{"line":7,"column":4},"end":{"line":9,"column":5}},"5":{"start":{"line":8,"column":6},"end":{"line":8,"column":84}},"6":{"start":{"line":10,"column":20},"end":{"line":15,"column":5}},"7":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"8":{"start":{"line":17,"column":6},"end":{"line":17,"column":87}},"9":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"10":{"start":{"line":20,"column":6},"end":{"line":20,"column":73}},"11":{"start":{"line":22,"column":21},"end":{"line":22,"column":69}},"12":{"start":{"line":23,"column":4},"end":{"line":45,"column":7}},"13":{"start":{"line":35,"column":50},"end":{"line":41,"column":9}},"14":{"start":{"line":47,"column":4},"end":{"line":49,"column":5}},"15":{"start":{"line":48,"column":6},"end":{"line":48,"column":16}},"16":{"start":{"line":50,"column":4},"end":{"line":57,"column":5}},"17":{"start":{"line":51,"column":6},"end":{"line":53,"column":7}},"18":{"start":{"line":52,"column":8},"end":{"line":52,"column":82}},"19":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"20":{"start":{"line":55,"column":8},"end":{"line":55,"column":82}},"21":{"start":{"line":58,"column":4},"end":{"line":58,"column":74}},"22":{"start":{"line":61,"column":19},"end":{"line":113,"column":1}},"23":{"start":{"line":62,"column":2},"end":{"line":112,"column":3}},"24":{"start":{"line":63,"column":18},"end":{"line":63,"column":47}},"25":{"start":{"line":64,"column":21},"end":{"line":64,"column":53}},"26":{"start":{"line":65,"column":4},"end":{"line":67,"column":5}},"27":{"start":{"line":66,"column":6},"end":{"line":66,"column":54}},"28":{"start":{"line":68,"column":4},"end":{"line":70,"column":5}},"29":{"start":{"line":69,"column":6},"end":{"line":69,"column":57}},"30":{"start":{"line":71,"column":21},"end":{"line":96,"column":5}},"31":{"start":{"line":97,"column":4},"end":{"line":106,"column":7}},"32":{"start":{"line":108,"column":4},"end":{"line":110,"column":5}},"33":{"start":{"line":109,"column":6},"end":{"line":109,"column":16}},"34":{"start":{"line":111,"column":4},"end":{"line":111,"column":62}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":20},"end":{"line":3,"column":21}},"loc":{"start":{"line":3,"column":43},"end":{"line":60,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":35,"column":36},"end":{"line":35,"column":37}},"loc":{"start":{"line":35,"column":50},"end":{"line":41,"column":9}},"line":35},"2":{"name":"(anonymous_2)","decl":{"start":{"line":61,"column":19},"end":{"line":61,"column":20}},"loc":{"start":{"line":61,"column":38},"end":{"line":113,"column":1}},"line":61}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":9,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":9,"column":5}},{"start":{},"end":{}}],"line":7},"1":{"loc":{"start":{"line":7,"column":8},"end":{"line":7,"column":42}},"type":"binary-expr","locations":[{"start":{"line":7,"column":8},"end":{"line":7,"column":15}},{"start":{"line":7,"column":19},"end":{"line":7,"column":24}},{"start":{"line":7,"column":28},"end":{"line":7,"column":34}},{"start":{"line":7,"column":38},"end":{"line":7,"column":42}}],"line":7},"2":{"loc":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},{"start":{},"end":{}}],"line":16},"3":{"loc":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},{"start":{},"end":{}}],"line":19},"4":{"loc":{"start":{"line":47,"column":4},"end":{"line":49,"column":5}},"type":"if","locations":[{"start":{"line":47,"column":4},"end":{"line":49,"column":5}},{"start":{},"end":{}}],"line":47},"5":{"loc":{"start":{"line":47,"column":8},"end":{"line":47,"column":57}},"type":"binary-expr","locations":[{"start":{"line":47,"column":8},"end":{"line":47,"column":11}},{"start":{"line":47,"column":15},"end":{"line":47,"column":38}},{"start":{"line":47,"column":42},"end":{"line":47,"column":57}}],"line":47},"6":{"loc":{"start":{"line":50,"column":4},"end":{"line":57,"column":5}},"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":57,"column":5}},{"start":{},"end":{}}],"line":50},"7":{"loc":{"start":{"line":51,"column":6},"end":{"line":53,"column":7}},"type":"if","locations":[{"start":{"line":51,"column":6},"end":{"line":53,"column":7}},{"start":{},"end":{}}],"line":51},"8":{"loc":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},{"start":{},"end":{}}],"line":54},"9":{"loc":{"start":{"line":65,"column":4},"end":{"line":67,"column":5}},"type":"if","locations":[{"start":{"line":65,"column":4},"end":{"line":67,"column":5}},{"start":{},"end":{}}],"line":65},"10":{"loc":{"start":{"line":68,"column":4},"end":{"line":70,"column":5}},"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":70,"column":5}},{"start":{},"end":{}}],"line":68},"11":{"loc":{"start":{"line":108,"column":4},"end":{"line":110,"column":5}},"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":110,"column":5}},{"start":{},"end":{}}],"line":108},"12":{"loc":{"start":{"line":108,"column":8},"end":{"line":108,"column":57}},"type":"binary-expr","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":11}},{"start":{"line":108,"column":15},"end":{"line":108,"column":38}},{"start":{"line":108,"column":42},"end":{"line":108,"column":57}}],"line":108}},"s":{"0":1,"1":5,"2":5,"3":5,"4":5,"5":1,"6":4,"7":4,"8":1,"9":3,"10":1,"11":2,"12":1,"13":1,"14":4,"15":3,"16":1,"17":1,"18":1,"19":0,"20":0,"21":0,"22":1,"23":3,"24":3,"25":3,"26":3,"27":1,"28":2,"29":1,"30":1,"31":1,"32":2,"33":2,"34":0},"f":{"0":5,"1":1,"2":3},"b":{"0":[1,4],"1":[5,5,5,4],"2":[1,3],"3":[1,2],"4":[3,1],"5":[4,4,4],"6":[1,0],"7":[1,0],"8":[0,0],"9":[1,2],"10":[1,1],"11":[2,0],"12":[2,2,2]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/routes/api/address/lookup/+server.ts"],"sourcesContent":["import { json, error } from '@sveltejs/kit';\nimport type { RequestHandler } from './$types';\nimport { addressLookup } from '$lib/congress/address-lookup';\n\n// POST /api/address/lookup - Find representatives for a given address\nexport const POST: RequestHandler = async ({ request }) => {\n    try {\n        const data = await request.json();\n        const { street, city, state, zip } = data;\n        \n        // Validate required fields\n        if (!street || !city || !state || !zip) {\n            throw error(400, 'Missing required address fields: street, city, state, zip');\n        }\n        \n        // Clean and validate inputs\n        const address = {\n            street: street.trim(),\n            city: city.trim(),\n            state: state.trim().toUpperCase(),\n            zip: zip.trim()\n        };\n        \n        // Validate state code (should be 2 letters)\n        if (!/^[A-Z]{2}$/.test(address.state)) {\n            throw error(400, 'State must be a valid 2-letter state code (e.g., CA, NY, TX)');\n        }\n        \n        // Validate ZIP code (should be 5 or 9 digits)\n        if (!/^\\d{5}(-?\\d{4})?$/.test(address.zip)) {\n            throw error(400, 'ZIP code must be in format 12345 or 12345-6789');\n        }\n        \n        \n        \n        // Perform the lookup\n        const userReps = await addressLookup.lookupRepsByAddress(address);\n        \n        // Return the user's representatives\n        return json({\n            success: true,\n            address: address,\n            representatives: {\n                house: {\n                    name: userReps.house.name,\n                    party: userReps.house.party,\n                    state: userReps.house.state,\n                    district: userReps.house.district,\n                    chamber: userReps.house.chamber,\n                    officeCode: userReps.house.officeCode\n                },\n                senate: userReps.senate.map(senator => ({\n                    name: senator.name,\n                    party: senator.party,\n                    state: senator.state,\n                    chamber: senator.chamber,\n                    officeCode: senator.officeCode\n                }))\n            },\n            district: userReps.district,\n            message: `Found ${userReps.senate.length + 1} representatives for ${address.city}, ${address.state}`\n        });\n        \n    } catch (err) {\n        \n        // Handle specific error types\n        if (err && typeof err === 'object' && 'status' in err) {\n            throw err; // Re-throw SvelteKit errors\n        }\n        \n        if (err instanceof Error) {\n            if (err.message.includes('Congress API error')) {\n                throw error(503, 'Congressional data service is temporarily unavailable');\n            }\n            if (err.message.includes('Google Civic API error')) {\n                throw error(503, 'Address validation service is temporarily unavailable');\n            }\n        }\n        \n        throw error(500, 'Failed to lookup representatives for this address');\n    }\n};\n\n// GET /api/address/lookup - Validate a specific district (for testing)\nexport const GET: RequestHandler = async ({ url }) => {\n    try {\n        const state = url.searchParams.get('state');\n        const district = url.searchParams.get('district');\n        \n        if (!state) {\n            throw error(400, 'state parameter is required');\n        }\n        \n        if (!district) {\n            throw error(400, 'district parameter is required');\n        }\n        \n        // Mock lookup for testing purposes\n        const mockReps = {\n            house: {\n                name: `Representative for ${state.toUpperCase()}-${district}`,\n                party: 'Unknown',\n                state: state.toUpperCase(),\n                district: district,\n                chamber: 'house' as const,\n                officeCode: `${state.toUpperCase()}${district}H`\n            },\n            senate: [\n                {\n                    name: `Senior Senator for ${state.toUpperCase()}`,\n                    party: 'Unknown',\n                    state: state.toUpperCase(),\n                    chamber: 'senate' as const,\n                    officeCode: `${state.toUpperCase()}S1`\n                },\n                {\n                    name: `Junior Senator for ${state.toUpperCase()}`,\n                    party: 'Unknown',\n                    state: state.toUpperCase(),\n                    chamber: 'senate' as const,\n                    officeCode: `${state.toUpperCase()}S2`\n                }\n            ]\n        };\n        \n        return json({\n            success: true,\n            test: true,\n            representatives: mockReps,\n            district: {\n                state: state.toUpperCase(),\n                district: district\n            },\n            message: `Mock representatives for ${state.toUpperCase()}-${district}`\n        });\n        \n    } catch (err) {\n        \n        if (err && typeof err === 'object' && 'status' in err) {\n            throw err;\n        }\n        \n        throw error(500, 'Failed to lookup district information');\n    }\n}; "],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6127bac0957ec61bc69ccd027de79bf8a713a110"}}