{"/Users/noot/Documents/communique/src/routes/auth/google/callback/+server.ts":{"path":"/Users/noot/Documents/communique/src/routes/auth/google/callback/+server.ts","statementMap":{"0":{"start":{"line":7,"column":19},"end":{"line":150,"column":1}},"1":{"start":{"line":8,"column":15},"end":{"line":8,"column":43}},"2":{"start":{"line":9,"column":16},"end":{"line":9,"column":45}},"3":{"start":{"line":10,"column":22},"end":{"line":10,"column":48}},"4":{"start":{"line":11,"column":23},"end":{"line":11,"column":57}},"5":{"start":{"line":12,"column":19},"end":{"line":12,"column":65}},"6":{"start":{"line":13,"column":17},"end":{"line":17,"column":3}},"7":{"start":{"line":18,"column":2},"end":{"line":18,"column":47}},"8":{"start":{"line":19,"column":2},"end":{"line":19,"column":55}},"9":{"start":{"line":20,"column":2},"end":{"line":20,"column":51}},"10":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"11":{"start":{"line":22,"column":4},"end":{"line":22,"column":59}},"12":{"start":{"line":24,"column":2},"end":{"line":26,"column":3}},"13":{"start":{"line":25,"column":4},"end":{"line":25,"column":45}},"14":{"start":{"line":27,"column":2},"end":{"line":149,"column":3}},"15":{"start":{"line":28,"column":19},"end":{"line":28,"column":77}},"16":{"start":{"line":29,"column":31},"end":{"line":33,"column":6}},"17":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"18":{"start":{"line":35,"column":6},"end":{"line":35,"column":72}},"19":{"start":{"line":37,"column":23},"end":{"line":37,"column":54}},"20":{"start":{"line":38,"column":26},"end":{"line":48,"column":6}},"21":{"start":{"line":50,"column":4},"end":{"line":108,"column":5}},"22":{"start":{"line":51,"column":6},"end":{"line":59,"column":9}},"23":{"start":{"line":60,"column":6},"end":{"line":60,"column":34}},"24":{"start":{"line":62,"column":27},"end":{"line":64,"column":8}},"25":{"start":{"line":65,"column":6},"end":{"line":107,"column":7}},"26":{"start":{"line":66,"column":8},"end":{"line":81,"column":11}},"27":{"start":{"line":82,"column":8},"end":{"line":82,"column":28}},"28":{"start":{"line":84,"column":8},"end":{"line":90,"column":11}},"29":{"start":{"line":91,"column":8},"end":{"line":106,"column":11}},"30":{"start":{"line":109,"column":31},"end":{"line":109,"column":104}},"31":{"start":{"line":110,"column":20},"end":{"line":110,"column":68}},"32":{"start":{"line":111,"column":25},"end":{"line":111,"column":83}},"33":{"start":{"line":112,"column":4},"end":{"line":118,"column":7}},"34":{"start":{"line":119,"column":23},"end":{"line":119,"column":73}},"35":{"start":{"line":120,"column":35},"end":{"line":120,"column":173}},"36":{"start":{"line":121,"column":29},"end":{"line":121,"column":95}},"37":{"start":{"line":122,"column":23},"end":{"line":122,"column":63}},"38":{"start":{"line":123,"column":4},"end":{"line":131,"column":5}},"39":{"start":{"line":124,"column":35},"end":{"line":124,"column":97}},"40":{"start":{"line":125,"column":6},"end":{"line":125,"column":42}},"41":{"start":{"line":126,"column":11},"end":{"line":131,"column":5}},"42":{"start":{"line":127,"column":35},"end":{"line":127,"column":97}},"43":{"start":{"line":128,"column":6},"end":{"line":128,"column":42}},"44":{"start":{"line":130,"column":6},"end":{"line":130,"column":30}},"45":{"start":{"line":133,"column":4},"end":{"line":135,"column":5}},"46":{"start":{"line":134,"column":6},"end":{"line":134,"column":16}},"47":{"start":{"line":136,"column":4},"end":{"line":146,"column":7}},"48":{"start":{"line":147,"column":25},"end":{"line":147,"column":171}},"49":{"start":{"line":148,"column":4},"end":{"line":148,"column":36}},"50":{"start":{"line":152,"column":16},"end":{"line":152,"column":58}},"51":{"start":{"line":153,"column":2},"end":{"line":153,"column":82}},"52":{"start":{"line":153,"column":37},"end":{"line":153,"column":71}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":19},"end":{"line":7,"column":20}},"loc":{"start":{"line":7,"column":47},"end":{"line":150,"column":1}},"line":7},"1":{"name":"generateAccountId","decl":{"start":{"line":151,"column":9},"end":{"line":151,"column":26}},"loc":{"start":{"line":151,"column":29},"end":{"line":154,"column":1}},"line":151},"2":{"name":"(anonymous_2)","decl":{"start":{"line":153,"column":27},"end":{"line":153,"column":28}},"loc":{"start":{"line":153,"column":37},"end":{"line":153,"column":71}},"line":153}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":19},"end":{"line":12,"column":65}},"type":"binary-expr","locations":[{"start":{"line":12,"column":19},"end":{"line":12,"column":49}},{"start":{"line":12,"column":53},"end":{"line":12,"column":65}}],"line":12},"1":{"loc":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},{"start":{},"end":{}}],"line":21},"2":{"loc":{"start":{"line":21,"column":6},"end":{"line":21,"column":54}},"type":"binary-expr","locations":[{"start":{"line":21,"column":6},"end":{"line":21,"column":11}},{"start":{"line":21,"column":15},"end":{"line":21,"column":21}},{"start":{"line":21,"column":25},"end":{"line":21,"column":37}},{"start":{"line":21,"column":41},"end":{"line":21,"column":54}}],"line":21},"3":{"loc":{"start":{"line":24,"column":2},"end":{"line":26,"column":3}},"type":"if","locations":[{"start":{"line":24,"column":2},"end":{"line":26,"column":3}},{"start":{},"end":{}}],"line":24},"4":{"loc":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},{"start":{},"end":{}}],"line":34},"5":{"loc":{"start":{"line":50,"column":4},"end":{"line":108,"column":5}},"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":108,"column":5}},{"start":{"line":61,"column":11},"end":{"line":108,"column":5}}],"line":50},"6":{"loc":{"start":{"line":55,"column":25},"end":{"line":55,"column":80}},"type":"cond-expr","locations":[{"start":{"line":55,"column":52},"end":{"line":55,"column":73}},{"start":{"line":55,"column":76},"end":{"line":55,"column":80}}],"line":55},"7":{"loc":{"start":{"line":56,"column":22},"end":{"line":56,"column":118}},"type":"cond-expr","locations":[{"start":{"line":56,"column":54},"end":{"line":56,"column":111}},{"start":{"line":56,"column":114},"end":{"line":56,"column":118}}],"line":56},"8":{"loc":{"start":{"line":65,"column":6},"end":{"line":107,"column":7}},"type":"if","locations":[{"start":{"line":65,"column":6},"end":{"line":107,"column":7}},{"start":{"line":83,"column":13},"end":{"line":107,"column":7}}],"line":65},"9":{"loc":{"start":{"line":74,"column":27},"end":{"line":74,"column":82}},"type":"cond-expr","locations":[{"start":{"line":74,"column":54},"end":{"line":74,"column":75}},{"start":{"line":74,"column":78},"end":{"line":74,"column":82}}],"line":74},"10":{"loc":{"start":{"line":75,"column":24},"end":{"line":75,"column":120}},"type":"cond-expr","locations":[{"start":{"line":75,"column":56},"end":{"line":75,"column":113}},{"start":{"line":75,"column":116},"end":{"line":75,"column":120}}],"line":75},"11":{"loc":{"start":{"line":99,"column":27},"end":{"line":99,"column":82}},"type":"cond-expr","locations":[{"start":{"line":99,"column":54},"end":{"line":99,"column":75}},{"start":{"line":99,"column":78},"end":{"line":99,"column":82}}],"line":99},"12":{"loc":{"start":{"line":100,"column":24},"end":{"line":100,"column":120}},"type":"cond-expr","locations":[{"start":{"line":100,"column":56},"end":{"line":100,"column":113}},{"start":{"line":100,"column":116},"end":{"line":100,"column":120}}],"line":100},"13":{"loc":{"start":{"line":109,"column":31},"end":{"line":109,"column":104}},"type":"binary-expr","locations":[{"start":{"line":109,"column":31},"end":{"line":109,"column":66}},{"start":{"line":109,"column":70},"end":{"line":109,"column":104}}],"line":109},"14":{"loc":{"start":{"line":111,"column":25},"end":{"line":111,"column":83}},"type":"cond-expr","locations":[{"start":{"line":111,"column":46},"end":{"line":111,"column":63}},{"start":{"line":111,"column":66},"end":{"line":111,"column":83}}],"line":111},"15":{"loc":{"start":{"line":119,"column":23},"end":{"line":119,"column":73}},"type":"binary-expr","locations":[{"start":{"line":119,"column":23},"end":{"line":119,"column":34}},{"start":{"line":119,"column":38},"end":{"line":119,"column":47}},{"start":{"line":119,"column":51},"end":{"line":119,"column":61}},{"start":{"line":119,"column":65},"end":{"line":119,"column":73}}],"line":119},"16":{"loc":{"start":{"line":120,"column":35},"end":{"line":120,"column":173}},"type":"binary-expr","locations":[{"start":{"line":120,"column":35},"end":{"line":120,"column":46}},{"start":{"line":120,"column":51},"end":{"line":120,"column":86}},{"start":{"line":120,"column":90},"end":{"line":120,"column":121}},{"start":{"line":120,"column":125},"end":{"line":120,"column":143}},{"start":{"line":120,"column":147},"end":{"line":120,"column":172}}],"line":120},"17":{"loc":{"start":{"line":121,"column":29},"end":{"line":121,"column":95}},"type":"binary-expr","locations":[{"start":{"line":121,"column":29},"end":{"line":121,"column":64}},{"start":{"line":121,"column":68},"end":{"line":121,"column":95}}],"line":121},"18":{"loc":{"start":{"line":122,"column":23},"end":{"line":122,"column":63}},"type":"binary-expr","locations":[{"start":{"line":122,"column":23},"end":{"line":122,"column":33}},{"start":{"line":122,"column":37},"end":{"line":122,"column":63}}],"line":122},"19":{"loc":{"start":{"line":123,"column":4},"end":{"line":131,"column":5}},"type":"if","locations":[{"start":{"line":123,"column":4},"end":{"line":131,"column":5}},{"start":{"line":126,"column":11},"end":{"line":131,"column":5}}],"line":123},"20":{"loc":{"start":{"line":126,"column":11},"end":{"line":131,"column":5}},"type":"if","locations":[{"start":{"line":126,"column":11},"end":{"line":131,"column":5}},{"start":{"line":129,"column":11},"end":{"line":131,"column":5}}],"line":126},"21":{"loc":{"start":{"line":126,"column":15},"end":{"line":126,"column":46}},"type":"binary-expr","locations":[{"start":{"line":126,"column":15},"end":{"line":126,"column":31}},{"start":{"line":126,"column":35},"end":{"line":126,"column":46}}],"line":126},"22":{"loc":{"start":{"line":133,"column":4},"end":{"line":135,"column":5}},"type":"if","locations":[{"start":{"line":133,"column":4},"end":{"line":135,"column":5}},{"start":{},"end":{}}],"line":133},"23":{"loc":{"start":{"line":133,"column":8},"end":{"line":133,"column":72}},"type":"binary-expr","locations":[{"start":{"line":133,"column":8},"end":{"line":133,"column":31}},{"start":{"line":133,"column":35},"end":{"line":133,"column":52}},{"start":{"line":133,"column":56},"end":{"line":133,"column":72}}],"line":133},"24":{"loc":{"start":{"line":138,"column":15},"end":{"line":138,"column":67}},"type":"cond-expr","locations":[{"start":{"line":138,"column":38},"end":{"line":138,"column":49}},{"start":{"line":138,"column":52},"end":{"line":138,"column":67}}],"line":138},"25":{"loc":{"start":{"line":139,"column":13},"end":{"line":139,"column":54}},"type":"cond-expr","locations":[{"start":{"line":139,"column":36},"end":{"line":139,"column":45}},{"start":{"line":139,"column":48},"end":{"line":139,"column":54}}],"line":139},"26":{"loc":{"start":{"line":147,"column":25},"end":{"line":147,"column":171}},"type":"cond-expr","locations":[{"start":{"line":147,"column":65},"end":{"line":147,"column":88}},{"start":{"line":147,"column":91},"end":{"line":147,"column":171}}],"line":147},"27":{"loc":{"start":{"line":147,"column":117},"end":{"line":147,"column":169}},"type":"cond-expr","locations":[{"start":{"line":147,"column":140},"end":{"line":147,"column":151}},{"start":{"line":147,"column":154},"end":{"line":147,"column":169}}],"line":147}},"s":{"0":1,"1":17,"2":17,"3":17,"4":17,"5":17,"6":17,"7":17,"8":17,"9":17,"10":17,"11":3,"12":14,"13":1,"14":13,"15":13,"16":2,"17":2,"18":0,"19":2,"20":2,"21":2,"22":0,"23":0,"24":2,"25":2,"26":0,"27":0,"28":2,"29":2,"30":2,"31":2,"32":2,"33":2,"34":2,"35":2,"36":2,"37":2,"38":2,"39":0,"40":0,"41":2,"42":0,"43":0,"44":2,"45":11,"46":0,"47":11,"48":11,"49":11,"50":2,"51":2,"52":40},"f":{"0":17,"1":2,"2":40},"b":{"0":[17,1],"1":[3,14],"2":[17,16,15,14],"3":[1,13],"4":[0,2],"5":[0,2],"6":[0,0],"7":[0,0],"8":[0,2],"9":[0,0],"10":[0,0],"11":[2,0],"12":[2,0],"13":[2,2],"14":[0,2],"15":[2,0,0,0],"16":[2,2,2,2,2],"17":[2,0],"18":[2,0],"19":[0,2],"20":[0,2],"21":[2,0],"22":[0,11],"23":[11,0,0],"24":[11,0],"25":[11,0],"26":[0,11],"27":[11,0]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/routes/auth/google/callback/+server.ts"],"sourcesContent":["import { error, redirect } from '@sveltejs/kit';\nimport { Google } from 'arctic';\nimport { db } from '$lib/server/db';\nimport { createSession, sessionCookieName } from '$lib/server/auth';\nimport { encodeHexLowerCase } from '@oslojs/encoding';\nimport { sha256 } from '@oslojs/crypto/sha2';\nimport type { RequestHandler } from './$types';\n\nexport const GET: RequestHandler = async ({ url, cookies }) => {\n\tconst code = url.searchParams.get('code');\n\tconst state = url.searchParams.get('state');\n\tconst storedState = cookies.get('oauth_state');\n\tconst codeVerifier = cookies.get('oauth_code_verifier');\n\tconst returnTo = cookies.get('oauth_return_to') || '/dashboard';\n\t\n\t// Create Google OAuth provider with static redirect URI\n\tconst google = new Google(\n\t\tprocess.env.GOOGLE_CLIENT_ID!,\n\t\tprocess.env.GOOGLE_CLIENT_SECRET!,\n\t\t`${process.env.OAUTH_REDIRECT_BASE_URL}/auth/google/callback`\n\t);\n\t\n\t// Clear OAuth cookies\n\tcookies.delete('oauth_state', { path: '/' });\n\tcookies.delete('oauth_code_verifier', { path: '/' });\n\tcookies.delete('oauth_return_to', { path: '/' });\n\t\n\tif (!code || !state || !storedState || !codeVerifier) {\n\t\treturn error(400, 'Missing required OAuth parameters');\n\t}\n\t\n\tif (state !== storedState) {\n\t\treturn error(400, 'Invalid OAuth state');\n\t}\n\t\n\ttry {\n\t\t// Exchange authorization code for tokens\n\t\tconst tokens = await google.validateAuthorizationCode(code, codeVerifier);\n\t\t\n\t\t// Fetch user info from Google\n\t\tconst googleUserResponse = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${tokens.accessToken()}`\n\t\t\t}\n\t\t});\n\t\t\n\t\tif (!googleUserResponse.ok) {\n\t\t\treturn error(500, 'Failed to fetch user information from Google');\n\t\t}\n\t\t\n\t\tconst googleUser = await googleUserResponse.json();\n\t\t\n\t\t// Check if user already exists\n\t\tlet existingAccount = await db.account.findUnique({\n\t\t\twhere: {\n\t\t\t\tprovider_provider_account_id: {\n\t\t\t\t\tprovider: 'google',\n\t\t\t\t\tprovider_account_id: googleUser.id\n\t\t\t\t}\n\t\t\t},\n\t\t\tinclude: {\n\t\t\t\tuser: true\n\t\t\t}\n\t\t});\n\t\t\n\t\tlet user;\n\t\t\n\t\tif (existingAccount) {\n\t\t\t// Update existing account tokens\n\t\t\tawait db.account.update({\n\t\t\t\twhere: { id: existingAccount.id },\n\t\t\t\tdata: {\n\t\t\t\t\taccess_token: tokens.accessToken(),\n\t\t\t\t\trefresh_token: tokens.hasRefreshToken() ? tokens.refreshToken() : null,\n\t\t\t\t\texpires_at: tokens.accessTokenExpiresAt() ? Math.floor(tokens.accessTokenExpiresAt().getTime() / 1000) : null,\n\t\t\t\t\tupdated_at: new Date()\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tuser = existingAccount.user;\n\t\t} else {\n\t\t\t// Check if user exists by email\n\t\t\tconst existingUser = await db.user.findUnique({\n\t\t\t\twhere: { email: googleUser.email }\n\t\t\t});\n\t\t\t\n\t\t\tif (existingUser) {\n\t\t\t\t// Link Google account to existing user\n\t\t\t\tawait db.account.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tid: generateAccountId(),\n\t\t\t\t\t\tuser_id: existingUser.id,\n\t\t\t\t\t\ttype: 'oauth',\n\t\t\t\t\t\tprovider: 'google',\n\t\t\t\t\t\tprovider_account_id: googleUser.id,\n\t\t\t\t\t\taccess_token: tokens.accessToken(),\n\t\t\t\t\t\trefresh_token: tokens.hasRefreshToken() ? tokens.refreshToken() : null,\n\t\t\t\t\t\texpires_at: tokens.accessTokenExpiresAt() ? Math.floor(tokens.accessTokenExpiresAt().getTime() / 1000) : null,\n\t\t\t\t\t\ttoken_type: 'Bearer',\n\t\t\t\t\t\tscope: 'profile email',\n\t\t\t\t\t\tcreated_at: new Date(),\n\t\t\t\t\t\tupdated_at: new Date()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tuser = existingUser;\n\t\t\t} else {\n\t\t\t\t// Create new user and account\n\t\t\t\tuser = await db.user.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\temail: googleUser.email,\n\t\t\t\t\t\tname: googleUser.name,\n\t\t\t\t\t\tavatar: googleUser.picture\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tawait db.account.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tid: generateAccountId(),\n\t\t\t\t\t\tuser_id: user.id,\n\t\t\t\t\t\ttype: 'oauth',\n\t\t\t\t\t\tprovider: 'google',\n\t\t\t\t\t\tprovider_account_id: googleUser.id,\n\t\t\t\t\t\taccess_token: tokens.accessToken(),\n\t\t\t\t\t\trefresh_token: tokens.hasRefreshToken() ? tokens.refreshToken() : null,\n\t\t\t\t\t\texpires_at: tokens.accessTokenExpiresAt() ? Math.floor(tokens.accessTokenExpiresAt().getTime() / 1000) : null,\n\t\t\t\t\t\ttoken_type: 'Bearer',\n\t\t\t\t\t\tscope: 'profile email',\n\t\t\t\t\t\tcreated_at: new Date(),\n\t\t\t\t\t\tupdated_at: new Date()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Create extended session for social media funnel users\n\t\tconst isFromSocialFunnel = returnTo.includes('template-modal') || returnTo.includes('auth=required');\n\t\tconst session = await createSession(user.id, isFromSocialFunnel);\n\t\t\n\t\t// Set session cookie with extended expiry for social funnel users\n\t\tconst cookieMaxAge = isFromSocialFunnel ? 60 * 60 * 24 * 90 : 60 * 60 * 24 * 30; // 90 or 30 days\n\t\tcookies.set(sessionCookieName, session.id, {\n\t\t\tpath: '/',\n\t\t\tsecure: process.env.NODE_ENV === 'production',\n\t\t\thttpOnly: true,\n\t\t\tmaxAge: cookieMaxAge,\n\t\t\tsameSite: 'lax'\n\t\t});\n\t\t\n\t\t// Check if user needs address collection\n\t\tconst hasAddress = user.street && user.city && user.state && user.zip;\n\t\tconst needsAddressCollection = !hasAddress && (\n\t\t\treturnTo.includes('template-modal') || \n\t\t\treturnTo.includes('/template/') ||\n\t\t\tisFromSocialFunnel ||\n\t\t\treturnTo !== '/dashboard' // Any non-dashboard destination likely needs address\n\t\t);\n\t\t\n\t\t// Check if this is specifically for direct outreach (profile needed)\n\t\tconst isDirectOutreach = returnTo.includes('template-modal') && returnTo.includes('direct');\n\t\tconst hasProfile = user.phone && user.phone.startsWith('{'); // Check if phone contains profile JSON\n\t\t\n\t\tif (needsAddressCollection) {\n\t\t\t// Redirect to address collection for congressional templates\n\t\t\tconst addressCollectionUrl = `/onboarding/address?returnTo=${encodeURIComponent(returnTo)}`;\n\t\t\tredirect(302, addressCollectionUrl);\n\t\t} else if (isDirectOutreach && !hasProfile) {\n\t\t\t// Direct outreach template - redirect to profile completion\n\t\t\tconst profileCollectionUrl = `/onboarding/profile?returnTo=${encodeURIComponent(returnTo)}`;\n\t\t\tredirect(302, profileCollectionUrl);\n\t\t} else {\n\t\t\tredirect(302, returnTo);\n\t\t}\n\t\t\n\t} catch (err) {\n\t\t// Don't log SvelteKit redirects as errors\n\t\tif (err instanceof Response && err.status >= 300 && err.status < 400) {\n\t\t\tthrow err;\n\t\t}\n\t\t\n\t\tconsole.error('Google OAuth error:', {\n\t\t\terror: err,\n\t\t\tmessage: err instanceof Error ? err.message : 'Unknown error',\n\t\t\tstack: err instanceof Error ? err.stack : undefined,\n\t\t\tenv: {\n\t\t\t\thasGoogleClientId: !!process.env.GOOGLE_CLIENT_ID,\n\t\t\t\thasGoogleClientSecret: !!process.env.GOOGLE_CLIENT_SECRET,\n\t\t\t\toauthRedirectBase: process.env.OAUTH_REDIRECT_BASE_URL,\n\t\t\t\tnodeEnv: process.env.NODE_ENV\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Return more specific error message in non-production for debugging\n\t\tconst errorMessage = process.env.NODE_ENV === 'production' \n\t\t\t? 'Authentication failed' \n\t\t\t: `Authentication failed: ${err instanceof Error ? err.message : 'Unknown error'}`;\n\t\t\n\t\treturn error(500, errorMessage);\n\t}\n};\n\nfunction generateAccountId(): string {\n\tconst bytes = crypto.getRandomValues(new Uint8Array(20));\n\treturn Array.from(bytes, (byte) => byte.toString(16).padStart(2, '0')).join('');\n} "],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"14849aa8bcebb07977ababfcc25263d2f0a262d5"}}