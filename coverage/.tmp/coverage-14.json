{"/Users/noot/Documents/communique/src/lib/services/ai-suggestions.ts":{"path":"/Users/noot/Documents/communique/src/lib/services/ai-suggestions.ts","statementMap":{"0":{"start":{"line":7,"column":28},"end":{"line":7,"column":89}},"1":{"start":{"line":8,"column":4},"end":{"line":8,"column":27}},"2":{"start":{"line":21,"column":4},"end":{"line":21,"column":76}},"3":{"start":{"line":25,"column":24},"end":{"line":25,"column":26}},"4":{"start":{"line":26,"column":4},"end":{"line":50,"column":5}},"5":{"start":{"line":27,"column":6},"end":{"line":49,"column":8}},"6":{"start":{"line":51,"column":4},"end":{"line":51,"column":23}},"7":{"start":{"line":54,"column":20},"end":{"line":54,"column":22}},"8":{"start":{"line":55,"column":4},"end":{"line":62,"column":5}},"9":{"start":{"line":56,"column":6},"end":{"line":61,"column":8}},"10":{"start":{"line":63,"column":4},"end":{"line":63,"column":19}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":2},"end":{"line":6,"column":3}},"loc":{"start":{"line":6,"column":69},"end":{"line":9,"column":3}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":3}},"loc":{"start":{"line":14,"column":88},"end":{"line":15,"column":3}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":2},"end":{"line":20,"column":3}},"loc":{"start":{"line":20,"column":83},"end":{"line":22,"column":3}},"line":20},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":2},"end":{"line":24,"column":3}},"loc":{"start":{"line":24,"column":73},"end":{"line":52,"column":3}},"line":24},"4":{"name":"(anonymous_4)","decl":{"start":{"line":53,"column":2},"end":{"line":53,"column":3}},"loc":{"start":{"line":53,"column":69},"end":{"line":64,"column":3}},"line":53},"5":{"name":"(anonymous_5)","decl":{"start":{"line":69,"column":2},"end":{"line":69,"column":3}},"loc":{"start":{"line":69,"column":61},"end":{"line":70,"column":3}},"line":69}},"branchMap":{"0":{"loc":{"start":{"line":26,"column":4},"end":{"line":50,"column":5}},"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":50,"column":5}},{"start":{},"end":{}}],"line":26},"1":{"loc":{"start":{"line":55,"column":4},"end":{"line":62,"column":5}},"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":62,"column":5}},{"start":{},"end":{}}],"line":55}},"s":{"0":12,"1":12,"2":8,"3":12,"4":12,"5":8,"6":12,"7":8,"8":8,"9":7,"10":8},"f":{"0":12,"1":2,"2":8,"3":12,"4":8,"5":4},"b":{"0":[8,4],"1":[7,1]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/lib/services/ai-suggestions.ts"],"sourcesContent":["import type { Template } from '$lib/types/template';\n\ninterface AISuggestion {\n    id: string;\n    category: 'personal_story' | 'reasoning' | 'example';\n    text: string;\n    contextTags: string[];\n    effectivenessScore?: number;\n}\n\ninterface UserContext {\n    userId?: string;\n    location?: {\n        city?: string;\n        state?: string;\n        congressionalDistrict?: string;\n    };\n    writingStyle?: {\n        tone: 'formal' | 'casual' | 'passionate';\n        length: 'concise' | 'detailed' | 'moderate';\n    };\n    personalThemes?: string[];\n}\n\nexport class AISuggestionsService {\n    /**\n     * Get contextual suggestions for a template variable\n     * TODO: Implement ML-powered suggestion generation\n     */\n    static async getSuggestions(\n        templateId: string,\n        variableName: string,\n        userContext?: UserContext\n    ): Promise<AISuggestion[]> {\n        // Stub implementation - replace with actual AI service\n        \n        // Mock suggestions based on variable name and context\n        const mockSuggestions = this.getMockSuggestions(variableName, 'general', userContext);\n        \n        // TODO: Replace with actual API call to AI service\n        // const { api } = await import('$lib/utils/apiClient');\n        // const result = await api.post('/api/ai/suggestions', { templateId, variableName, userContext });\n        // return result.success ? result.data : [];\n        \n        return mockSuggestions;\n    }\n\n    /**\n     * Record that a suggestion was used (for learning)\n     * TODO: Implement feedback loop for ML model improvement\n     */\n    static async recordSuggestionUsage(\n        suggestionId: string,\n        templateId: string,\n        variableName: string,\n        finalText: string\n    ): Promise<void> {\n        \n        // TODO: Store in template_analytics table\n        // await db.ai_suggestions.update({\n        //     where: { id: suggestionId },\n        //     data: { usage_count: { increment: 1 } }\n        // });\n    }\n\n    /**\n     * Generate personalized writing prompts\n     * TODO: Implement based on user's writing style analysis\n     */\n    static async getPersonalizedPrompts(\n        variableName: string,\n        templateCategory: string,\n        userContext?: UserContext\n    ): Promise<string[]> {\n        \n        // Mock prompts - replace with AI-generated ones\n        return this.getMockPrompts(variableName, templateCategory, userContext);\n    }\n\n    // Mock implementations (to be replaced)\n    private static getMockSuggestions(variableName: string, templateCategory: string, userContext?: UserContext): AISuggestion[] {\n        const suggestions: AISuggestion[] = [];\n\n        if (variableName === 'Personal Connection') {\n            suggestions.push(\n                {\n                    id: 'connection-1',\n                    category: 'personal_story',\n                    text: 'As a parent of two young children, I see firsthand how this policy affects families like mine...',\n                    contextTags: ['family', 'personal'],\n                    effectivenessScore: 0.85\n                },\n                {\n                    id: 'connection-2', \n                    category: 'reasoning',\n                    text: 'This issue matters deeply to me because it represents the values we want to pass on to the next generation...',\n                    contextTags: ['values', 'future'],\n                    effectivenessScore: 0.82\n                },\n                {\n                    id: 'connection-3',\n                    category: 'example',\n                    text: 'Last year, when my neighbor lost her job due to this very issue, I realized we need systemic change...',\n                    contextTags: ['community', 'real-world'],\n                    effectivenessScore: 0.78\n                }\n            );\n        }\n\n        return suggestions;\n    }\n\n    private static getMockPrompts(variableName: string, templateCategory: string, userContext?: UserContext): string[] {\n        const prompts: string[] = [];\n\n        if (variableName === 'Personal Connection') {\n            prompts.push(\n                'Think about how this issue has personally affected you or someone you care about.',\n                'Consider what values or principles drive your passion for this cause.',\n                'Reflect on a specific moment when you realized this issue was important.',\n                'What would happen to your community if this problem isn\\'t addressed?'\n            );\n        }\n\n        return prompts;\n    }\n\n    /**\n     * Learn from user interactions to improve suggestions\n     * TODO: Implement ML pipeline for continuous improvement\n     */\n    static async updateUserWritingProfile(\n        userId: string,\n        writingData: {\n            text: string;\n            context: string;\n            effectiveness?: number;\n        }\n    ): Promise<void> {\n        \n        // TODO: Analyze writing patterns and update user_writing_style table\n        // - Extract tone, style, themes\n        // - Update personalization preferences\n        // - Improve future suggestions\n    }\n} "],"mappings":"AAwBO,aAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,EAK9B,aAAa,eACT,YACA,cACA,aACuB;AAIvB,UAAM,kBAAkB,KAAK,mBAAmB,cAAc,WAAW,WAAW;AAOpF,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,sBACT,cACA,YACA,cACA,WACa;AAAA,EAOjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,uBACT,cACA,kBACA,aACiB;AAGjB,WAAO,KAAK,eAAe,cAAc,kBAAkB,WAAW;AAAA,EAC1E;AAAA;AAAA,EAGA,OAAe,mBAAmB,cAAsB,kBAA0B,aAA2C;AACzH,UAAM,cAA8B,CAAC;AAErC,QAAI,iBAAiB,uBAAuB;AACxC,kBAAY;AAAA,QACR;AAAA,UACI,IAAI;AAAA,UACJ,UAAU;AAAA,UACV,MAAM;AAAA,UACN,aAAa,CAAC,UAAU,UAAU;AAAA,UAClC,oBAAoB;AAAA,QACxB;AAAA,QACA;AAAA,UACI,IAAI;AAAA,UACJ,UAAU;AAAA,UACV,MAAM;AAAA,UACN,aAAa,CAAC,UAAU,QAAQ;AAAA,UAChC,oBAAoB;AAAA,QACxB;AAAA,QACA;AAAA,UACI,IAAI;AAAA,UACJ,UAAU;AAAA,UACV,MAAM;AAAA,UACN,aAAa,CAAC,aAAa,YAAY;AAAA,UACvC,oBAAoB;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,OAAe,eAAe,cAAsB,kBAA0B,aAAqC;AAC/G,UAAM,UAAoB,CAAC;AAE3B,QAAI,iBAAiB,uBAAuB;AACxC,cAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,yBACT,QACA,aAKa;AAAA,EAMjB;AACJ;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d49191623cbf349cb745e54fb179b853373935ce"}}