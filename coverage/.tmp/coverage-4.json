{"/Users/noot/Documents/communique/src/routes/api/civic/routing/+server.ts":{"path":"/Users/noot/Documents/communique/src/routes/api/civic/routing/+server.ts","statementMap":{"0":{"start":{"line":4,"column":20},"end":{"line":41,"column":1}},"1":{"start":{"line":5,"column":2},"end":{"line":40,"column":3}},"2":{"start":{"line":6,"column":22},"end":{"line":6,"column":42}},"3":{"start":{"line":7,"column":40},"end":{"line":7,"column":49}},"4":{"start":{"line":8,"column":24},"end":{"line":8,"column":60}},"5":{"start":{"line":9,"column":4},"end":{"line":11,"column":5}},"6":{"start":{"line":10,"column":6},"end":{"line":10,"column":58}},"7":{"start":{"line":12,"column":58},"end":{"line":12,"column":69}},"8":{"start":{"line":13,"column":4},"end":{"line":15,"column":5}},"9":{"start":{"line":14,"column":6},"end":{"line":14,"column":51}},"10":{"start":{"line":16,"column":4},"end":{"line":37,"column":5}},"11":{"start":{"line":17,"column":6},"end":{"line":19,"column":7}},"12":{"start":{"line":18,"column":8},"end":{"line":18,"column":74}},"13":{"start":{"line":20,"column":6},"end":{"line":26,"column":9}},"14":{"start":{"line":28,"column":6},"end":{"line":30,"column":7}},"15":{"start":{"line":29,"column":8},"end":{"line":29,"column":76}},"16":{"start":{"line":31,"column":6},"end":{"line":36,"column":9}},"17":{"start":{"line":39,"column":4},"end":{"line":39,"column":65}},"18":{"start":{"line":43,"column":20},"end":{"line":43,"column":41}},"19":{"start":{"line":44,"column":2},"end":{"line":44,"column":54}},"20":{"start":{"line":44,"column":42},"end":{"line":44,"column":54}},"21":{"start":{"line":45,"column":22},"end":{"line":45,"column":44}},"22":{"start":{"line":46,"column":2},"end":{"line":65,"column":3}},"23":{"start":{"line":47,"column":22},"end":{"line":47,"column":46}},"24":{"start":{"line":48,"column":18},"end":{"line":48,"column":51}},"25":{"start":{"line":49,"column":4},"end":{"line":49,"column":28}},"26":{"start":{"line":49,"column":16},"end":{"line":49,"column":28}},"27":{"start":{"line":50,"column":41},"end":{"line":50,"column":46}},"28":{"start":{"line":51,"column":4},"end":{"line":55,"column":6}},"29":{"start":{"line":57,"column":18},"end":{"line":57,"column":53}},"30":{"start":{"line":58,"column":4},"end":{"line":58,"column":28}},"31":{"start":{"line":58,"column":16},"end":{"line":58,"column":28}},"32":{"start":{"line":59,"column":35},"end":{"line":59,"column":40}},"33":{"start":{"line":60,"column":4},"end":{"line":64,"column":6}},"34":{"start":{"line":73,"column":15},"end":{"line":75,"column":4}},"35":{"start":{"line":76,"column":2},"end":{"line":78,"column":3}},"36":{"start":{"line":77,"column":4},"end":{"line":77,"column":40}},"37":{"start":{"line":79,"column":19},"end":{"line":81,"column":4}},"38":{"start":{"line":82,"column":2},"end":{"line":84,"column":3}},"39":{"start":{"line":83,"column":4},"end":{"line":83,"column":44}},"40":{"start":{"line":85,"column":22},"end":{"line":107,"column":3}},"41":{"start":{"line":108,"column":17},"end":{"line":108,"column":77}},"42":{"start":{"line":109,"column":2},"end":{"line":119,"column":5}},"43":{"start":{"line":114,"column":40},"end":{"line":118,"column":5}},"44":{"start":{"line":128,"column":2},"end":{"line":134,"column":5}},"45":{"start":{"line":135,"column":2},"end":{"line":140,"column":5}},"46":{"start":{"line":141,"column":2},"end":{"line":145,"column":5}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":20},"end":{"line":4,"column":21}},"loc":{"start":{"line":4,"column":43},"end":{"line":41,"column":1}},"line":4},"1":{"name":"parseCongressionalRoutingAddress","decl":{"start":{"line":42,"column":9},"end":{"line":42,"column":41}},"loc":{"start":{"line":42,"column":51},"end":{"line":66,"column":1}},"line":42},"2":{"name":"handleAuthenticatedCongressionalRequest","decl":{"start":{"line":67,"column":15},"end":{"line":67,"column":54}},"loc":{"start":{"line":72,"column":3},"end":{"line":120,"column":1}},"line":72},"3":{"name":"(anonymous_3)","decl":{"start":{"line":114,"column":32},"end":{"line":114,"column":33}},"loc":{"start":{"line":114,"column":40},"end":{"line":118,"column":5}},"line":114},"4":{"name":"handleGuestCongressionalRequest","decl":{"start":{"line":121,"column":15},"end":{"line":121,"column":46}},"loc":{"start":{"line":127,"column":3},"end":{"line":146,"column":1}},"line":127},"5":{"name":"storeGuestCongressionalRequest","decl":{"start":{"line":147,"column":15},"end":{"line":147,"column":45}},"loc":{"start":{"line":147,"column":54},"end":{"line":148,"column":1}},"line":147},"6":{"name":"sendOnboardingEmail","decl":{"start":{"line":149,"column":15},"end":{"line":149,"column":34}},"loc":{"start":{"line":149,"column":43},"end":{"line":150,"column":1}},"line":149}},"branchMap":{"0":{"loc":{"start":{"line":9,"column":4},"end":{"line":11,"column":5}},"type":"if","locations":[{"start":{"line":9,"column":4},"end":{"line":11,"column":5}},{"start":{},"end":{}}],"line":9},"1":{"loc":{"start":{"line":13,"column":4},"end":{"line":15,"column":5}},"type":"if","locations":[{"start":{"line":13,"column":4},"end":{"line":15,"column":5}},{"start":{},"end":{}}],"line":13},"2":{"loc":{"start":{"line":16,"column":4},"end":{"line":37,"column":5}},"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":37,"column":5}},{"start":{"line":27,"column":11},"end":{"line":37,"column":5}}],"line":16},"3":{"loc":{"start":{"line":17,"column":6},"end":{"line":19,"column":7}},"type":"if","locations":[{"start":{"line":17,"column":6},"end":{"line":19,"column":7}},{"start":{},"end":{}}],"line":17},"4":{"loc":{"start":{"line":28,"column":6},"end":{"line":30,"column":7}},"type":"if","locations":[{"start":{"line":28,"column":6},"end":{"line":30,"column":7}},{"start":{},"end":{}}],"line":28},"5":{"loc":{"start":{"line":44,"column":2},"end":{"line":44,"column":54}},"type":"if","locations":[{"start":{"line":44,"column":2},"end":{"line":44,"column":54}},{"start":{},"end":{}}],"line":44},"6":{"loc":{"start":{"line":46,"column":2},"end":{"line":65,"column":3}},"type":"if","locations":[{"start":{"line":46,"column":2},"end":{"line":65,"column":3}},{"start":{"line":56,"column":9},"end":{"line":65,"column":3}}],"line":46},"7":{"loc":{"start":{"line":49,"column":4},"end":{"line":49,"column":28}},"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":28}},{"start":{},"end":{}}],"line":49},"8":{"loc":{"start":{"line":58,"column":4},"end":{"line":58,"column":28}},"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":58,"column":28}},{"start":{},"end":{}}],"line":58},"9":{"loc":{"start":{"line":76,"column":2},"end":{"line":78,"column":3}},"type":"if","locations":[{"start":{"line":76,"column":2},"end":{"line":78,"column":3}},{"start":{},"end":{}}],"line":76},"10":{"loc":{"start":{"line":82,"column":2},"end":{"line":84,"column":3}},"type":"if","locations":[{"start":{"line":82,"column":2},"end":{"line":84,"column":3}},{"start":{},"end":{}}],"line":82},"11":{"loc":{"start":{"line":89,"column":15},"end":{"line":89,"column":42}},"type":"binary-expr","locations":[{"start":{"line":89,"column":15},"end":{"line":89,"column":31}},{"start":{"line":89,"column":35},"end":{"line":89,"column":42}}],"line":89},"12":{"loc":{"start":{"line":95,"column":12},"end":{"line":95,"column":27}},"type":"binary-expr","locations":[{"start":{"line":95,"column":12},"end":{"line":95,"column":21}},{"start":{"line":95,"column":25},"end":{"line":95,"column":27}}],"line":95},"13":{"loc":{"start":{"line":98,"column":16},"end":{"line":98,"column":33}},"type":"binary-expr","locations":[{"start":{"line":98,"column":16},"end":{"line":98,"column":27}},{"start":{"line":98,"column":31},"end":{"line":98,"column":33}}],"line":98},"14":{"loc":{"start":{"line":99,"column":14},"end":{"line":99,"column":29}},"type":"binary-expr","locations":[{"start":{"line":99,"column":14},"end":{"line":99,"column":23}},{"start":{"line":99,"column":27},"end":{"line":99,"column":29}}],"line":99},"15":{"loc":{"start":{"line":100,"column":15},"end":{"line":100,"column":31}},"type":"binary-expr","locations":[{"start":{"line":100,"column":15},"end":{"line":100,"column":25}},{"start":{"line":100,"column":29},"end":{"line":100,"column":31}}],"line":100},"16":{"loc":{"start":{"line":101,"column":21},"end":{"line":101,"column":35}},"type":"binary-expr","locations":[{"start":{"line":101,"column":21},"end":{"line":101,"column":29}},{"start":{"line":101,"column":33},"end":{"line":101,"column":35}}],"line":101},"17":{"loc":{"start":{"line":111,"column":13},"end":{"line":111,"column":123}},"type":"cond-expr","locations":[{"start":{"line":111,"column":48},"end":{"line":111,"column":92}},{"start":{"line":111,"column":95},"end":{"line":111,"column":123}}],"line":111}},"s":{"0":1,"1":6,"2":6,"3":6,"4":6,"5":6,"6":1,"7":5,"8":5,"9":0,"10":5,"11":1,"12":0,"13":1,"14":4,"15":0,"16":4,"17":3,"18":6,"19":6,"20":1,"21":5,"22":5,"23":1,"24":1,"25":1,"26":0,"27":1,"28":1,"29":4,"30":4,"31":0,"32":4,"33":4,"34":4,"35":4,"36":1,"37":3,"38":3,"39":1,"40":2,"41":2,"42":2,"43":6,"44":1,"45":1,"46":1},"f":{"0":6,"1":6,"2":4,"3":6,"4":1,"5":1,"6":1},"b":{"0":[1,5],"1":[0,5],"2":[1,4],"3":[0,1],"4":[0,4],"5":[1,5],"6":[1,4],"7":[0,1],"8":[0,4],"9":[1,3],"10":[1,2],"11":[2,0],"12":[2,0],"13":[2,0],"14":[2,0],"15":[2,0],"16":[2,0],"17":[2,0]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/routes/api/civic/routing/+server.ts"],"sourcesContent":["import { json, error } from '@sveltejs/kit';\nimport { db } from '$lib/core/db';\nimport type { RequestHandler } from './$types';\nimport { deliveryPipeline } from '$lib/core/legislative';\n\n/**\n * Congressional Email Routing Handler\n * \n * This endpoint processes emails sent to congressional routing addresses:\n * - congress.{templateId}.{userId}@communique.org (authenticated users)\n * - congress.{templateId}.guest.{sessionToken}@communique.org (anonymous users)\n * \n * Flow:\n * 1. Parse routing email to extract template ID and user info\n * 2. Look up user's address to determine their representatives\n * 3. Route message to appropriate congressional offices via CWC\n * 4. For guest users, trigger account creation flow\n */\nexport const POST: RequestHandler = async ({ request }) => {\n\ttry {\n\t\tconst emailData = await request.json();\n\t\tconst { to, from, subject, body } = emailData;\n\t\t\n\t\t// Parse the routing address\n\t\tconst routingInfo = parseCongressionalRoutingAddress(to);\n\t\tif (!routingInfo) {\n\t\t\treturn error(400, 'Invalid routing address format');\n\t\t}\n\n\t\tconst { templateId, userId, isGuest, sessionToken } = routingInfo;\n\t\t\n\t\tif (!templateId) {\n\t\t\treturn error(400, 'Template ID is required');\n\t\t}\n\n\t\tif (isGuest) {\n\t\t\t// Handle anonymous user flow\n\t\t\tif (!sessionToken) {\n\t\t\t\treturn error(400, 'Session token is required for guest requests');\n\t\t\t}\n\t\t\treturn await handleGuestCongressionalRequest({\n\t\t\t\ttemplateId,\n\t\t\t\tsessionToken,\n\t\t\t\tsenderEmail: from,\n\t\t\t\tsubject,\n\t\t\t\tbody\n\t\t\t});\n\t\t} else {\n\t\t\t// Handle authenticated user flow\n\t\t\tif (!userId) {\n\t\t\t\treturn error(400, 'User ID is required for authenticated requests');\n\t\t\t}\n\t\t\treturn await handleAuthenticatedCongressionalRequest({\n\t\t\t\ttemplateId,\n\t\t\t\tuserId,\n\t\t\t\tsubject,\n\t\t\t\tbody\n\t\t\t});\n\t\t}\n\n\t} catch (err) {\n\t\treturn error(500, 'Failed to process congressional routing');\n\t}\n};\n\ninterface CongressionalRoutingInfo {\n\ttemplateId: string;\n\tuserId?: string;\n\tisGuest: boolean;\n\tsessionToken?: string;\n}\n\nfunction parseCongressionalRoutingAddress(address: string): CongressionalRoutingInfo | null {\n\t// Format: congress+{templateId}-{userId}@communique.org\n\t// or: congress+guest-{templateId}-{sessionToken}@communique.org\n\n\tconst localPart = address.split('@')[0];\n\tif (!localPart.startsWith('congress+')) return null;\n\n\tconst routingPart = localPart.substring(9); // Remove 'congress+'\n\n\tif (routingPart.startsWith('guest-')) {\n\t\tconst guestPart = routingPart.substring(6); // Remove 'guest-'\n\t\tconst match = guestPart.match(/^([^-]+)-(.+)$/);\n\t\tif (!match) return null;\n\n\t\tconst [, templateId, sessionToken] = match;\n\t\treturn {\n\t\t\ttemplateId,\n\t\t\tisGuest: true,\n\t\t\tsessionToken\n\t\t};\n\t} else {\n\t\tconst match = routingPart.match(/^([^-]+)-(.+)$/);\n\t\tif (!match) return null;\n\n\t\tconst [, templateId, userId] = match;\n\t\treturn {\n\t\t\ttemplateId,\n\t\t\tuserId,\n\t\t\tisGuest: false\n\t\t};\n\t}\n}\n\nasync function handleAuthenticatedCongressionalRequest({\n\ttemplateId,\n\tuserId,\n\tsubject,\n\tbody\n}: {\n\ttemplateId: string;\n\tuserId: string;\n\tsubject: string;\n\tbody: string;\n}) {\n\t// 1. Look up user\n\tconst user = await db.user.findUnique({\n\t\twhere: { id: userId }\n\t});\n\n\tif (!user) {\n\t\treturn error(404, 'User not found');\n\t}\n\n\t// 2. Get template\n\tconst template = await db.template.findUnique({\n\t\twhere: { id: templateId }\n\t});\n\n\tif (!template) {\n\t\treturn error(404, 'Template not found');\n\t}\n\n\t// 3. Use new delivery pipeline\n\tconst deliveryJob = {\n\t\tid: `${templateId}-${userId}-${Date.now()}`,\n\t\ttemplate: {\n\t\t\tid: template.id,\n\t\t\tsubject: template.subject || subject,\n\t\t\tmessage_body: template.message_body,\n\t\t\tvariables: {}\n\t\t},\n\t\tuser: {\n\t\t\tid: user.id,\n\t\t\tname: user.name || '',\n\t\t\temail: user.email,\n\t\t\taddress: {\n\t\t\t\tstreet: user.street || '',\n\t\t\t\tcity: user.city || '',\n\t\t\t\tstate: user.state || '',\n\t\t\t\tpostal_code: user.zip || '',\n\t\t\t\tcountry_code: 'US'\n\t\t\t}\n\t\t},\n\t\tcustom_message: body,\n\t\tcreated_at: new Date()\n\t};\n\n\tconst result = await deliveryPipeline.deliverToRepresentatives(deliveryJob);\n\n\treturn json({\n\t\tsuccess: result.successful_deliveries > 0,\n\t\tmessage: result.successful_deliveries > 0 \n\t\t\t? 'Congressional messages queued for delivery' \n\t\t\t: 'Failed to deliver messages',\n\t\tdeliveryCount: result.successful_deliveries,\n\t\ttotalRecipients: result.total_recipients,\n\t\tresults: result.results.map(r => ({\n\t\t\tsuccess: r.success,\n\t\t\terror: r.error,\n\t\t\trepresentative: r.metadata?.representative\n\t\t}))\n\t});\n}\n\nasync function handleGuestCongressionalRequest({\n\ttemplateId,\n\tsessionToken,\n\tsenderEmail,\n\tsubject,\n\tbody\n}: {\n\ttemplateId: string;\n\tsessionToken: string;\n\tsenderEmail: string;\n\tsubject: string;\n\tbody: string;\n}) {\n\t// 1. Store the request temporarily\n\tawait storeGuestCongressionalRequest({\n\t\ttemplateId,\n\t\tsessionToken,\n\t\tsenderEmail,\n\t\tsubject,\n\t\tbody\n\t});\n\n\t// 2. Send onboarding email to user\n\tawait sendOnboardingEmail({\n\t\temail: senderEmail,\n\t\ttemplateId,\n\t\tsessionToken,\n\t\tsubject\n\t});\n\n\treturn json({\n\t\tsuccess: true,\n\t\tmessage: 'Onboarding email sent. Complete your account to deliver your message to Congress.',\n\t\tnextStep: 'check_email'\n\t});\n}\n\n// Helper functions (kept for guest flow compatibility)\nasync function storeGuestCongressionalRequest(params: Record<string, unknown>) {\n\t// TODO: Store pending request in database\n}\n\nasync function sendOnboardingEmail(params: Record<string, unknown>) {\n\t// TODO: Send onboarding email with account creation link\n} "],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ba0047bd881a06d059dba12edec5a962eca42c49"}}