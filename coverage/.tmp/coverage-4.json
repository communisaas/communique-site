{"/Users/noot/Documents/communique/src/routes/api/errors/batch/+server.ts":{"path":"/Users/noot/Documents/communique/src/routes/api/errors/batch/+server.ts","statementMap":{"0":{"start":{"line":2,"column":20},"end":{"line":40,"column":1}},"1":{"start":{"line":3,"column":2},"end":{"line":39,"column":3}},"2":{"start":{"line":4,"column":23},"end":{"line":4,"column":43}},"3":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"4":{"start":{"line":6,"column":6},"end":{"line":6,"column":86}},"5":{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},"6":{"start":{"line":9,"column":6},"end":{"line":9,"column":97}},"7":{"start":{"line":11,"column":28},"end":{"line":24,"column":7}},"8":{"start":{"line":11,"column":51},"end":{"line":24,"column":5}},"9":{"start":{"line":25,"column":4},"end":{"line":28,"column":5}},"10":{"start":{"line":26,"column":6},"end":{"line":26,"column":95}},"11":{"start":{"line":29,"column":4},"end":{"line":32,"column":7}},"12":{"start":{"line":34,"column":4},"end":{"line":34,"column":64}},"13":{"start":{"line":35,"column":4},"end":{"line":38,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":20},"end":{"line":2,"column":21}},"loc":{"start":{"line":2,"column":51},"end":{"line":40,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":39},"end":{"line":11,"column":40}},"loc":{"start":{"line":11,"column":51},"end":{"line":24,"column":5}},"line":11}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{},"end":{}}],"line":5},"1":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":53}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":30}},{"start":{"line":5,"column":34},"end":{"line":5,"column":53}}],"line":5},"2":{"loc":{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},{"start":{},"end":{}}],"line":8},"3":{"loc":{"start":{"line":12,"column":15},"end":{"line":12,"column":47}},"type":"binary-expr","locations":[{"start":{"line":12,"column":15},"end":{"line":12,"column":28}},{"start":{"line":12,"column":32},"end":{"line":12,"column":47}}],"line":12},"4":{"loc":{"start":{"line":14,"column":15},"end":{"line":14,"column":41}},"type":"binary-expr","locations":[{"start":{"line":14,"column":15},"end":{"line":14,"column":28}},{"start":{"line":14,"column":32},"end":{"line":14,"column":41}}],"line":14},"5":{"loc":{"start":{"line":15,"column":17},"end":{"line":15,"column":46}},"type":"binary-expr","locations":[{"start":{"line":15,"column":17},"end":{"line":15,"column":32}},{"start":{"line":15,"column":36},"end":{"line":15,"column":46}}],"line":15},"6":{"loc":{"start":{"line":25,"column":4},"end":{"line":28,"column":5}},"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":28,"column":5}},{"start":{"line":27,"column":11},"end":{"line":28,"column":5}}],"line":25}},"s":{"0":1,"1":15,"2":15,"3":14,"4":3,"5":11,"6":1,"7":10,"8":64,"9":10,"10":0,"11":10,"12":1,"13":1},"f":{"0":15,"1":64},"b":{"0":[3,11],"1":[14,12],"2":[1,10],"3":[64,2],"4":[64,8],"5":[64,61],"6":[0,10]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/routes/api/errors/batch/+server.ts"],"sourcesContent":["import { json } from '@sveltejs/kit';\nimport type { RequestHandler } from './$types';\nimport type { ErrorReport } from '$lib/utils/errorBoundary';\n\nexport const POST: RequestHandler = async ({ request, locals }) => {\n\ttry {\n\t\tconst { errors } = await request.json();\n\t\t\n\t\t// Validate batch\n\t\tif (!Array.isArray(errors) || errors.length === 0) {\n\t\t\treturn json({ success: false, error: 'Invalid errors array' }, { status: 400 });\n\t\t}\n\n\t\t// Limit batch size\n\t\tif (errors.length > 50) {\n\t\t\treturn json({ success: false, error: 'Batch too large (max 50 errors)' }, { status: 400 });\n\t\t}\n\n\t\tconst processedErrors: ErrorReport[] = errors.map((error: any) => ({\n\t\t\tmessage: error.message || 'Unknown error',\n\t\t\tstack: error.stack,\n\t\t\tcontext: error.context || 'unknown',\n\t\t\ttimestamp: error.timestamp || Date.now(),\n\t\t\tuserAgent: error.userAgent,\n\t\t\turl: error.url,\n\t\t\tuserId: locals.user?.id,\n\t\t\tadditionalData: {\n\t\t\t\t...error.additionalData,\n\t\t\t\tsessionId: locals.session?.id,\n\t\t\t\tbatchId: crypto.randomUUID()\n\t\t\t}\n\t\t}));\n\n\t\t// Log errors (in production, send to monitoring service)\n\t\tif (process.env.NODE_ENV === 'development') {\n\t\t\tconsole.error(`Batch error report (${processedErrors.length} errors):`, processedErrors);\n\t\t} else {\n\t\t\t// TODO: Send to monitoring service\n\t\t\t// await sendBatchToMonitoringService(processedErrors);\n\t\t}\n\n\t\t// TODO: Batch insert to database\n\t\t// await db.error_reports.createMany({ data: processedErrors });\n\n\t\treturn json({ \n\t\t\tsuccess: true, \n\t\t\tmessage: `${processedErrors.length} errors reported successfully` \n\t\t});\n\n\t} catch (err) {\n\t\tconsole.error('Failed to process batch error report:', err);\n\t\treturn json({ \n\t\t\tsuccess: false, \n\t\t\terror: 'Failed to process batch error report' \n\t\t}, { status: 500 });\n\t}\n};"],"mappings":"AAAA,SAAS,YAAY;AAId,aAAM,OAAuB,OAAO,EAAE,SAAS,OAAO,MAAM;AAClE,MAAI;AACH,UAAM,EAAE,OAAO,IAAI,MAAM,QAAQ,KAAK;AAGtC,QAAI,CAAC,MAAM,QAAQ,MAAM,KAAK,OAAO,WAAW,GAAG;AAClD,aAAO,KAAK,EAAE,SAAS,OAAO,OAAO,uBAAuB,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC/E;AAGA,QAAI,OAAO,SAAS,IAAI;AACvB,aAAO,KAAK,EAAE,SAAS,OAAO,OAAO,kCAAkC,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC1F;AAEA,UAAM,kBAAiC,OAAO,IAAI,CAAC,WAAgB;AAAA,MAClE,SAAS,MAAM,WAAW;AAAA,MAC1B,OAAO,MAAM;AAAA,MACb,SAAS,MAAM,WAAW;AAAA,MAC1B,WAAW,MAAM,aAAa,KAAK,IAAI;AAAA,MACvC,WAAW,MAAM;AAAA,MACjB,KAAK,MAAM;AAAA,MACX,QAAQ,OAAO,MAAM;AAAA,MACrB,gBAAgB;AAAA,QACf,GAAG,MAAM;AAAA,QACT,WAAW,OAAO,SAAS;AAAA,QAC3B,SAAS,OAAO,WAAW;AAAA,MAC5B;AAAA,IACD,EAAE;AAGF,QAAI,QAAQ,IAAI,aAAa,eAAe;AAC3C,cAAQ,MAAM,uBAAuB,gBAAgB,MAAM,aAAa,eAAe;AAAA,IACxF,OAAO;AAAA,IAGP;AAKA,WAAO,KAAK;AAAA,MACX,SAAS;AAAA,MACT,SAAS,GAAG,gBAAgB,MAAM;AAAA,IACnC,CAAC;AAAA,EAEF,SAAS,KAAK;AACb,YAAQ,MAAM,yCAAyC,GAAG;AAC1D,WAAO,KAAK;AAAA,MACX,SAAS;AAAA,MACT,OAAO;AAAA,IACR,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,EACnB;AACD;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"39d5e17b42db81a7743c13476dd1e93fc1461d4b"}}