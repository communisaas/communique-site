{"/Users/noot/Documents/communique/src/lib/congress/address-lookup.ts":{"path":"/Users/noot/Documents/communique/src/lib/congress/address-lookup.ts","statementMap":{"0":{"start":{"line":5,"column":4},"end":{"line":5,"column":47}},"1":{"start":{"line":6,"column":4},"end":{"line":8,"column":5}},"2":{"start":{"line":7,"column":6},"end":{"line":7,"column":75}},"3":{"start":{"line":15,"column":21},"end":{"line":15,"column":58}},"4":{"start":{"line":16,"column":33},"end":{"line":19,"column":6}},"5":{"start":{"line":20,"column":4},"end":{"line":24,"column":6}},"6":{"start":{"line":31,"column":4},"end":{"line":49,"column":5}},"7":{"start":{"line":32,"column":31},"end":{"line":32,"column":100}},"8":{"start":{"line":33,"column":26},"end":{"line":33,"column":50}},"9":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"10":{"start":{"line":35,"column":8},"end":{"line":35,"column":62}},"11":{"start":{"line":37,"column":22},"end":{"line":37,"column":58}},"12":{"start":{"line":38,"column":21},"end":{"line":40,"column":7}},"13":{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},"14":{"start":{"line":42,"column":8},"end":{"line":42,"column":67}},"15":{"start":{"line":44,"column":19},"end":{"line":44,"column":30}},"16":{"start":{"line":45,"column":23},"end":{"line":45,"column":77}},"17":{"start":{"line":46,"column":6},"end":{"line":46,"column":22}},"18":{"start":{"line":48,"column":6},"end":{"line":48,"column":60}},"19":{"start":{"line":55,"column":4},"end":{"line":81,"column":5}},"20":{"start":{"line":56,"column":24},"end":{"line":56,"column":49}},"21":{"start":{"line":57,"column":6},"end":{"line":69,"column":7}},"22":{"start":{"line":58,"column":22},"end":{"line":58,"column":71}},"23":{"start":{"line":59,"column":8},"end":{"line":68,"column":9}},"24":{"start":{"line":60,"column":45},"end":{"line":60,"column":50}},"25":{"start":{"line":61,"column":10},"end":{"line":67,"column":11}},"26":{"start":{"line":62,"column":12},"end":{"line":66,"column":14}},"27":{"start":{"line":70,"column":6},"end":{"line":74,"column":8}},"28":{"start":{"line":76,"column":6},"end":{"line":80,"column":8}},"29":{"start":{"line":88,"column":4},"end":{"line":102,"column":5}},"30":{"start":{"line":89,"column":36},"end":{"line":89,"column":83}},"31":{"start":{"line":90,"column":21},"end":{"line":90,"column":71}},"32":{"start":{"line":91,"column":6},"end":{"line":94,"column":8}},"33":{"start":{"line":96,"column":6},"end":{"line":96,"column":58}},"34":{"start":{"line":97,"column":6},"end":{"line":101,"column":8}},"35":{"start":{"line":108,"column":4},"end":{"line":136,"column":5}},"36":{"start":{"line":109,"column":22},"end":{"line":109,"column":58}},"37":{"start":{"line":110,"column":21},"end":{"line":112,"column":7}},"38":{"start":{"line":113,"column":6},"end":{"line":115,"column":7}},"39":{"start":{"line":114,"column":8},"end":{"line":114,"column":63}},"40":{"start":{"line":116,"column":19},"end":{"line":116,"column":30}},"41":{"start":{"line":117,"column":22},"end":{"line":117,"column":40}},"42":{"start":{"line":118,"column":23},"end":{"line":121,"column":7}},"43":{"start":{"line":119,"column":20},"end":{"line":119,"column":124}},"44":{"start":{"line":122,"column":6},"end":{"line":124,"column":7}},"45":{"start":{"line":123,"column":8},"end":{"line":123,"column":82}},"46":{"start":{"line":125,"column":6},"end":{"line":125,"column":58}},"47":{"start":{"line":127,"column":6},"end":{"line":135,"column":8}},"48":{"start":{"line":142,"column":4},"end":{"line":197,"column":5}},"49":{"start":{"line":143,"column":22},"end":{"line":143,"column":58}},"50":{"start":{"line":144,"column":21},"end":{"line":146,"column":7}},"51":{"start":{"line":147,"column":6},"end":{"line":149,"column":7}},"52":{"start":{"line":148,"column":8},"end":{"line":148,"column":63}},"53":{"start":{"line":150,"column":19},"end":{"line":150,"column":30}},"54":{"start":{"line":151,"column":22},"end":{"line":151,"column":40}},"55":{"start":{"line":152,"column":23},"end":{"line":152,"column":180}},"56":{"start":{"line":152,"column":50},"end":{"line":152,"column":104}},"57":{"start":{"line":152,"column":135},"end":{"line":152,"column":179}},"58":{"start":{"line":153,"column":6},"end":{"line":174,"column":7}},"59":{"start":{"line":154,"column":8},"end":{"line":173,"column":10}},"60":{"start":{"line":175,"column":6},"end":{"line":175,"column":22}},"61":{"start":{"line":177,"column":6},"end":{"line":196,"column":8}},"62":{"start":{"line":203,"column":4},"end":{"line":211,"column":6}},"63":{"start":{"line":217,"column":19},"end":{"line":217,"column":21}},"64":{"start":{"line":218,"column":4},"end":{"line":237,"column":5}},"65":{"start":{"line":219,"column":22},"end":{"line":219,"column":50}},"66":{"start":{"line":220,"column":6},"end":{"line":234,"column":7}},"67":{"start":{"line":221,"column":24},"end":{"line":221,"column":60}},"68":{"start":{"line":222,"column":23},"end":{"line":224,"column":9}},"69":{"start":{"line":225,"column":8},"end":{"line":228,"column":9}},"70":{"start":{"line":226,"column":10},"end":{"line":226,"column":88}},"71":{"start":{"line":227,"column":10},"end":{"line":227,"column":19}},"72":{"start":{"line":229,"column":21},"end":{"line":229,"column":32}},"73":{"start":{"line":230,"column":23},"end":{"line":230,"column":34}},"74":{"start":{"line":231,"column":8},"end":{"line":233,"column":9}},"75":{"start":{"line":232,"column":10},"end":{"line":232,"column":73}},"76":{"start":{"line":236,"column":6},"end":{"line":236,"column":49}},"77":{"start":{"line":238,"column":4},"end":{"line":241,"column":6}},"78":{"start":{"line":244,"column":29},"end":{"line":244,"column":55}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":2},"end":{"line":4,"column":3}},"loc":{"start":{"line":4,"column":16},"end":{"line":9,"column":3}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":3}},"loc":{"start":{"line":14,"column":37},"end":{"line":25,"column":3}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":2},"end":{"line":30,"column":3}},"loc":{"start":{"line":30,"column":35},"end":{"line":50,"column":3}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":54,"column":2},"end":{"line":54,"column":3}},"loc":{"start":{"line":54,"column":49},"end":{"line":82,"column":3}},"line":54},"4":{"name":"(anonymous_4)","decl":{"start":{"line":87,"column":2},"end":{"line":87,"column":3}},"loc":{"start":{"line":87,"column":34},"end":{"line":103,"column":3}},"line":87},"5":{"name":"(anonymous_5)","decl":{"start":{"line":107,"column":2},"end":{"line":107,"column":3}},"loc":{"start":{"line":107,"column":37},"end":{"line":137,"column":3}},"line":107},"6":{"name":"(anonymous_6)","decl":{"start":{"line":119,"column":8},"end":{"line":119,"column":9}},"loc":{"start":{"line":119,"column":20},"end":{"line":119,"column":124}},"line":119},"7":{"name":"(anonymous_7)","decl":{"start":{"line":141,"column":2},"end":{"line":141,"column":3}},"loc":{"start":{"line":141,"column":27},"end":{"line":198,"column":3}},"line":141},"8":{"name":"(anonymous_8)","decl":{"start":{"line":152,"column":38},"end":{"line":152,"column":39}},"loc":{"start":{"line":152,"column":50},"end":{"line":152,"column":104}},"line":152},"9":{"name":"(anonymous_9)","decl":{"start":{"line":152,"column":122},"end":{"line":152,"column":123}},"loc":{"start":{"line":152,"column":135},"end":{"line":152,"column":179}},"line":152},"10":{"name":"(anonymous_10)","decl":{"start":{"line":202,"column":2},"end":{"line":202,"column":3}},"loc":{"start":{"line":202,"column":40},"end":{"line":212,"column":3}},"line":202},"11":{"name":"(anonymous_11)","decl":{"start":{"line":216,"column":2},"end":{"line":216,"column":3}},"loc":{"start":{"line":216,"column":27},"end":{"line":242,"column":3}},"line":216}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":4},"end":{"line":8,"column":5}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":8,"column":5}},{"start":{},"end":{}}],"line":6},"1":{"loc":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},{"start":{},"end":{}}],"line":34},"2":{"loc":{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},{"start":{},"end":{}}],"line":41},"3":{"loc":{"start":{"line":56,"column":24},"end":{"line":56,"column":49}},"type":"binary-expr","locations":[{"start":{"line":56,"column":24},"end":{"line":56,"column":43}},{"start":{"line":56,"column":47},"end":{"line":56,"column":49}}],"line":56},"4":{"loc":{"start":{"line":59,"column":8},"end":{"line":68,"column":9}},"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":68,"column":9}},{"start":{},"end":{}}],"line":59},"5":{"loc":{"start":{"line":61,"column":10},"end":{"line":67,"column":11}},"type":"if","locations":[{"start":{"line":61,"column":10},"end":{"line":67,"column":11}},{"start":{},"end":{}}],"line":61},"6":{"loc":{"start":{"line":113,"column":6},"end":{"line":115,"column":7}},"type":"if","locations":[{"start":{"line":113,"column":6},"end":{"line":115,"column":7}},{"start":{},"end":{}}],"line":113},"7":{"loc":{"start":{"line":117,"column":22},"end":{"line":117,"column":40}},"type":"binary-expr","locations":[{"start":{"line":117,"column":22},"end":{"line":117,"column":34}},{"start":{"line":117,"column":38},"end":{"line":117,"column":40}}],"line":117},"8":{"loc":{"start":{"line":119,"column":20},"end":{"line":119,"column":124}},"type":"binary-expr","locations":[{"start":{"line":119,"column":20},"end":{"line":119,"column":73}},{"start":{"line":119,"column":77},"end":{"line":119,"column":124}}],"line":119},"9":{"loc":{"start":{"line":122,"column":6},"end":{"line":124,"column":7}},"type":"if","locations":[{"start":{"line":122,"column":6},"end":{"line":124,"column":7}},{"start":{},"end":{}}],"line":122},"10":{"loc":{"start":{"line":147,"column":6},"end":{"line":149,"column":7}},"type":"if","locations":[{"start":{"line":147,"column":6},"end":{"line":149,"column":7}},{"start":{},"end":{}}],"line":147},"11":{"loc":{"start":{"line":151,"column":22},"end":{"line":151,"column":40}},"type":"binary-expr","locations":[{"start":{"line":151,"column":22},"end":{"line":151,"column":34}},{"start":{"line":151,"column":38},"end":{"line":151,"column":40}}],"line":151},"12":{"loc":{"start":{"line":153,"column":6},"end":{"line":174,"column":7}},"type":"if","locations":[{"start":{"line":153,"column":6},"end":{"line":174,"column":7}},{"start":{},"end":{}}],"line":153},"13":{"loc":{"start":{"line":204,"column":18},"end":{"line":204,"column":41}},"type":"binary-expr","locations":[{"start":{"line":204,"column":18},"end":{"line":204,"column":35}},{"start":{"line":204,"column":39},"end":{"line":204,"column":41}}],"line":204},"14":{"loc":{"start":{"line":205,"column":12},"end":{"line":205,"column":29}},"type":"binary-expr","locations":[{"start":{"line":205,"column":12},"end":{"line":205,"column":23}},{"start":{"line":205,"column":27},"end":{"line":205,"column":29}}],"line":205},"15":{"loc":{"start":{"line":206,"column":13},"end":{"line":206,"column":42}},"type":"binary-expr","locations":[{"start":{"line":206,"column":13},"end":{"line":206,"column":29}},{"start":{"line":206,"column":33},"end":{"line":206,"column":42}}],"line":206},"16":{"loc":{"start":{"line":207,"column":13},"end":{"line":207,"column":31}},"type":"binary-expr","locations":[{"start":{"line":207,"column":13},"end":{"line":207,"column":25}},{"start":{"line":207,"column":29},"end":{"line":207,"column":31}}],"line":207},"17":{"loc":{"start":{"line":208,"column":16},"end":{"line":208,"column":69}},"type":"cond-expr","locations":[{"start":{"line":208,"column":39},"end":{"line":208,"column":43}},{"start":{"line":208,"column":46},"end":{"line":208,"column":69}}],"line":208},"18":{"loc":{"start":{"line":208,"column":46},"end":{"line":208,"column":69}},"type":"binary-expr","locations":[{"start":{"line":208,"column":46},"end":{"line":208,"column":61}},{"start":{"line":208,"column":65},"end":{"line":208,"column":69}}],"line":208},"19":{"loc":{"start":{"line":210,"column":18},"end":{"line":210,"column":41}},"type":"binary-expr","locations":[{"start":{"line":210,"column":18},"end":{"line":210,"column":35}},{"start":{"line":210,"column":39},"end":{"line":210,"column":41}}],"line":210},"20":{"loc":{"start":{"line":225,"column":8},"end":{"line":228,"column":9}},"type":"if","locations":[{"start":{"line":225,"column":8},"end":{"line":228,"column":9}},{"start":{},"end":{}}],"line":225},"21":{"loc":{"start":{"line":231,"column":8},"end":{"line":233,"column":9}},"type":"if","locations":[{"start":{"line":231,"column":8},"end":{"line":233,"column":9}},{"start":{},"end":{}}],"line":231}},"s":{"0":7,"1":7,"2":0,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":2,"10":2,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":2,"30":2,"31":2,"32":2,"33":0,"34":0,"35":2,"36":2,"37":2,"38":1,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":2,"48":2,"49":2,"50":2,"51":2,"52":2,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":2,"62":0,"63":2,"64":2,"65":2,"66":2,"67":2,"68":2,"69":2,"70":0,"71":0,"72":2,"73":2,"74":2,"75":1,"76":0,"77":2,"78":1},"f":{"0":7,"1":2,"2":2,"3":0,"4":2,"5":2,"6":0,"7":2,"8":0,"9":0,"10":0,"11":2},"b":{"0":[0,7],"1":[2,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[2,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,2],"21":[1,1]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/lib/congress/address-lookup.ts"],"sourcesContent":["import { env } from '$env/dynamic/private';\n\ninterface Address {\n    street: string;\n    city: string;\n    state: string;\n    zip: string;\n}\n\ninterface CongressionalDistrict {\n    state: string;\n    district: string; // \"01\", \"02\", etc. Senate uses \"00\"\n}\n\ninterface Representative {\n    bioguideId: string;\n    name: string;\n    party: string;\n    state: string;\n    district: string;\n    chamber: 'house' | 'senate';\n    phone?: string;\n    email?: string;\n    officeCode: string; // For CWC submissions\n}\n\ninterface UserReps {\n    house: Representative;\n    senate: Representative[]; // Always 2 senators per state\n    district: CongressionalDistrict;\n}\n\nexport class AddressLookupService {\n    private congressApiKey: string;\n    \n    constructor() {\n        this.congressApiKey = env.CONGRESS_API_KEY;\n        if (!this.congressApiKey) {\n            throw new Error('CONGRESS_API_KEY environment variable is required');\n        }\n    }\n\n    /**\n     * Main function: Address → User's Representatives\n     * This is called during user onboarding\n     */\n    async lookupRepsByAddress(address: Address): Promise<UserReps> {\n        // Step 1: Address → Congressional District\n        const district = await this.addressToDistrict(address);\n        \n        // Step 2: District → Representatives\n        const [houseRep, senators] = await Promise.all([\n            this.getHouseRep(district.state, district.district),\n            this.getSenators(district.state)\n        ]);\n\n        return {\n            house: houseRep,\n            senate: senators,\n            district\n        };\n    }\n\n    /**\n     * Convert address to congressional district\n     * Using Google Civic Information API (more reliable than Congress.gov for address lookup)\n     */\n    private async addressToDistrict(address: Address): Promise<CongressionalDistrict> {\n        try {\n            // Format address for Google Civic API\n            const formattedAddress = `${address.street}, ${address.city}, ${address.state} ${address.zip}`;\n            \n            // Use Google Civic Information API\n            const civicApiKey = env.GOOGLE_CIVIC_API_KEY;\n            if (!civicApiKey) {\n                // Fallback: Extract district from ZIP code (less accurate)\n                return this.zipToDistrict(address.zip, address.state);\n            }\n\n            const { api } = await import('$lib/utils/apiClient');\n            const result = await api.get(\n                `https://www.googleapis.com/civicinfo/v2/representatives?key=${civicApiKey}&address=${encodeURIComponent(formattedAddress)}`\n            );\n            \n            if (!result.success) {\n                throw new Error(`Google Civic API error: ${result.error}`);\n            }\n            \n            const data = result.data;\n            \n            // Extract congressional district from response\n            const district = this.extractDistrictFromCivicData(data, address.state);\n            return district;\n            \n        } catch (error) {\n            // Fallback to ZIP-based lookup\n            return this.zipToDistrict(address.zip, address.state);\n        }\n    }\n\n    /**\n     * Extract congressional district from Google Civic API response\n     */\n    private extractDistrictFromCivicData(civicData: Record<string, unknown>, state: string): CongressionalDistrict {\n        try {\n            // Look for congressional district in the divisions\n            const divisions = civicData.divisions || {};\n            \n            for (const [divisionId, division] of Object.entries(divisions)) {\n                // Congressional district format: \"ocd-division/country:us/state:ca/cd:12\"\n                const match = divisionId.match(/\\/state:([a-z]{2})\\/cd:(\\d+)$/);\n                if (match) {\n                    const [, stateCode, districtNum] = match;\n                    if (stateCode.toUpperCase() === state.toUpperCase()) {\n                        return {\n                            state: state.toUpperCase(),\n                            district: districtNum.padStart(2, '0') // \"01\", \"02\", etc.\n                        };\n                    }\n                }\n            }\n            \n            // If no congressional district found, might be at-large district\n            return {\n                state: state.toUpperCase(),\n                district: '00' // At-large or fallback\n            };\n            \n        } catch (error) {\n            return {\n                state: state.toUpperCase(),\n                district: '01' // Default fallback\n            };\n        }\n    }\n\n    /**\n     * Fallback: ZIP code to district lookup using real data\n     * Uses OpenSourceActivismTech ZIP-district mapping\n     */\n    private async zipToDistrict(zip: string, state: string): Promise<CongressionalDistrict> {\n        try {\n            const { zipDistrictLookup } = await import('$lib/services/zipDistrictLookup');\n            const result = await zipDistrictLookup.lookupDistrict(zip, state);\n            \n            return {\n                state: result.state,\n                district: result.district\n            };\n            \n        } catch (error) {\n            console.error('ZIP district lookup failed:', error);\n            return {\n                state: state.toUpperCase(),\n                district: '01' // Final fallback\n            };\n        }\n    }\n\n    /**\n     * Get House representative for a specific district\n     */\n    private async getHouseRep(state: string, district: string): Promise<Representative> {\n        try {\n            const { api } = await import('$lib/utils/apiClient');\n            const result = await api.get(\n                `https://api.data.gov/congress/v3/member?api_key=${this.congressApiKey}&format=json&currentMember=true&state=${state}&limit=50`\n            );\n            \n            if (!result.success) {\n                throw new Error(`Congress API error: ${result.error}`);\n            }\n            \n            const data = result.data;\n            const members = data.members || [];\n            \n            // Find the House rep for this district\n            const houseRep = members.find((member: any) => \n                member.terms?.[0]?.chamber?.toLowerCase() === 'house' && \n                member.district === district.replace(/^0+/, '') // Remove leading zeros\n            );\n            \n            if (!houseRep) {\n                throw new Error(`No House representative found for ${state}-${district}`);\n            }\n            \n            return this.formatRepresentative(houseRep, 'house');\n            \n        } catch (error) {\n            // Return placeholder data\n            return {\n                bioguideId: `${state}${district}H`,\n                name: `Representative for ${state}-${district}`,\n                party: 'Unknown',\n                state,\n                district,\n                chamber: 'house',\n                officeCode: `${state}${district}H`\n            };\n        }\n    }\n\n    /**\n     * Get both senators for a state\n     */\n    private async getSenators(state: string): Promise<Representative[]> {\n        try {\n            const { api } = await import('$lib/utils/apiClient');\n            const result = await api.get(\n                `https://api.data.gov/congress/v3/member?api_key=${this.congressApiKey}&format=json&currentMember=true&state=${state}&limit=50`\n            );\n            \n            if (!result.success) {\n                throw new Error(`Congress API error: ${result.error}`);\n            }\n            \n            const data = result.data;\n            const members = data.members || [];\n            \n            // Find both senators for this state\n            const senators = members\n                .filter((member: any) => member.terms?.[0]?.chamber?.toLowerCase() === 'senate')\n                .slice(0, 2) // Should be exactly 2 senators\n                .map((senator: any) => this.formatRepresentative(senator, 'senate'));\n            \n            if (senators.length === 0) {\n                // Return placeholder senators\n                return [\n                    {\n                        bioguideId: `${state}S1`,\n                        name: `Senior Senator for ${state}`,\n                        party: 'Unknown',\n                        state,\n                        district: '00',\n                        chamber: 'senate',\n                        officeCode: `${state}S1`\n                    },\n                    {\n                        bioguideId: `${state}S2`,\n                        name: `Junior Senator for ${state}`,\n                        party: 'Unknown',\n                        state,\n                        district: '00',\n                        chamber: 'senate',\n                        officeCode: `${state}S2`\n                    }\n                ];\n            }\n            \n            return senators;\n            \n        } catch (error) {\n            // Return placeholder senators\n            return [\n                {\n                    bioguideId: `${state}S1`,\n                    name: `Senior Senator for ${state}`,\n                    party: 'Unknown',\n                    state,\n                    district: '00',\n                    chamber: 'senate',\n                    officeCode: `${state}S1`\n                },\n                {\n                    bioguideId: `${state}S2`,\n                    name: `Junior Senator for ${state}`,\n                    party: 'Unknown',\n                    state,\n                    district: '00',\n                    chamber: 'senate',\n                    officeCode: `${state}S2`\n                }\n            ];\n        }\n    }\n\n    /**\n     * Format representative data from Congress.gov API\n     */\n    private formatRepresentative(member: any, chamber: 'house' | 'senate'): Representative {\n        return {\n            bioguideId: member.bioguideId || '',\n            name: member.name || '',\n            party: member.partyName || 'Unknown',\n            state: member.state || '',\n            district: chamber === 'senate' ? '00' : (member.district || '01'),\n            chamber,\n            officeCode: member.bioguideId || ''\n        };\n    }\n\n    /**\n     * Validate that representatives are current and active\n     */\n    async validateReps(reps: UserReps): Promise<{ valid: boolean; errors: string[] }> {\n        const errors: string[] = [];\n        \n        try {\n            // Check if all reps are still current\n            const allReps = [reps.house, ...reps.senate];\n            \n            for (const rep of allReps) {\n                const { api } = await import('$lib/utils/apiClient');\n                const result = await api.get(\n                    `https://api.data.gov/congress/v3/member/${rep.bioguideId}?api_key=${this.congressApiKey}&format=json`\n                );\n                \n                if (!result.success) {\n                    errors.push(`Cannot validate representative ${rep.name} (${rep.bioguideId})`);\n                    continue;\n                }\n                \n                const data = result.data;\n                const member = data.member;\n                \n                if (!member?.currentMember) {\n                    errors.push(`Representative ${rep.name} is no longer serving`);\n                }\n            }\n            \n        } catch (error) {\n            errors.push(`Validation failed: ${error}`);\n        }\n        \n        return {\n            valid: errors.length === 0,\n            errors\n        };\n    }\n}\n\n// Export singleton instance\nexport const addressLookup = new AddressLookupService(); "],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5f34775b7cfa7369d74238917edbb454ed36d1eb"},"/Users/noot/Documents/communique/src/lib/utils/apiClient.ts":{"path":"/Users/noot/Documents/communique/src/lib/utils/apiClient.ts","statementMap":{"0":{"start":{"line":4,"column":4},"end":{"line":4,"column":19}},"1":{"start":{"line":5,"column":4},"end":{"line":5,"column":25}},"2":{"start":{"line":6,"column":4},"end":{"line":6,"column":29}},"3":{"start":{"line":7,"column":4},"end":{"line":7,"column":27}},"4":{"start":{"line":11,"column":12},"end":{"line":11,"column":14}},"5":{"start":{"line":12,"column":19},"end":{"line":12,"column":22}},"6":{"start":{"line":14,"column":19},"end":{"line":14,"column":20}},"7":{"start":{"line":15,"column":22},"end":{"line":15,"column":25}},"8":{"start":{"line":29,"column":8},"end":{"line":29,"column":15}},"9":{"start":{"line":30,"column":4},"end":{"line":36,"column":5}},"10":{"start":{"line":31,"column":6},"end":{"line":31,"column":79}},"11":{"start":{"line":32,"column":6},"end":{"line":35,"column":8}},"12":{"start":{"line":37,"column":20},"end":{"line":37,"column":74}},"13":{"start":{"line":38,"column":23},"end":{"line":38,"column":44}},"14":{"start":{"line":39,"column":22},"end":{"line":39,"column":67}},"15":{"start":{"line":39,"column":39},"end":{"line":39,"column":57}},"16":{"start":{"line":40,"column":25},"end":{"line":47,"column":5}},"17":{"start":{"line":48,"column":4},"end":{"line":50,"column":5}},"18":{"start":{"line":49,"column":6},"end":{"line":49,"column":81}},"19":{"start":{"line":51,"column":20},"end":{"line":51,"column":24}},"20":{"start":{"line":52,"column":4},"end":{"line":106,"column":5}},"21":{"start":{"line":52,"column":23},"end":{"line":52,"column":24}},"22":{"start":{"line":53,"column":6},"end":{"line":105,"column":7}},"23":{"start":{"line":54,"column":25},"end":{"line":54,"column":59}},"24":{"start":{"line":55,"column":8},"end":{"line":55,"column":32}},"25":{"start":{"line":56,"column":28},"end":{"line":56,"column":64}},"26":{"start":{"line":57,"column":23},"end":{"line":57,"column":64}},"27":{"start":{"line":58,"column":8},"end":{"line":86,"column":9}},"28":{"start":{"line":59,"column":30},"end":{"line":59,"column":55}},"29":{"start":{"line":60,"column":10},"end":{"line":69,"column":11}},"30":{"start":{"line":61,"column":12},"end":{"line":66,"column":13}},"31":{"start":{"line":62,"column":32},"end":{"line":62,"column":53}},"32":{"start":{"line":63,"column":14},"end":{"line":63,"column":84}},"33":{"start":{"line":65,"column":14},"end":{"line":65,"column":69}},"34":{"start":{"line":68,"column":12},"end":{"line":68,"column":67}},"35":{"start":{"line":70,"column":27},"end":{"line":70,"column":81}},"36":{"start":{"line":71,"column":10},"end":{"line":84,"column":11}},"37":{"start":{"line":72,"column":12},"end":{"line":78,"column":13}},"38":{"start":{"line":73,"column":14},"end":{"line":77,"column":17}},"39":{"start":{"line":79,"column":12},"end":{"line":83,"column":14}},"40":{"start":{"line":85,"column":10},"end":{"line":85,"column":25}},"41":{"start":{"line":88,"column":8},"end":{"line":92,"column":9}},"42":{"start":{"line":89,"column":10},"end":{"line":89,"column":39}},"43":{"start":{"line":91,"column":10},"end":{"line":91,"column":39}},"44":{"start":{"line":93,"column":8},"end":{"line":97,"column":10}},"45":{"start":{"line":99,"column":8},"end":{"line":99,"column":32}},"46":{"start":{"line":100,"column":8},"end":{"line":100,"column":26}},"47":{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},"48":{"start":{"line":102,"column":10},"end":{"line":102,"column":16}},"49":{"start":{"line":104,"column":8},"end":{"line":104,"column":72}},"50":{"start":{"line":104,"column":39},"end":{"line":104,"column":70}},"51":{"start":{"line":107,"column":25},"end":{"line":107,"column":71}},"52":{"start":{"line":108,"column":4},"end":{"line":114,"column":5}},"53":{"start":{"line":109,"column":6},"end":{"line":113,"column":9}},"54":{"start":{"line":115,"column":4},"end":{"line":119,"column":6}},"55":{"start":{"line":125,"column":4},"end":{"line":125,"column":60}},"56":{"start":{"line":131,"column":4},"end":{"line":131,"column":67}},"57":{"start":{"line":137,"column":4},"end":{"line":137,"column":66}},"58":{"start":{"line":143,"column":4},"end":{"line":143,"column":63}},"59":{"start":{"line":149,"column":4},"end":{"line":149,"column":68}},"60":{"start":{"line":155,"column":4},"end":{"line":155,"column":62}},"61":{"start":{"line":161,"column":4},"end":{"line":161,"column":29}},"62":{"start":{"line":167,"column":4},"end":{"line":167,"column":34}},"63":{"start":{"line":168,"column":4},"end":{"line":168,"column":35}},"64":{"start":{"line":171,"column":25},"end":{"line":171,"column":40}},"65":{"start":{"line":172,"column":19},"end":{"line":178,"column":1}},"66":{"start":{"line":179,"column":28},"end":{"line":183,"column":1}},"67":{"start":{"line":181,"column":4},"end":{"line":181,"column":92}},"68":{"start":{"line":184,"column":27},"end":{"line":188,"column":1}},"69":{"start":{"line":186,"column":4},"end":{"line":186,"column":56}},"70":{"start":{"line":189,"column":28},"end":{"line":202,"column":1}},"71":{"start":{"line":191,"column":4},"end":{"line":191,"column":37}},"72":{"start":{"line":194,"column":4},"end":{"line":194,"column":48}},"73":{"start":{"line":197,"column":4},"end":{"line":197,"column":53}},"74":{"start":{"line":200,"column":4},"end":{"line":200,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":2},"end":{"line":3,"column":3}},"loc":{"start":{"line":3,"column":41},"end":{"line":8,"column":3}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":2},"end":{"line":20,"column":3}},"loc":{"start":{"line":20,"column":35},"end":{"line":120,"column":3}},"line":20},"2":{"name":"(anonymous_2)","decl":{"start":{"line":39,"column":33},"end":{"line":39,"column":34}},"loc":{"start":{"line":39,"column":39},"end":{"line":39,"column":57}},"line":39},"3":{"name":"(anonymous_3)","decl":{"start":{"line":104,"column":26},"end":{"line":104,"column":27}},"loc":{"start":{"line":104,"column":39},"end":{"line":104,"column":70}},"line":104},"4":{"name":"(anonymous_4)","decl":{"start":{"line":124,"column":2},"end":{"line":124,"column":3}},"loc":{"start":{"line":124,"column":31},"end":{"line":126,"column":3}},"line":124},"5":{"name":"(anonymous_5)","decl":{"start":{"line":130,"column":2},"end":{"line":130,"column":3}},"loc":{"start":{"line":130,"column":38},"end":{"line":132,"column":3}},"line":130},"6":{"name":"(anonymous_6)","decl":{"start":{"line":136,"column":2},"end":{"line":136,"column":3}},"loc":{"start":{"line":136,"column":37},"end":{"line":138,"column":3}},"line":136},"7":{"name":"(anonymous_7)","decl":{"start":{"line":142,"column":2},"end":{"line":142,"column":3}},"loc":{"start":{"line":142,"column":34},"end":{"line":144,"column":3}},"line":142},"8":{"name":"(anonymous_8)","decl":{"start":{"line":148,"column":2},"end":{"line":148,"column":3}},"loc":{"start":{"line":148,"column":39},"end":{"line":150,"column":3}},"line":148},"9":{"name":"(anonymous_9)","decl":{"start":{"line":154,"column":2},"end":{"line":154,"column":3}},"loc":{"start":{"line":154,"column":18},"end":{"line":156,"column":3}},"line":154},"10":{"name":"(anonymous_10)","decl":{"start":{"line":160,"column":2},"end":{"line":160,"column":3}},"loc":{"start":{"line":160,"column":17},"end":{"line":162,"column":3}},"line":160},"11":{"name":"(anonymous_11)","decl":{"start":{"line":166,"column":2},"end":{"line":166,"column":3}},"loc":{"start":{"line":166,"column":33},"end":{"line":169,"column":3}},"line":166},"12":{"name":"(anonymous_12)","decl":{"start":{"line":180,"column":2},"end":{"line":180,"column":3}},"loc":{"start":{"line":180,"column":27},"end":{"line":182,"column":3}},"line":180},"13":{"name":"(anonymous_13)","decl":{"start":{"line":185,"column":2},"end":{"line":185,"column":3}},"loc":{"start":{"line":185,"column":24},"end":{"line":187,"column":3}},"line":185},"14":{"name":"(anonymous_14)","decl":{"start":{"line":190,"column":2},"end":{"line":190,"column":3}},"loc":{"start":{"line":190,"column":15},"end":{"line":192,"column":3}},"line":190},"15":{"name":"(anonymous_15)","decl":{"start":{"line":193,"column":2},"end":{"line":193,"column":3}},"loc":{"start":{"line":193,"column":25},"end":{"line":195,"column":3}},"line":193},"16":{"name":"(anonymous_16)","decl":{"start":{"line":196,"column":2},"end":{"line":196,"column":3}},"loc":{"start":{"line":196,"column":29},"end":{"line":198,"column":3}},"line":196},"17":{"name":"(anonymous_17)","decl":{"start":{"line":199,"column":2},"end":{"line":199,"column":3}},"loc":{"start":{"line":199,"column":19},"end":{"line":201,"column":3}},"line":199}},"branchMap":{"0":{"loc":{"start":{"line":20,"column":21},"end":{"line":20,"column":33}},"type":"default-arg","locations":[{"start":{"line":20,"column":31},"end":{"line":20,"column":33}}],"line":20},"1":{"loc":{"start":{"line":22,"column":6},"end":{"line":22,"column":20}},"type":"default-arg","locations":[{"start":{"line":22,"column":15},"end":{"line":22,"column":20}}],"line":22},"2":{"loc":{"start":{"line":23,"column":6},"end":{"line":23,"column":18}},"type":"default-arg","locations":[{"start":{"line":23,"column":16},"end":{"line":23,"column":18}}],"line":23},"3":{"loc":{"start":{"line":25,"column":6},"end":{"line":25,"column":35}},"type":"default-arg","locations":[{"start":{"line":25,"column":16},"end":{"line":25,"column":35}}],"line":25},"4":{"loc":{"start":{"line":26,"column":6},"end":{"line":26,"column":35}},"type":"default-arg","locations":[{"start":{"line":26,"column":16},"end":{"line":26,"column":35}}],"line":26},"5":{"loc":{"start":{"line":27,"column":6},"end":{"line":27,"column":41}},"type":"default-arg","locations":[{"start":{"line":27,"column":19},"end":{"line":27,"column":41}}],"line":27},"6":{"loc":{"start":{"line":28,"column":6},"end":{"line":28,"column":30}},"type":"default-arg","locations":[{"start":{"line":28,"column":25},"end":{"line":28,"column":30}}],"line":28},"7":{"loc":{"start":{"line":30,"column":4},"end":{"line":36,"column":5}},"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":36,"column":5}},{"start":{},"end":{}}],"line":30},"8":{"loc":{"start":{"line":30,"column":8},"end":{"line":30,"column":43}},"type":"binary-expr","locations":[{"start":{"line":30,"column":8},"end":{"line":30,"column":16}},{"start":{"line":30,"column":20},"end":{"line":30,"column":43}}],"line":30},"9":{"loc":{"start":{"line":37,"column":20},"end":{"line":37,"column":74}},"type":"cond-expr","locations":[{"start":{"line":37,"column":45},"end":{"line":37,"column":48}},{"start":{"line":37,"column":51},"end":{"line":37,"column":74}}],"line":37},"10":{"loc":{"start":{"line":48,"column":4},"end":{"line":50,"column":5}},"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":50,"column":5}},{"start":{},"end":{}}],"line":48},"11":{"loc":{"start":{"line":48,"column":8},"end":{"line":48,"column":32}},"type":"binary-expr","locations":[{"start":{"line":48,"column":8},"end":{"line":48,"column":12}},{"start":{"line":48,"column":16},"end":{"line":48,"column":32}}],"line":48},"12":{"loc":{"start":{"line":49,"column":26},"end":{"line":49,"column":80}},"type":"cond-expr","locations":[{"start":{"line":49,"column":53},"end":{"line":49,"column":57}},{"start":{"line":49,"column":60},"end":{"line":49,"column":80}}],"line":49},"13":{"loc":{"start":{"line":58,"column":8},"end":{"line":86,"column":9}},"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":86,"column":9}},{"start":{},"end":{}}],"line":58},"14":{"loc":{"start":{"line":60,"column":10},"end":{"line":69,"column":11}},"type":"if","locations":[{"start":{"line":60,"column":10},"end":{"line":69,"column":11}},{"start":{"line":67,"column":17},"end":{"line":69,"column":11}}],"line":60},"15":{"loc":{"start":{"line":63,"column":30},"end":{"line":63,"column":83}},"type":"binary-expr","locations":[{"start":{"line":63,"column":30},"end":{"line":63,"column":47}},{"start":{"line":63,"column":51},"end":{"line":63,"column":66}},{"start":{"line":63,"column":70},"end":{"line":63,"column":83}}],"line":63},"16":{"loc":{"start":{"line":65,"column":30},"end":{"line":65,"column":68}},"type":"binary-expr","locations":[{"start":{"line":65,"column":30},"end":{"line":65,"column":51}},{"start":{"line":65,"column":55},"end":{"line":65,"column":68}}],"line":65},"17":{"loc":{"start":{"line":68,"column":28},"end":{"line":68,"column":66}},"type":"binary-expr","locations":[{"start":{"line":68,"column":28},"end":{"line":68,"column":49}},{"start":{"line":68,"column":53},"end":{"line":68,"column":66}}],"line":68},"18":{"loc":{"start":{"line":71,"column":10},"end":{"line":84,"column":11}},"type":"if","locations":[{"start":{"line":71,"column":10},"end":{"line":84,"column":11}},{"start":{},"end":{}}],"line":71},"19":{"loc":{"start":{"line":71,"column":14},"end":{"line":71,"column":61}},"type":"binary-expr","locations":[{"start":{"line":71,"column":14},"end":{"line":71,"column":36}},{"start":{"line":71,"column":40},"end":{"line":71,"column":61}}],"line":71},"20":{"loc":{"start":{"line":72,"column":12},"end":{"line":78,"column":13}},"type":"if","locations":[{"start":{"line":72,"column":12},"end":{"line":78,"column":13}},{"start":{},"end":{}}],"line":72},"21":{"loc":{"start":{"line":88,"column":8},"end":{"line":92,"column":9}},"type":"if","locations":[{"start":{"line":88,"column":8},"end":{"line":92,"column":9}},{"start":{"line":90,"column":15},"end":{"line":92,"column":9}}],"line":88},"22":{"loc":{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},"type":"if","locations":[{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},{"start":{},"end":{}}],"line":101},"23":{"loc":{"start":{"line":101,"column":12},"end":{"line":101,"column":64}},"type":"binary-expr","locations":[{"start":{"line":101,"column":12},"end":{"line":101,"column":31}},{"start":{"line":101,"column":35},"end":{"line":101,"column":64}}],"line":101},"24":{"loc":{"start":{"line":107,"column":25},"end":{"line":107,"column":71}},"type":"binary-expr","locations":[{"start":{"line":107,"column":25},"end":{"line":107,"column":43}},{"start":{"line":107,"column":47},"end":{"line":107,"column":71}}],"line":107},"25":{"loc":{"start":{"line":108,"column":4},"end":{"line":114,"column":5}},"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":114,"column":5}},{"start":{},"end":{}}],"line":108},"26":{"loc":{"start":{"line":118,"column":14},"end":{"line":118,"column":71}},"type":"cond-expr","locations":[{"start":{"line":118,"column":46},"end":{"line":118,"column":62}},{"start":{"line":118,"column":65},"end":{"line":118,"column":71}}],"line":118},"27":{"loc":{"start":{"line":124,"column":17},"end":{"line":124,"column":29}},"type":"default-arg","locations":[{"start":{"line":124,"column":27},"end":{"line":124,"column":29}}],"line":124},"28":{"loc":{"start":{"line":130,"column":24},"end":{"line":130,"column":36}},"type":"default-arg","locations":[{"start":{"line":130,"column":34},"end":{"line":130,"column":36}}],"line":130},"29":{"loc":{"start":{"line":136,"column":23},"end":{"line":136,"column":35}},"type":"default-arg","locations":[{"start":{"line":136,"column":33},"end":{"line":136,"column":35}}],"line":136},"30":{"loc":{"start":{"line":142,"column":20},"end":{"line":142,"column":32}},"type":"default-arg","locations":[{"start":{"line":142,"column":30},"end":{"line":142,"column":32}}],"line":142},"31":{"loc":{"start":{"line":148,"column":25},"end":{"line":148,"column":37}},"type":"default-arg","locations":[{"start":{"line":148,"column":35},"end":{"line":148,"column":37}}],"line":148},"32":{"loc":{"start":{"line":155,"column":19},"end":{"line":155,"column":61}},"type":"cond-expr","locations":[{"start":{"line":155,"column":39},"end":{"line":155,"column":55}},{"start":{"line":155,"column":58},"end":{"line":155,"column":61}}],"line":155}},"s":{"0":0,"1":0,"2":0,"3":0,"4":1,"5":1,"6":1,"7":1,"8":2,"9":2,"10":0,"11":0,"12":2,"13":2,"14":2,"15":0,"16":2,"17":2,"18":0,"19":2,"20":2,"21":2,"22":6,"23":6,"24":6,"25":6,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":6,"46":6,"47":6,"48":2,"49":4,"50":4,"51":2,"52":2,"53":2,"54":2,"55":2,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":1,"66":1,"67":0,"68":1,"69":0,"70":1,"71":0,"72":0,"73":0,"74":0},"f":{"0":0,"1":2,"2":0,"3":4,"4":2,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"0":[0],"1":[0],"2":[2],"3":[2],"4":[2],"5":[2],"6":[2],"7":[0,2],"8":[2,2],"9":[2,0],"10":[0,2],"11":[2,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[2,4],"23":[6,4],"24":[2,0],"25":[2,0],"26":[0,2],"27":[2],"28":[0],"29":[0],"30":[0],"31":[0],"32":[0,0]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/lib/utils/apiClient.ts"],"sourcesContent":["/**\n * UNIFIED API CLIENT\n * \n * Centralized fetch wrapper with consistent error handling,\n * retries, timeouts, and response standardization\n */\n\nimport { browser } from '$app/environment';\n\nexport interface ApiResponse<T = any> {\n\tsuccess: boolean;\n\tdata?: T;\n\terror?: string;\n\tstatus?: number;\n}\n\nexport interface ApiOptions {\n\tmethod?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n\theaders?: Record<string, string>;\n\tbody?: any;\n\ttimeout?: number;\n\tretries?: number;\n\tretryDelay?: number;\n\tskipErrorLogging?: boolean;\n}\n\nexport class ApiError extends Error {\n\tconstructor(\n\t\tmessage: string,\n\t\tpublic status?: number,\n\t\tpublic response?: Response\n\t) {\n\t\tsuper(message);\n\t\tthis.name = 'ApiError';\n\t}\n}\n\nclass ApiClient {\n\tprivate baseURL = '';\n\tprivate defaultTimeout = 10000; // 10 seconds\n\tprivate defaultRetries = 2;\n\tprivate defaultRetryDelay = 1000; // 1 second\n\n\t/**\n\t * Make an API request with automatic error handling and retries\n\t */\n\tasync request<T = any>(\n\t\turl: string,\n\t\toptions: ApiOptions = {}\n\t): Promise<ApiResponse<T>> {\n\t\tconst {\n\t\t\tmethod = 'GET',\n\t\t\theaders = {},\n\t\t\tbody,\n\t\t\ttimeout = this.defaultTimeout,\n\t\t\tretries = this.defaultRetries,\n\t\t\tretryDelay = this.defaultRetryDelay,\n\t\t\tskipErrorLogging = false\n\t\t} = options;\n\n\t\t// Ensure we're in browser environment for client-side calls\n\t\tif (!browser && !url.startsWith('http')) {\n\t\t\tconsole.log('ApiClient: Not in browser, URL:', url, 'Browser:', browser);\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\terror: 'Client-side API calls only work in browser environment'\n\t\t\t};\n\t\t}\n\n\t\tconst fullUrl = url.startsWith('http') ? url : `${this.baseURL}${url}`;\n\t\t\n\t\tconst controller = new AbortController();\n\t\tconst timeoutId = setTimeout(() => controller.abort(), timeout);\n\n\t\tconst fetchOptions: RequestInit = {\n\t\t\tmethod,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...headers\n\t\t\t},\n\t\t\tsignal: controller.signal\n\t\t};\n\n\t\tif (body && method !== 'GET') {\n\t\t\tfetchOptions.body = typeof body === 'string' ? body : JSON.stringify(body);\n\t\t}\n\n\t\tlet lastError: Error | null = null;\n\n\t\tfor (let attempt = 0; attempt <= retries; attempt++) {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(fullUrl, fetchOptions);\n\t\t\t\tclearTimeout(timeoutId);\n\n\t\t\t\t// Handle non-JSON responses (like redirects)\n\t\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\t\tconst isJson = contentType?.includes('application/json');\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tlet errorMessage = `HTTP ${response.status}`;\n\t\t\t\t\t\n\t\t\t\t\tif (isJson) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst errorData = await response.json();\n\t\t\t\t\t\t\terrorMessage = errorData.message || errorData.error || errorMessage;\n\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\terrorMessage = await response.text() || errorMessage;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrorMessage = await response.text() || errorMessage;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst apiError = new ApiError(errorMessage, response.status, response);\n\t\t\t\t\t\n\t\t\t\t\t// Don't retry 4xx errors (client errors)\n\t\t\t\t\tif (response.status >= 400 && response.status < 500) {\n\t\t\t\t\t\tif (!skipErrorLogging) {\n\t\t\t\t\t\t\tconsole.error('API Client Error:', {\n\t\t\t\t\t\t\t\turl: fullUrl,\n\t\t\t\t\t\t\t\tstatus: response.status,\n\t\t\t\t\t\t\t\terror: errorMessage\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\terror: errorMessage,\n\t\t\t\t\t\t\tstatus: response.status\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow apiError;\n\t\t\t\t}\n\n\t\t\t\t// Parse response\n\t\t\t\tlet data: T;\n\t\t\t\tif (isJson) {\n\t\t\t\t\tdata = await response.json();\n\t\t\t\t} else {\n\t\t\t\t\tdata = (await response.text()) as unknown as T;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\tdata,\n\t\t\t\t\tstatus: response.status\n\t\t\t\t};\n\n\t\t\t} catch (error) {\n\t\t\t\tclearTimeout(timeoutId);\n\t\t\t\tlastError = error as Error;\n\n\t\t\t\t// Don't retry on abort (timeout) or network errors on last attempt\n\t\t\t\tif (attempt === retries || error instanceof DOMException) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Wait before retry\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, retryDelay));\n\t\t\t}\n\t\t}\n\n\t\t// All retries exhausted\n\t\tconst errorMessage = lastError?.message || 'Network request failed';\n\t\tif (!skipErrorLogging) {\n\t\t\tconsole.error('API Client Failed:', {\n\t\t\t\turl: fullUrl,\n\t\t\t\tattempts: retries + 1,\n\t\t\t\terror: errorMessage\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\terror: errorMessage,\n\t\t\tstatus: lastError instanceof ApiError ? lastError.status : undefined\n\t\t};\n\t}\n\n\t/**\n\t * GET request\n\t */\n\tasync get<T = any>(url: string, options: Omit<ApiOptions, 'method' | 'body'> = {}): Promise<ApiResponse<T>> {\n\t\treturn this.request<T>(url, { ...options, method: 'GET' });\n\t}\n\n\t/**\n\t * POST request\n\t */\n\tasync post<T = any>(url: string, body?: any, options: Omit<ApiOptions, 'method' | 'body'> = {}): Promise<ApiResponse<T>> {\n\t\treturn this.request<T>(url, { ...options, method: 'POST', body });\n\t}\n\n\t/**\n\t * PUT request\n\t */\n\tasync put<T = any>(url: string, body?: any, options: Omit<ApiOptions, 'method' | 'body'> = {}): Promise<ApiResponse<T>> {\n\t\treturn this.request<T>(url, { ...options, method: 'PUT', body });\n\t}\n\n\t/**\n\t * DELETE request\n\t */\n\tasync delete<T = any>(url: string, options: Omit<ApiOptions, 'method' | 'body'> = {}): Promise<ApiResponse<T>> {\n\t\treturn this.request<T>(url, { ...options, method: 'DELETE' });\n\t}\n\n\t/**\n\t * PATCH request\n\t */\n\tasync patch<T = any>(url: string, body?: any, options: Omit<ApiOptions, 'method' | 'body'> = {}): Promise<ApiResponse<T>> {\n\t\treturn this.request<T>(url, { ...options, method: 'PATCH', body });\n\t}\n\n\t/**\n\t * Set base URL for relative requests\n\t */\n\tsetBaseURL(url: string): void {\n\t\tthis.baseURL = url.endsWith('/') ? url.slice(0, -1) : url;\n\t}\n\n\t/**\n\t * Set default timeout\n\t */\n\tsetTimeout(ms: number): void {\n\t\tthis.defaultTimeout = ms;\n\t}\n\n\t/**\n\t * Set default retry configuration\n\t */\n\tsetRetryConfig(retries: number, delay: number): void {\n\t\tthis.defaultRetries = retries;\n\t\tthis.defaultRetryDelay = delay;\n\t}\n}\n\n// Singleton instance\nexport const apiClient = new ApiClient();\n\n// Convenience exports for common patterns\nexport const api = {\n\tget: apiClient.get.bind(apiClient),\n\tpost: apiClient.post.bind(apiClient),\n\tput: apiClient.put.bind(apiClient),\n\tdelete: apiClient.delete.bind(apiClient),\n\tpatch: apiClient.patch.bind(apiClient)\n};\n\n// Analytics API wrapper\nexport const analyticsApi = {\n\tasync track<T = any>(event: string, data?: any): Promise<ApiResponse<T>> {\n\t\treturn api.post('/api/civic/analytics', { event, ...data }, { skipErrorLogging: true });\n\t}\n};\n\n// Congress API wrapper  \nexport const congressApi = {\n\tasync lookup<T = any>(address: string): Promise<ApiResponse<T>> {\n\t\treturn api.post('/api/address/lookup', { address });\n\t}\n};\n\n// Templates API wrapper\nexport const templatesApi = {\n\tasync list<T = any>(): Promise<ApiResponse<T>> {\n\t\treturn api.get('/api/templates');\n\t},\n\t\n\tasync create<T = any>(template: any): Promise<ApiResponse<T>> {\n\t\treturn api.post('/api/templates', template);\n\t},\n\t\n\tasync update<T = any>(id: string, template: any): Promise<ApiResponse<T>> {\n\t\treturn api.put(`/api/templates/${id}`, template);\n\t},\n\t\n\tasync delete<T = any>(id: string): Promise<ApiResponse<T>> {\n\t\treturn api.delete(`/api/templates/${id}`);\n\t}\n};\n\n// ApiError already exported above as class declaration"],"mappings":"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","names":["errorMessage"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"499aea1fe08d0d1c6d5ca8adf0cdc7974cd336f8"}}