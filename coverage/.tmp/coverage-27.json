{"/Users/noot/Documents/communique/src/lib/server/verification-sessions.ts":{"path":"/Users/noot/Documents/communique/src/lib/server/verification-sessions.ts","statementMap":{"0":{"start":{"line":1,"column":52},"end":{"line":1,"column":61}},"1":{"start":{"line":3,"column":21},"end":{"line":3,"column":57}},"2":{"start":{"line":4,"column":2},"end":{"line":8,"column":3}},"3":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"4":{"start":{"line":6,"column":6},"end":{"line":6,"column":39}}},"fnMap":{"0":{"name":"cleanupOldSessions","decl":{"start":{"line":2,"column":16},"end":{"line":2,"column":34}},"loc":{"start":{"line":2,"column":37},"end":{"line":9,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{},"end":{}}],"line":5}},"s":{"0":1,"1":0,"2":0,"3":0,"4":0},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/lib/server/verification-sessions.ts"],"sourcesContent":["// Shared verification session storage\n// In production, this would be Redis/Database\n\ninterface VerificationSession {\n\tuserId: string;\n\ttemplateSlug: string;\n\tdisclosures: Record<string, any>;\n\tqrCodeData: string;\n\tstatus: 'pending' | 'verified' | 'failed';\n\tcredentialSubject?: any;\n\tcreatedAt: Date;\n}\n\n// In-memory storage for verification sessions (use Redis/DB in production)\nexport const verificationSessions = new Map<string, VerificationSession>();\n\n// Cleanup function to remove old sessions\nexport function cleanupOldSessions() {\n\tconst oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n\tfor (const [key, session] of verificationSessions.entries()) {\n\t\tif (session.createdAt < oneHourAgo) {\n\t\t\tverificationSessions.delete(key);\n\t\t}\n\t}\n}\n\nexport type { VerificationSession };"],"mappings":"AAcO,aAAM,uBAAuB,oBAAI,IAAiC;AAGlE,gBAAS,qBAAqB;AACpC,QAAM,aAAa,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,GAAI;AACvD,aAAW,CAAC,KAAK,OAAO,KAAK,qBAAqB,QAAQ,GAAG;AAC5D,QAAI,QAAQ,YAAY,YAAY;AACnC,2BAAqB,OAAO,GAAG;AAAA,IAChC;AAAA,EACD;AACD;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0a3161897151a7816fa355e7470f3b703aad6ce8"},"/Users/noot/Documents/communique/src/routes/api/identity/verify/+server.ts":{"path":"/Users/noot/Documents/communique/src/routes/api/identity/verify/+server.ts","statementMap":{"0":{"start":{"line":6,"column":20},"end":{"line":8,"column":2}},"1":{"start":{"line":7,"column":2},"end":{"line":7,"column":90}},"2":{"start":{"line":9,"column":35},"end":{"line":14,"column":2}},"3":{"start":{"line":15,"column":21},"end":{"line":24,"column":1}},"4":{"start":{"line":25,"column":20},"end":{"line":139,"column":1}},"5":{"start":{"line":26,"column":2},"end":{"line":138,"column":3}},"6":{"start":{"line":27,"column":17},"end":{"line":27,"column":37}},"7":{"start":{"line":28,"column":66},"end":{"line":28,"column":70}},"8":{"start":{"line":29,"column":4},"end":{"line":34,"column":7}},"9":{"start":{"line":35,"column":24},"end":{"line":35,"column":74}},"10":{"start":{"line":36,"column":37},"end":{"line":36,"column":48}},"11":{"start":{"line":37,"column":21},"end":{"line":37,"column":75}},"12":{"start":{"line":38,"column":4},"end":{"line":43,"column":7}},"13":{"start":{"line":44,"column":31},"end":{"line":49,"column":5}},"14":{"start":{"line":50,"column":20},"end":{"line":50,"column":165}},"15":{"start":{"line":51,"column":4},"end":{"line":62,"column":5}},"16":{"start":{"line":52,"column":6},"end":{"line":56,"column":9}},"17":{"start":{"line":57,"column":6},"end":{"line":61,"column":26}},"18":{"start":{"line":63,"column":27},"end":{"line":63,"column":60}},"19":{"start":{"line":64,"column":20},"end":{"line":64,"column":52}},"20":{"start":{"line":65,"column":4},"end":{"line":68,"column":5}},"21":{"start":{"line":66,"column":6},"end":{"line":66,"column":34}},"22":{"start":{"line":67,"column":6},"end":{"line":67,"column":49}},"23":{"start":{"line":69,"column":24},"end":{"line":69,"column":50}},"24":{"start":{"line":70,"column":25},"end":{"line":70,"column":52}},"25":{"start":{"line":71,"column":17},"end":{"line":71,"column":36}},"26":{"start":{"line":72,"column":24},"end":{"line":72,"column":65}},"27":{"start":{"line":73,"column":23},"end":{"line":73,"column":75}},"28":{"start":{"line":73,"column":60},"end":{"line":73,"column":74}},"29":{"start":{"line":74,"column":29},"end":{"line":85,"column":5}},"30":{"start":{"line":86,"column":4},"end":{"line":107,"column":5}},"31":{"start":{"line":87,"column":6},"end":{"line":106,"column":7}},"32":{"start":{"line":88,"column":8},"end":{"line":96,"column":11}},"33":{"start":{"line":97,"column":8},"end":{"line":103,"column":11}},"34":{"start":{"line":105,"column":8},"end":{"line":105,"column":82}},"35":{"start":{"line":108,"column":4},"end":{"line":115,"column":7}},"36":{"start":{"line":116,"column":4},"end":{"line":123,"column":7}},"37":{"start":{"line":125,"column":4},"end":{"line":125,"column":57}},"38":{"start":{"line":126,"column":4},"end":{"line":132,"column":5}},"39":{"start":{"line":127,"column":6},"end":{"line":131,"column":9}},"40":{"start":{"line":133,"column":4},"end":{"line":137,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":44},"end":{"line":6,"column":45}},"loc":{"start":{"line":6,"column":87},"end":{"line":8,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":25,"column":20},"end":{"line":25,"column":21}},"loc":{"start":{"line":25,"column":69},"end":{"line":139,"column":1}},"line":25},"2":{"name":"(anonymous_2)","decl":{"start":{"line":73,"column":49},"end":{"line":73,"column":50}},"loc":{"start":{"line":73,"column":60},"end":{"line":73,"column":74}},"line":73}},"branchMap":{"0":{"loc":{"start":{"line":31,"column":23},"end":{"line":31,"column":75}},"type":"cond-expr","locations":[{"start":{"line":31,"column":41},"end":{"line":31,"column":68}},{"start":{"line":31,"column":71},"end":{"line":31,"column":75}}],"line":31},"1":{"loc":{"start":{"line":35,"column":24},"end":{"line":35,"column":74}},"type":"cond-expr","locations":[{"start":{"line":35,"column":42},"end":{"line":35,"column":69}},{"start":{"line":35,"column":72},"end":{"line":35,"column":74}}],"line":35},"2":{"loc":{"start":{"line":50,"column":20},"end":{"line":50,"column":165}},"type":"binary-expr","locations":[{"start":{"line":50,"column":20},"end":{"line":50,"column":61}},{"start":{"line":50,"column":65},"end":{"line":50,"column":116}},{"start":{"line":50,"column":120},"end":{"line":50,"column":165}}],"line":50},"3":{"loc":{"start":{"line":51,"column":4},"end":{"line":62,"column":5}},"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":62,"column":5}},{"start":{},"end":{}}],"line":51},"4":{"loc":{"start":{"line":65,"column":4},"end":{"line":68,"column":5}},"type":"if","locations":[{"start":{"line":65,"column":4},"end":{"line":68,"column":5}},{"start":{},"end":{}}],"line":65},"5":{"loc":{"start":{"line":81,"column":17},"end":{"line":81,"column":41}},"type":"binary-expr","locations":[{"start":{"line":81,"column":17},"end":{"line":81,"column":33}},{"start":{"line":81,"column":37},"end":{"line":81,"column":41}}],"line":81},"6":{"loc":{"start":{"line":86,"column":4},"end":{"line":107,"column":5}},"type":"if","locations":[{"start":{"line":86,"column":4},"end":{"line":107,"column":5}},{"start":{},"end":{}}],"line":86},"7":{"loc":{"start":{"line":111,"column":12},"end":{"line":111,"column":75}},"type":"cond-expr","locations":[{"start":{"line":111,"column":39},"end":{"line":111,"column":68}},{"start":{"line":111,"column":71},"end":{"line":111,"column":75}}],"line":111},"8":{"loc":{"start":{"line":126,"column":4},"end":{"line":132,"column":5}},"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":132,"column":5}},{"start":{},"end":{}}],"line":126}},"s":{"0":1,"1":0,"2":1,"3":1,"4":1,"5":3,"6":3,"7":3,"8":3,"9":3,"10":3,"11":3,"12":3,"13":3,"14":3,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":3,"38":3,"39":3,"40":3},"f":{"0":0,"1":3,"2":0},"b":{"0":[3,0],"1":[3,0],"2":[3,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[3,0]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/routes/api/identity/verify/+server.ts"],"sourcesContent":["import { json } from '@sveltejs/kit';\nimport type { RequestHandler } from './$types';\nimport { SelfBackendVerifier, InMemoryConfigStore } from '@selfxyz/core';\nimport { db } from '$lib/server/db';\nimport { SELF_XYZ_SCOPE, SELF_XYZ_ENDPOINT } from '$lib/server/selfxyz-config';\n// Import shared verification sessions from init endpoint\n// In production, this would be Redis/DB shared state\nimport { verificationSessions } from '$lib/server/verification-sessions';\n\n// Initialize configuration store for Self.xyz\nconst configStore = new InMemoryConfigStore(async (userIdentifier: string, userDefinedData: string) => {\n\t// Generate a consistent action ID based on user identifier and data\n\treturn `${userIdentifier}-${Buffer.from(userDefinedData).toString('hex').slice(0, 16)}`;\n});\n\n// Allowed attestation IDs (1 = passport, 2 = EU ID card)\nconst allowedIds = new Map<1 | 2, boolean>([\n\t[1, true], // passport allowed\n\t[2, true]  // EU ID card allowed\n]);\n\n// Initialize the Self.xyz backend verifier\nconst selfVerifier = new SelfBackendVerifier(\n\tSELF_XYZ_SCOPE,\n\tSELF_XYZ_ENDPOINT,\n\tfalse, // mockPassport = false for production\n\tallowedIds,\n\tconfigStore,\n\t'uuid' // userIdentifierType\n);\n\nexport const POST: RequestHandler = async ({ request, getClientAddress, locals }) => {\n\ttry {\n\t\tconst body = await request.json();\n\t\tconst { attestationId, proof, pubSignals, userContextData } = body;\n\n\t\tconsole.log('Self.xyz verification request:', {\n\t\t\tattestationId,\n\t\t\tuserContextData: userContextData ? JSON.parse(userContextData) : null,\n\t\t\tclientIP: getClientAddress(),\n\t\t\thasLoggedInUser: !!locals.user\n\t\t});\n\n\t\t// Store configuration for this verification (required by SDK)\n\t\tconst contextData = userContextData ? JSON.parse(userContextData) : {};\n\t\tconst { userId, templateSlug } = contextData;\n\t\t\n\t\t// Store verification config in the config store\n\t\tconst configId = await configStore.getActionId(userId, userContextData);\n\t\tawait configStore.setConfig(configId, {\n\t\t\tminimumAge: 18,\n\t\t\texcludedCountries: [], // No country restrictions for now\n\t\t\tofac: true\n\t\t});\n\n\t\t// Verify the proof using Self.xyz backend verifier\n\t\tconst verificationResult = await selfVerifier.verify(\n\t\t\tattestationId,\n\t\t\tproof,\n\t\t\tpubSignals,\n\t\t\tuserContextData\n\t\t);\n\n\t\t// Check if verification was successful\n\t\tconst isValid = verificationResult.isValidDetails.isValid && \n\t\t\t\t\t\tverificationResult.isValidDetails.isMinimumAgeValid && \n\t\t\t\t\t\tverificationResult.isValidDetails.isOfacValid;\n\n\t\tif (!isValid) {\n\t\t\tconsole.error('Self.xyz verification failed:', {\n\t\t\t\tisValid: verificationResult.isValidDetails.isValid,\n\t\t\t\tisMinimumAgeValid: verificationResult.isValidDetails.isMinimumAgeValid,\n\t\t\t\tisOfacValid: verificationResult.isValidDetails.isOfacValid\n\t\t\t});\n\t\t\treturn json({\n\t\t\t\tstatus: 'error',\n\t\t\t\tresult: false,\n\t\t\t\tmessage: 'Identity verification failed - invalid proof or requirements not met'\n\t\t\t}, { status: 400 });\n\t\t}\n\n\t\t// Extract credential data from the disclosed output\n\t\tconst discloseOutput = verificationResult.discloseOutput;\n\n\t\t// Update verification session status\n\t\tconst session = verificationSessions.get(userId);\n\t\tif (session) {\n\t\t\tsession.status = 'verified';\n\t\t\tsession.credentialSubject = discloseOutput;\n\t\t}\n\n\t\t// Extract user information for database storage\n\t\tconst nationality = discloseOutput.nationality;\n\t\tconst issuingState = discloseOutput.issuingState;\n\t\tconst name = discloseOutput.name;\n\t\tconst ageVerified = parseInt(discloseOutput.minimumAge) >= 18;\n\t\tconst ofacPassed = discloseOutput.ofac.every(check => check === true);\n\n\t\t// Create verification metadata\n\t\tconst verificationData = {\n\t\t\tattestationId,\n\t\t\tnationality,\n\t\t\tissuingState,\n\t\t\tname,\n\t\t\tageVerified,\n\t\t\tofacPassed,\n\t\t\tnullifier: proof?.nullifier || null,\n\t\t\tsessionUserId: userId,\n\t\t\tverifiedAt: new Date().toISOString(),\n\t\t\ttemplateSlug\n\t\t};\n\n\t\t// If user is logged in, update their verification status in the database\n\t\tif (locals.user) {\n\t\t\ttry {\n\t\t\t\tawait db.user.update({\n\t\t\t\t\twhere: { id: locals.user.id },\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tis_verified: true,\n\t\t\t\t\t\tverification_method: 'self_xyz',\n\t\t\t\t\t\tverification_data: verificationData,\n\t\t\t\t\t\tverified_at: new Date()\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconsole.log('Updated user verification in database:', {\n\t\t\t\t\tuserId: locals.user.id,\n\t\t\t\t\temail: locals.user.email,\n\t\t\t\t\tnationality,\n\t\t\t\t\tageVerified,\n\t\t\t\t\tofacPassed\n\t\t\t\t});\n\t\t\t} catch (dbError) {\n\t\t\t\tconsole.error('Failed to update user verification in database:', dbError);\n\t\t\t\t// Continue processing - verification still succeeded\n\t\t\t}\n\t\t}\n\t\t\n\t\tconsole.log('Self.xyz verification successful:', {\n\t\t\tuserId,\n\t\t\tnationality,\n\t\t\tname: typeof name === 'string' ? name.substring(0, 20) + '...' : name,\n\t\t\tageVerified,\n\t\t\tofacPassed,\n\t\t\tstoredInDatabase: !!locals.user\n\t\t});\n\n\t\treturn json({\n\t\t\tstatus: 'success',\n\t\t\tresult: true,\n\t\t\tcredentialSubject: discloseOutput,\n\t\t\tverificationData,\n\t\t\tuserUpdated: !!locals.user,\n\t\t\tmessage: 'Identity verification completed successfully'\n\t\t});\n\n\t} catch (error) {\n\t\tconsole.error('Self.xyz verification error:', error);\n\t\t\n\t\t// Log detailed error information for debugging\n\t\tif (error instanceof Error) {\n\t\t\tconsole.error('Error details:', {\n\t\t\t\tname: error.name,\n\t\t\t\tmessage: error.message,\n\t\t\t\tstack: error.stack?.split('\\n').slice(0, 5)\n\t\t\t});\n\t\t}\n\n\t\treturn json({\n\t\t\tstatus: 'error',\n\t\t\tresult: false,\n\t\t\tmessage: 'Internal verification error'\n\t\t}, { status: 500 });\n\t}\n};"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cadb8fe748711a3cfadd3794a47b1f0fdfb2de7f"}}