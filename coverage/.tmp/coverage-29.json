{"/Users/noot/Documents/communique/src/lib/congress/cwc-generator.ts":{"path":"/Users/noot/Documents/communique/src/lib/congress/cwc-generator.ts","statementMap":{"0":{"start":{"line":7,"column":42},"end":{"line":7,"column":49}},"1":{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},"2":{"start":{"line":9,"column":6},"end":{"line":9,"column":45}},"3":{"start":{"line":11,"column":22},"end":{"line":11,"column":64}},"4":{"start":{"line":12,"column":22},"end":{"line":12,"column":88}},"5":{"start":{"line":13,"column":42},"end":{"line":13,"column":81}},"6":{"start":{"line":14,"column":21},"end":{"line":14,"column":54}},"7":{"start":{"line":15,"column":16},"end":{"line":51,"column":7}},"8":{"start":{"line":52,"column":4},"end":{"line":52,"column":15}},"9":{"start":{"line":59,"column":42},"end":{"line":59,"column":49}},"10":{"start":{"line":60,"column":22},"end":{"line":60,"column":88}},"11":{"start":{"line":61,"column":42},"end":{"line":61,"column":81}},"12":{"start":{"line":62,"column":21},"end":{"line":62,"column":54}},"13":{"start":{"line":63,"column":16},"end":{"line":97,"column":7}},"14":{"start":{"line":98,"column":4},"end":{"line":98,"column":15}},"15":{"start":{"line":105,"column":20},"end":{"line":105,"column":80}},"16":{"start":{"line":106,"column":4},"end":{"line":112,"column":6}},"17":{"start":{"line":107,"column":15},"end":{"line":111,"column":8}},"18":{"start":{"line":118,"column":22},"end":{"line":118,"column":32}},"19":{"start":{"line":119,"column":17},"end":{"line":119,"column":89}},"20":{"start":{"line":120,"column":4},"end":{"line":120,"column":55}},"21":{"start":{"line":126,"column":18},"end":{"line":126,"column":74}},"22":{"start":{"line":127,"column":23},"end":{"line":127,"column":74}},"23":{"start":{"line":128,"column":4},"end":{"line":128,"column":39}},"24":{"start":{"line":134,"column":15},"end":{"line":134,"column":16}},"25":{"start":{"line":135,"column":4},"end":{"line":139,"column":5}},"26":{"start":{"line":135,"column":17},"end":{"line":135,"column":18}},"27":{"start":{"line":136,"column":19},"end":{"line":136,"column":36}},"28":{"start":{"line":137,"column":6},"end":{"line":137,"column":39}},"29":{"start":{"line":138,"column":6},"end":{"line":138,"column":25}},"30":{"start":{"line":140,"column":4},"end":{"line":140,"column":55}},"31":{"start":{"line":146,"column":4},"end":{"line":161,"column":7}},"32":{"start":{"line":147,"column":6},"end":{"line":160,"column":7}},"33":{"start":{"line":149,"column":10},"end":{"line":149,"column":24}},"34":{"start":{"line":151,"column":10},"end":{"line":151,"column":24}},"35":{"start":{"line":153,"column":10},"end":{"line":153,"column":25}},"36":{"start":{"line":155,"column":10},"end":{"line":155,"column":26}},"37":{"start":{"line":157,"column":10},"end":{"line":157,"column":25}},"38":{"start":{"line":159,"column":10},"end":{"line":159,"column":22}},"39":{"start":{"line":167,"column":19},"end":{"line":167,"column":21}},"40":{"start":{"line":168,"column":27},"end":{"line":168,"column":88}},"41":{"start":{"line":169,"column":4},"end":{"line":197,"column":5}},"42":{"start":{"line":170,"column":37},"end":{"line":177,"column":7}},"43":{"start":{"line":178,"column":6},"end":{"line":182,"column":9}},"44":{"start":{"line":179,"column":8},"end":{"line":181,"column":9}},"45":{"start":{"line":180,"column":10},"end":{"line":180,"column":69}},"46":{"start":{"line":184,"column":36},"end":{"line":191,"column":7}},"47":{"start":{"line":192,"column":6},"end":{"line":196,"column":9}},"48":{"start":{"line":193,"column":8},"end":{"line":195,"column":9}},"49":{"start":{"line":194,"column":10},"end":{"line":194,"column":68}},"50":{"start":{"line":198,"column":4},"end":{"line":201,"column":6}},"51":{"start":{"line":207,"column":27},"end":{"line":207,"column":51}},"52":{"start":{"line":208,"column":4},"end":{"line":210,"column":5}},"53":{"start":{"line":209,"column":6},"end":{"line":209,"column":21}},"54":{"start":{"line":211,"column":4},"end":{"line":213,"column":5}},"55":{"start":{"line":212,"column":6},"end":{"line":212,"column":19}},"56":{"start":{"line":214,"column":4},"end":{"line":216,"column":5}},"57":{"start":{"line":215,"column":6},"end":{"line":215,"column":22}},"58":{"start":{"line":217,"column":4},"end":{"line":217,"column":17}},"59":{"start":{"line":223,"column":21},"end":{"line":265,"column":5}},"60":{"start":{"line":266,"column":4},"end":{"line":270,"column":7}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":2},"end":{"line":6,"column":3}},"loc":{"start":{"line":6,"column":42},"end":{"line":53,"column":3}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":58,"column":2},"end":{"line":58,"column":3}},"loc":{"start":{"line":58,"column":36},"end":{"line":99,"column":3}},"line":58},"2":{"name":"(anonymous_2)","decl":{"start":{"line":104,"column":2},"end":{"line":104,"column":3}},"loc":{"start":{"line":104,"column":45},"end":{"line":113,"column":3}},"line":104},"3":{"name":"(anonymous_3)","decl":{"start":{"line":107,"column":6},"end":{"line":107,"column":7}},"loc":{"start":{"line":107,"column":15},"end":{"line":111,"column":8}},"line":107},"4":{"name":"(anonymous_4)","decl":{"start":{"line":117,"column":2},"end":{"line":117,"column":3}},"loc":{"start":{"line":117,"column":62},"end":{"line":121,"column":3}},"line":117},"5":{"name":"(anonymous_5)","decl":{"start":{"line":125,"column":2},"end":{"line":125,"column":3}},"loc":{"start":{"line":125,"column":66},"end":{"line":129,"column":3}},"line":125},"6":{"name":"(anonymous_6)","decl":{"start":{"line":133,"column":2},"end":{"line":133,"column":3}},"loc":{"start":{"line":133,"column":25},"end":{"line":141,"column":3}},"line":133},"7":{"name":"(anonymous_7)","decl":{"start":{"line":145,"column":2},"end":{"line":145,"column":3}},"loc":{"start":{"line":145,"column":24},"end":{"line":162,"column":3}},"line":145},"8":{"name":"(anonymous_8)","decl":{"start":{"line":146,"column":35},"end":{"line":146,"column":36}},"loc":{"start":{"line":146,"column":45},"end":{"line":161,"column":5}},"line":146},"9":{"name":"(anonymous_9)","decl":{"start":{"line":166,"column":2},"end":{"line":166,"column":3}},"loc":{"start":{"line":166,"column":26},"end":{"line":202,"column":3}},"line":166},"10":{"name":"(anonymous_10)","decl":{"start":{"line":178,"column":37},"end":{"line":178,"column":38}},"loc":{"start":{"line":178,"column":50},"end":{"line":182,"column":7}},"line":178},"11":{"name":"(anonymous_11)","decl":{"start":{"line":192,"column":36},"end":{"line":192,"column":37}},"loc":{"start":{"line":192,"column":49},"end":{"line":196,"column":7}},"line":192},"12":{"name":"(anonymous_12)","decl":{"start":{"line":206,"column":2},"end":{"line":206,"column":3}},"loc":{"start":{"line":206,"column":48},"end":{"line":218,"column":3}},"line":206},"13":{"name":"(anonymous_13)","decl":{"start":{"line":222,"column":2},"end":{"line":222,"column":3}},"loc":{"start":{"line":222,"column":38},"end":{"line":271,"column":3}},"line":222}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},{"start":{},"end":{}}],"line":8},"1":{"loc":{"start":{"line":13,"column":43},"end":{"line":13,"column":69}},"type":"binary-expr","locations":[{"start":{"line":13,"column":43},"end":{"line":13,"column":52}},{"start":{"line":13,"column":56},"end":{"line":13,"column":69}}],"line":13},"2":{"loc":{"start":{"line":14,"column":21},"end":{"line":14,"column":54}},"type":"binary-expr","locations":[{"start":{"line":14,"column":21},"end":{"line":14,"column":44}},{"start":{"line":14,"column":48},"end":{"line":14,"column":54}}],"line":14},"3":{"loc":{"start":{"line":40,"column":10},"end":{"line":40,"column":74}},"type":"cond-expr","locations":[{"start":{"line":40,"column":23},"end":{"line":40,"column":69}},{"start":{"line":40,"column":72},"end":{"line":40,"column":74}}],"line":40},"4":{"loc":{"start":{"line":44,"column":34},"end":{"line":44,"column":83}},"type":"binary-expr","locations":[{"start":{"line":44,"column":34},"end":{"line":44,"column":50}},{"start":{"line":44,"column":54},"end":{"line":44,"column":83}}],"line":44},"5":{"loc":{"start":{"line":61,"column":43},"end":{"line":61,"column":69}},"type":"binary-expr","locations":[{"start":{"line":61,"column":43},"end":{"line":61,"column":52}},{"start":{"line":61,"column":56},"end":{"line":61,"column":69}}],"line":61},"6":{"loc":{"start":{"line":62,"column":21},"end":{"line":62,"column":54}},"type":"binary-expr","locations":[{"start":{"line":62,"column":21},"end":{"line":62,"column":44}},{"start":{"line":62,"column":48},"end":{"line":62,"column":54}}],"line":62},"7":{"loc":{"start":{"line":86,"column":43},"end":{"line":86,"column":59}},"type":"binary-expr","locations":[{"start":{"line":86,"column":43},"end":{"line":86,"column":53}},{"start":{"line":86,"column":57},"end":{"line":86,"column":59}}],"line":86},"8":{"loc":{"start":{"line":89,"column":34},"end":{"line":89,"column":83}},"type":"binary-expr","locations":[{"start":{"line":89,"column":34},"end":{"line":89,"column":50}},{"start":{"line":89,"column":54},"end":{"line":89,"column":83}}],"line":89},"9":{"loc":{"start":{"line":147,"column":6},"end":{"line":160,"column":7}},"type":"switch","locations":[{"start":{"line":148,"column":8},"end":{"line":149,"column":24}},{"start":{"line":150,"column":8},"end":{"line":151,"column":24}},{"start":{"line":152,"column":8},"end":{"line":153,"column":25}},{"start":{"line":154,"column":8},"end":{"line":155,"column":26}},{"start":{"line":156,"column":8},"end":{"line":157,"column":25}},{"start":{"line":158,"column":8},"end":{"line":159,"column":22}}],"line":147},"10":{"loc":{"start":{"line":168,"column":27},"end":{"line":168,"column":88}},"type":"binary-expr","locations":[{"start":{"line":168,"column":27},"end":{"line":168,"column":55}},{"start":{"line":168,"column":59},"end":{"line":168,"column":88}}],"line":168},"11":{"loc":{"start":{"line":169,"column":4},"end":{"line":197,"column":5}},"type":"if","locations":[{"start":{"line":169,"column":4},"end":{"line":197,"column":5}},{"start":{"line":183,"column":11},"end":{"line":197,"column":5}}],"line":169},"12":{"loc":{"start":{"line":179,"column":8},"end":{"line":181,"column":9}},"type":"if","locations":[{"start":{"line":179,"column":8},"end":{"line":181,"column":9}},{"start":{},"end":{}}],"line":179},"13":{"loc":{"start":{"line":193,"column":8},"end":{"line":195,"column":9}},"type":"if","locations":[{"start":{"line":193,"column":8},"end":{"line":195,"column":9}},{"start":{},"end":{}}],"line":193},"14":{"loc":{"start":{"line":208,"column":4},"end":{"line":210,"column":5}},"type":"if","locations":[{"start":{"line":208,"column":4},"end":{"line":210,"column":5}},{"start":{},"end":{}}],"line":208},"15":{"loc":{"start":{"line":211,"column":4},"end":{"line":213,"column":5}},"type":"if","locations":[{"start":{"line":211,"column":4},"end":{"line":213,"column":5}},{"start":{},"end":{}}],"line":211},"16":{"loc":{"start":{"line":214,"column":4},"end":{"line":216,"column":5}},"type":"if","locations":[{"start":{"line":214,"column":4},"end":{"line":216,"column":5}},{"start":{},"end":{}}],"line":214}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/lib/congress/cwc-generator.ts"],"sourcesContent":["import type { Template } from '$lib/types/template';\n\ninterface UserRepresentative {\n    bioguideId: string;\n    name: string;\n    party: string;\n    state: string;\n    district: string;\n    chamber: 'house' | 'senate';\n    officeCode: string;\n}\n\ninterface UserAddress {\n    street: string;\n    city: string;\n    state: string;\n    zip: string;\n}\n\ninterface User {\n    id: string;\n    name: string;\n    email: string;\n    phone?: string;\n    address: UserAddress;\n    representatives: {\n        house: UserRepresentative;\n        senate: UserRepresentative[];\n    };\n}\n\ninterface CWCMessage {\n    template: Template;\n    user: User;\n    targetRep: UserRepresentative; // Which specific rep to send to\n}\n\nexport class CWCGenerator {\n    /**\n     * Generate CWC XML for a user's advocacy message\n     * This is the core function used when processing mailto: links\n     */\n    static generateUserAdvocacyXML(message: CWCMessage): string {\n        const { template, user, targetRep } = message;\n        \n        // Use Senate-specific format if targeting Senate\n        if (targetRep.chamber === 'senate') {\n            return this.generateSenateXML(message);\n        }\n        \n        const timestamp = new Date().toISOString();\n        const messageId = this.generateMessageId(user.id, template.id, targetRep.bioguideId);\n        \n        // Extract user name parts\n        const [firstName, ...lastNameParts] = (user.name || 'Constituent').split(' ');\n        const lastName = lastNameParts.join(' ') || 'User';\n        \n        const xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<CWC version=\"2.0\">\n    <MessageHeader>\n        <MessageId>${this.escapeXML(messageId)}</MessageId>\n        <Timestamp>${timestamp}</Timestamp>\n        <DeliveryAgent>\n            <Name>Communique Advocacy Platform</Name>\n            <Email>cwc@communique.org</Email>\n            <Phone>+1-555-CWC-MAIL</Phone>\n        </DeliveryAgent>\n        <OfficeCode>${this.escapeXML(targetRep.officeCode)}</OfficeCode>\n    </MessageHeader>\n    \n    <ConstituentData>\n        <Name>\n            <First>${this.escapeXML(firstName)}</First>\n            <Last>${this.escapeXML(lastName)}</Last>\n        </Name>\n        <Address>\n            <Street>${this.escapeXML(user.address.street)}</Street>\n            <City>${this.escapeXML(user.address.city)}</City>\n            <State>${this.escapeXML(user.address.state)}</State>\n            <Zip>${this.escapeXML(user.address.zip)}</Zip>\n        </Address>\n        <Email>${this.escapeXML(user.email)}</Email>\n        ${user.phone ? `<Phone>${this.escapeXML(user.phone)}</Phone>` : ''}\n    </ConstituentData>\n    \n    <MessageData>\n        <Subject>${this.escapeXML(template.subject || 'Congressional Communication')}</Subject>\n        <Body>${this.escapeXML(template.message_body)}</Body>\n        \n        <MessageMetadata>\n            <IntegrityHash>${this.generateIntegrityHash(user.id, template.id, targetRep.bioguideId)}</IntegrityHash>\n        </MessageMetadata>\n    </MessageData>\n</CWC>`;\n        \n        return xml;\n    }\n\n    /**\n     * Generate Senate-specific CWC XML\n     * The Senate uses a different XML schema than the House\n     */\n    static generateSenateXML(message: CWCMessage): string {\n        const { template, user, targetRep } = message;\n        \n        const messageId = this.generateMessageId(user.id, template.id, targetRep.bioguideId);\n        \n        // Extract user name parts\n        const [firstName, ...lastNameParts] = (user.name || 'Constituent').split(' ');\n        const lastName = lastNameParts.join(' ') || 'User';\n        \n        // Simplified Senate XML format based on error feedback\n        const xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<CWC>\n    <DeliveryId>${this.escapeXML(messageId)}</DeliveryId>\n    <DeliveryAgent>\n        <Name>Communique Advocacy Platform</Name>\n        <Email>cwc@communique.org</Email>\n        <Phone>+1-555-CWC-MAIL</Phone>\n    </DeliveryAgent>\n    <Constituent>\n        <Prefix></Prefix>\n        <FirstName>${this.escapeXML(firstName)}</FirstName>\n        <MiddleName></MiddleName>\n        <LastName>${this.escapeXML(lastName)}</LastName>\n        <Suffix></Suffix>\n        <Title></Title>\n        <ConstituentAddress>\n            <Address1>${this.escapeXML(user.address.street)}</Address1>\n            <Address2></Address2>\n            <City>${this.escapeXML(user.address.city)}</City>\n            <StateAbbreviation>${this.escapeXML(user.address.state)}</StateAbbreviation>\n            <Zip>${this.escapeXML(user.address.zip)}</Zip>\n        </ConstituentAddress>\n        <ConstituentEmail>${this.escapeXML(user.email)}</ConstituentEmail>\n        <ConstituentPhone>${this.escapeXML(user.phone || '')}</ConstituentPhone>\n    </Constituent>\n    <Message>\n        <Subject>${this.escapeXML(template.subject || 'Congressional Communication')}</Subject>\n        <LibraryOfCongressTopics></LibraryOfCongressTopics>\n        <BillNumber></BillNumber>\n        <ProOrCon></ProOrCon>\n        <OrganizationAcronym></OrganizationAcronym>\n        <ConstituentMessage>${this.escapeXML(template.message_body)}</ConstituentMessage>\n    </Message>\n    <OfficeCode>${this.escapeXML(targetRep.officeCode)}</OfficeCode>\n</CWC>`;\n        \n        return xml;\n    }\n    \n    /**\n     * Generate CWC XML for all of a user's representatives\n     * Used when template targets \"all reps\" \n     */\n    static generateMultiRepXML(template: Template, user: User): string[] {\n        const allReps = [user.representatives.house, ...user.representatives.senate];\n        \n        return allReps.map(rep => \n            this.generateUserAdvocacyXML({\n                template,\n                user,\n                targetRep: rep\n            })\n        );\n    }\n    \n    /**\n     * Generate unique message ID for CWC submission\n     */\n    static generateMessageId(userId: string, templateId: string, repBioguideId: string): string {\n        const timestamp = Date.now();\n        const hash = this.simpleHash(`${userId}-${templateId}-${repBioguideId}-${timestamp}`);\n        return `CWC-${templateId.substring(0, 6)}-${hash}`;\n    }\n    \n    /**\n     * Generate integrity hash for duplicate prevention\n     */\n    static generateIntegrityHash(userId: string, templateId: string, repBioguideId: string): string {\n        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\n        const dataString = `${userId}:${templateId}:${repBioguideId}:${today}`;\n        return this.simpleHash(dataString);\n    }\n    \n    /**\n     * Simple hash function for message integrity\n     */\n    static simpleHash(str: string): string {\n        let hash = 0;\n        for (let i = 0; i < str.length; i++) {\n            const char = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32-bit integer\n        }\n        return Math.abs(hash).toString(36).substring(0, 8);\n    }\n    \n    /**\n     * Escape XML special characters\n     */\n    static escapeXML(str: string): string {\n        return str.replace(/[<>&'\"]/g, (char) => {\n            switch (char) {\n                case '<': return '&lt;';\n                case '>': return '&gt;';\n                case '&': return '&amp;';\n                case '\"': return '&quot;';\n                case \"'\": return '&#39;';\n                default: return char;\n            }\n        });\n    }\n    \n    /**\n     * Basic XML validation\n     */\n    static validateXML(xml: string): { valid: boolean; errors: string[] } {\n        const errors: string[] = [];\n        \n        // Determine if this is Senate or House format\n        const isSenateFormat = xml.includes('<DeliveryId>') && xml.includes('<Constituent>');\n        \n        if (isSenateFormat) {\n            // Senate-specific validation\n            const senateRequiredElements = [\n                '<CWC>',\n                '<DeliveryId>',\n                '<DeliveryAgent>',\n                '<Constituent>',\n                '<Message>',\n                '<OfficeCode>'\n            ];\n            \n            senateRequiredElements.forEach(element => {\n                if (!xml.includes(element)) {\n                    errors.push(`Missing required Senate element: ${element}`);\n                }\n            });\n        } else {\n            // House-specific validation\n            const houseRequiredElements = [\n                '<CWC version=\"2.0\"',\n                '<MessageId>',\n                '<DeliveryAgent>',\n                '<OfficeCode>',\n                '<ConstituentData>',\n                '<MessageData>'\n            ];\n            \n            houseRequiredElements.forEach(element => {\n                if (!xml.includes(element)) {\n                    errors.push(`Missing required House element: ${element}`);\n                }\n            });\n        }\n        \n        return {\n            valid: errors.length === 0,\n            errors\n        };\n    }\n    \n    /**\n     * Determine delivery method based on template configuration\n     */\n    static getDeliveryMethod(template: Template, targetRep: UserRepresentative): 'cwc' | 'email' | 'hybrid' {\n        // Check template delivery configuration\n        const deliveryConfig = template.delivery_config as Record<string, unknown>;\n        \n        if (deliveryConfig?.method === 'direct_email') {\n            return 'email';\n        }\n        \n        if (deliveryConfig?.method === 'cwc_only') {\n            return 'cwc';\n        }\n        \n        if (deliveryConfig?.method === 'hybrid') {\n            return 'hybrid';\n        }\n        \n        // Default: Use CWC for congressional offices\n        return 'cwc';\n    }\n    \n    /**\n     * Preview XML without sensitive data (for testing/debugging)\n     */\n    static generatePreviewXML(template: Template): string {\n        const mockUser: User = {\n            id: 'preview-user',\n            name: 'Jane Doe',\n            email: 'jane.doe@example.com',\n            phone: '+1-555-123-4567',\n            address: {\n                street: '123 Main Street',\n                city: 'San Francisco',\n                state: 'CA',\n                zip: '94102'\n            },\n            representatives: {\n                house: {\n                    bioguideId: 'P000197',\n                    name: 'Nancy Pelosi',\n                    party: 'Democratic',\n                    state: 'CA',\n                    district: '11',\n                    chamber: 'house',\n                    officeCode: 'P000197'\n                },\n                senate: [\n                    {\n                        bioguideId: 'F000062',\n                        name: 'Dianne Feinstein',\n                        party: 'Democratic',\n                        state: 'CA',\n                        district: '00',\n                        chamber: 'senate',\n                        officeCode: 'F000062'\n                    },\n                    {\n                        bioguideId: 'P000145',\n                        name: 'Alex Padilla',\n                        party: 'Democratic',\n                        state: 'CA',\n                        district: '00',\n                        chamber: 'senate',\n                        officeCode: 'P000145'\n                    }\n                ]\n            }\n        };\n        \n        return this.generateUserAdvocacyXML({\n            template,\n            user: mockUser,\n            targetRep: mockUser.representatives.house\n        });\n    }\n} "],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b939f7eccf4f720a3c282cd31844eb35a8777c63"},"/Users/noot/Documents/communique/src/lib/congress/cwc-client.ts":{"path":"/Users/noot/Documents/communique/src/lib/congress/cwc-client.ts","statementMap":{"0":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"1":{"start":{"line":7,"column":4},"end":{"line":7,"column":84}},"2":{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},"3":{"start":{"line":9,"column":6},"end":{"line":9,"column":95}},"4":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"5":{"start":{"line":17,"column":6},"end":{"line":17,"column":64}},"6":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"7":{"start":{"line":20,"column":6},"end":{"line":20,"column":60}},"8":{"start":{"line":22,"column":4},"end":{"line":80,"column":5}},"9":{"start":{"line":23,"column":25},"end":{"line":40,"column":7}},"10":{"start":{"line":41,"column":21},"end":{"line":41,"column":69}},"11":{"start":{"line":42,"column":25},"end":{"line":42,"column":57}},"12":{"start":{"line":43,"column":6},"end":{"line":52,"column":7}},"13":{"start":{"line":44,"column":8},"end":{"line":44,"column":71}},"14":{"start":{"line":45,"column":8},"end":{"line":51,"column":10}},"15":{"start":{"line":53,"column":23},"end":{"line":53,"column":80}},"16":{"start":{"line":54,"column":23},"end":{"line":61,"column":8}},"17":{"start":{"line":62,"column":21},"end":{"line":62,"column":64}},"18":{"start":{"line":63,"column":6},"end":{"line":69,"column":9}},"19":{"start":{"line":70,"column":6},"end":{"line":70,"column":20}},"20":{"start":{"line":72,"column":6},"end":{"line":72,"column":59}},"21":{"start":{"line":73,"column":6},"end":{"line":79,"column":8}},"22":{"start":{"line":87,"column":4},"end":{"line":89,"column":5}},"23":{"start":{"line":88,"column":6},"end":{"line":88,"column":63}},"24":{"start":{"line":90,"column":4},"end":{"line":94,"column":7}},"25":{"start":{"line":95,"column":4},"end":{"line":102,"column":6}},"26":{"start":{"line":108,"column":20},"end":{"line":108,"column":22}},"27":{"start":{"line":109,"column":4},"end":{"line":129,"column":5}},"28":{"start":{"line":110,"column":6},"end":{"line":128,"column":7}},"29":{"start":{"line":112,"column":8},"end":{"line":116,"column":9}},"30":{"start":{"line":113,"column":10},"end":{"line":113,"column":87}},"31":{"start":{"line":115,"column":10},"end":{"line":115,"column":86}},"32":{"start":{"line":117,"column":8},"end":{"line":117,"column":29}},"33":{"start":{"line":118,"column":8},"end":{"line":118,"column":30}},"34":{"start":{"line":120,"column":8},"end":{"line":120,"column":65}},"35":{"start":{"line":121,"column":8},"end":{"line":127,"column":11}},"36":{"start":{"line":130,"column":4},"end":{"line":130,"column":19}},"37":{"start":{"line":136,"column":22},"end":{"line":136,"column":64}},"38":{"start":{"line":137,"column":23},"end":{"line":140,"column":5}},"39":{"start":{"line":141,"column":4},"end":{"line":177,"column":5}},"40":{"start":{"line":142,"column":6},"end":{"line":151,"column":7}},"41":{"start":{"line":143,"column":26},"end":{"line":143,"column":47}},"42":{"start":{"line":144,"column":8},"end":{"line":144,"column":72}},"43":{"start":{"line":145,"column":8},"end":{"line":150,"column":10}},"44":{"start":{"line":152,"column":26},"end":{"line":152,"column":62}},"45":{"start":{"line":154,"column":6},"end":{"line":158,"column":7}},"46":{"start":{"line":155,"column":8},"end":{"line":155,"column":44}},"47":{"start":{"line":157,"column":8},"end":{"line":157,"column":53}},"48":{"start":{"line":159,"column":22},"end":{"line":159,"column":72}},"49":{"start":{"line":160,"column":24},"end":{"line":160,"column":88}},"50":{"start":{"line":161,"column":21},"end":{"line":161,"column":78}},"51":{"start":{"line":162,"column":6},"end":{"line":168,"column":8}},"52":{"start":{"line":170,"column":6},"end":{"line":170,"column":60}},"53":{"start":{"line":171,"column":6},"end":{"line":176,"column":8}},"54":{"start":{"line":183,"column":4},"end":{"line":190,"column":6}},"55":{"start":{"line":196,"column":4},"end":{"line":196,"column":61}},"56":{"start":{"line":196,"column":36},"end":{"line":196,"column":59}},"57":{"start":{"line":203,"column":4},"end":{"line":205,"column":5}},"58":{"start":{"line":204,"column":6},"end":{"line":204,"column":64}},"59":{"start":{"line":206,"column":4},"end":{"line":228,"column":5}},"60":{"start":{"line":207,"column":23},"end":{"line":207,"column":90}},"61":{"start":{"line":208,"column":6},"end":{"line":213,"column":7}},"62":{"start":{"line":209,"column":8},"end":{"line":212,"column":10}},"63":{"start":{"line":214,"column":22},"end":{"line":214,"column":43}},"64":{"start":{"line":215,"column":6},"end":{"line":218,"column":9}},"65":{"start":{"line":219,"column":6},"end":{"line":222,"column":8}},"66":{"start":{"line":224,"column":6},"end":{"line":227,"column":8}},"67":{"start":{"line":234,"column":4},"end":{"line":236,"column":5}},"68":{"start":{"line":235,"column":6},"end":{"line":235,"column":66}},"69":{"start":{"line":237,"column":4},"end":{"line":248,"column":5}},"70":{"start":{"line":238,"column":21},"end":{"line":238,"column":50}},"71":{"start":{"line":239,"column":6},"end":{"line":242,"column":8}},"72":{"start":{"line":244,"column":6},"end":{"line":247,"column":8}},"73":{"start":{"line":251,"column":25},"end":{"line":251,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":2},"end":{"line":5,"column":3}},"loc":{"start":{"line":5,"column":16},"end":{"line":11,"column":3}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":2},"end":{"line":15,"column":3}},"loc":{"start":{"line":15,"column":69},"end":{"line":81,"column":3}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":86,"column":2},"end":{"line":86,"column":3}},"loc":{"start":{"line":86,"column":75},"end":{"line":103,"column":3}},"line":86},"3":{"name":"(anonymous_3)","decl":{"start":{"line":107,"column":2},"end":{"line":107,"column":3}},"loc":{"start":{"line":107,"column":89},"end":{"line":131,"column":3}},"line":107},"4":{"name":"(anonymous_4)","decl":{"start":{"line":135,"column":2},"end":{"line":135,"column":3}},"loc":{"start":{"line":135,"column":40},"end":{"line":178,"column":3}},"line":135},"5":{"name":"(anonymous_5)","decl":{"start":{"line":182,"column":2},"end":{"line":182,"column":3}},"loc":{"start":{"line":182,"column":37},"end":{"line":191,"column":3}},"line":182},"6":{"name":"(anonymous_6)","decl":{"start":{"line":195,"column":2},"end":{"line":195,"column":3}},"loc":{"start":{"line":195,"column":12},"end":{"line":197,"column":3}},"line":195},"7":{"name":"(anonymous_7)","decl":{"start":{"line":196,"column":23},"end":{"line":196,"column":24}},"loc":{"start":{"line":196,"column":36},"end":{"line":196,"column":59}},"line":196},"8":{"name":"(anonymous_8)","decl":{"start":{"line":202,"column":2},"end":{"line":202,"column":3}},"loc":{"start":{"line":202,"column":27},"end":{"line":229,"column":3}},"line":202},"9":{"name":"(anonymous_9)","decl":{"start":{"line":233,"column":2},"end":{"line":233,"column":3}},"loc":{"start":{"line":233,"column":25},"end":{"line":249,"column":3}},"line":233}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":18},"end":{"line":6,"column":47}},"type":"binary-expr","locations":[{"start":{"line":6,"column":18},"end":{"line":6,"column":41}},{"start":{"line":6,"column":45},"end":{"line":6,"column":47}}],"line":6},"1":{"loc":{"start":{"line":7,"column":19},"end":{"line":7,"column":83}},"type":"binary-expr","locations":[{"start":{"line":7,"column":19},"end":{"line":7,"column":47}},{"start":{"line":7,"column":51},"end":{"line":7,"column":83}}],"line":7},"2":{"loc":{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},{"start":{},"end":{}}],"line":8},"3":{"loc":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},{"start":{},"end":{}}],"line":16},"4":{"loc":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},{"start":{},"end":{}}],"line":19},"5":{"loc":{"start":{"line":28,"column":20},"end":{"line":28,"column":37}},"type":"binary-expr","locations":[{"start":{"line":28,"column":20},"end":{"line":28,"column":31}},{"start":{"line":28,"column":35},"end":{"line":28,"column":37}}],"line":28},"6":{"loc":{"start":{"line":29,"column":18},"end":{"line":29,"column":33}},"type":"binary-expr","locations":[{"start":{"line":29,"column":18},"end":{"line":29,"column":27}},{"start":{"line":29,"column":31},"end":{"line":29,"column":33}}],"line":29},"7":{"loc":{"start":{"line":30,"column":19},"end":{"line":30,"column":35}},"type":"binary-expr","locations":[{"start":{"line":30,"column":19},"end":{"line":30,"column":29}},{"start":{"line":30,"column":33},"end":{"line":30,"column":35}}],"line":30},"8":{"loc":{"start":{"line":31,"column":17},"end":{"line":31,"column":31}},"type":"binary-expr","locations":[{"start":{"line":31,"column":17},"end":{"line":31,"column":25}},{"start":{"line":31,"column":29},"end":{"line":31,"column":31}}],"line":31},"9":{"loc":{"start":{"line":43,"column":6},"end":{"line":52,"column":7}},"type":"if","locations":[{"start":{"line":43,"column":6},"end":{"line":52,"column":7}},{"start":{},"end":{}}],"line":43},"10":{"loc":{"start":{"line":78,"column":15},"end":{"line":78,"column":71}},"type":"cond-expr","locations":[{"start":{"line":78,"column":40},"end":{"line":78,"column":53}},{"start":{"line":78,"column":56},"end":{"line":78,"column":71}}],"line":78},"11":{"loc":{"start":{"line":87,"column":4},"end":{"line":89,"column":5}},"type":"if","locations":[{"start":{"line":87,"column":4},"end":{"line":89,"column":5}},{"start":{},"end":{}}],"line":87},"12":{"loc":{"start":{"line":112,"column":8},"end":{"line":116,"column":9}},"type":"if","locations":[{"start":{"line":112,"column":8},"end":{"line":116,"column":9}},{"start":{"line":114,"column":15},"end":{"line":116,"column":9}}],"line":112},"13":{"loc":{"start":{"line":126,"column":17},"end":{"line":126,"column":73}},"type":"cond-expr","locations":[{"start":{"line":126,"column":42},"end":{"line":126,"column":55}},{"start":{"line":126,"column":58},"end":{"line":126,"column":73}}],"line":126},"14":{"loc":{"start":{"line":142,"column":6},"end":{"line":151,"column":7}},"type":"if","locations":[{"start":{"line":142,"column":6},"end":{"line":151,"column":7}},{"start":{},"end":{}}],"line":142},"15":{"loc":{"start":{"line":154,"column":6},"end":{"line":158,"column":7}},"type":"if","locations":[{"start":{"line":154,"column":6},"end":{"line":158,"column":7}},{"start":{"line":156,"column":13},"end":{"line":158,"column":7}}],"line":154},"16":{"loc":{"start":{"line":159,"column":22},"end":{"line":159,"column":72}},"type":"binary-expr","locations":[{"start":{"line":159,"column":22},"end":{"line":159,"column":45}},{"start":{"line":159,"column":49},"end":{"line":159,"column":72}}],"line":159},"17":{"loc":{"start":{"line":160,"column":24},"end":{"line":160,"column":88}},"type":"binary-expr","locations":[{"start":{"line":160,"column":24},"end":{"line":160,"column":46}},{"start":{"line":160,"column":50},"end":{"line":160,"column":65}},{"start":{"line":160,"column":69},"end":{"line":160,"column":88}}],"line":160},"18":{"loc":{"start":{"line":161,"column":21},"end":{"line":161,"column":78}},"type":"binary-expr","locations":[{"start":{"line":161,"column":21},"end":{"line":161,"column":40}},{"start":{"line":161,"column":45},"end":{"line":161,"column":77}}],"line":161},"19":{"loc":{"start":{"line":161,"column":45},"end":{"line":161,"column":77}},"type":"cond-expr","locations":[{"start":{"line":161,"column":55},"end":{"line":161,"column":66}},{"start":{"line":161,"column":69},"end":{"line":161,"column":77}}],"line":161},"20":{"loc":{"start":{"line":203,"column":4},"end":{"line":205,"column":5}},"type":"if","locations":[{"start":{"line":203,"column":4},"end":{"line":205,"column":5}},{"start":{},"end":{}}],"line":203},"21":{"loc":{"start":{"line":208,"column":6},"end":{"line":213,"column":7}},"type":"if","locations":[{"start":{"line":208,"column":6},"end":{"line":213,"column":7}},{"start":{},"end":{}}],"line":208},"22":{"loc":{"start":{"line":216,"column":15},"end":{"line":216,"column":66}},"type":"cond-expr","locations":[{"start":{"line":216,"column":40},"end":{"line":216,"column":54}},{"start":{"line":216,"column":57},"end":{"line":216,"column":66}}],"line":216},"23":{"loc":{"start":{"line":221,"column":17},"end":{"line":221,"column":61}},"type":"cond-expr","locations":[{"start":{"line":221,"column":42},"end":{"line":221,"column":49}},{"start":{"line":221,"column":52},"end":{"line":221,"column":61}}],"line":221},"24":{"loc":{"start":{"line":226,"column":15},"end":{"line":226,"column":84}},"type":"cond-expr","locations":[{"start":{"line":226,"column":40},"end":{"line":226,"column":53}},{"start":{"line":226,"column":56},"end":{"line":226,"column":84}}],"line":226},"25":{"loc":{"start":{"line":234,"column":4},"end":{"line":236,"column":5}},"type":"if","locations":[{"start":{"line":234,"column":4},"end":{"line":236,"column":5}},{"start":{},"end":{}}],"line":234},"26":{"loc":{"start":{"line":246,"column":15},"end":{"line":246,"column":75}},"type":"cond-expr","locations":[{"start":{"line":246,"column":40},"end":{"line":246,"column":53}},{"start":{"line":246,"column":56},"end":{"line":246,"column":75}}],"line":246}},"s":{"0":10,"1":10,"2":10,"3":10,"4":5,"5":1,"6":4,"7":4,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":3,"23":1,"24":2,"25":2,"26":1,"27":1,"28":2,"29":2,"30":1,"31":1,"32":2,"33":2,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":4,"55":2,"56":2,"57":1,"58":1,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":1,"68":1,"69":0,"70":0,"71":0,"72":0,"73":1},"f":{"0":10,"1":5,"2":3,"3":1,"4":0,"5":4,"6":2,"7":2,"8":1,"9":1},"b":{"0":[10,10],"1":[10,10],"2":[10,0],"3":[1,4],"4":[4,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[1,2],"12":[1,1],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0],"18":[0,0],"19":[0,0],"20":[1,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[1,0],"26":[0,0]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/lib/congress/cwc-client.ts"],"sourcesContent":["/**\n * CWC (Communicating With Congress) API Client\n * \n * Handles submission of citizen messages to congressional offices\n * via the official CWC system.\n * \n * Senate: Direct API access with API key\n * House: Requires proxy server with whitelisted IPs (not implemented)\n */\n\nimport { CWCGenerator } from './cwc-generator';\nimport type { Template } from '$lib/types/template';\n\ninterface CongressionalOffice {\n\tbioguideId: string;\n\tname: string;\n\tchamber: 'house' | 'senate';\n\tofficeCode: string;\n\tstate: string;\n\tdistrict: string;\n\tparty: string;\n}\n\ninterface User {\n\tid: string;\n\tname: string;\n\temail: string;\n\tphone?: string;\n\tstreet?: string;\n\tcity?: string;\n\tstate?: string;\n\tzip?: string;\n}\n\ninterface CWCSubmissionResult {\n\tsuccess: boolean;\n\tmessageId?: string;\n\tstatus: 'submitted' | 'queued' | 'failed' | 'rejected';\n\toffice: string;\n\ttimestamp: string;\n\terror?: string;\n\tcwcResponse?: any;\n}\n\nexport class CWCClient {\n\tprivate apiKey: string;\n\tprivate baseUrl: string;\n\t\n\tconstructor() {\n\t\tthis.apiKey = process.env.CWC_API_KEY || '';\n\t\tthis.baseUrl = process.env.CWC_API_BASE_URL || 'https://soapbox.senate.gov/api';\n\t\t\n\t\tif (!this.apiKey) {\n\t\t\tconsole.warn('CWC_API_KEY not configured - congressional submissions will be simulated');\n\t\t}\n\t}\n\n\t/**\n\t * Submit message to Senate office (direct API access)\n\t */\n\tasync submitToSenate(\n\t\ttemplate: Template,\n\t\tuser: User,\n\t\tsenator: CongressionalOffice,\n\t\tpersonalizedMessage: string\n\t): Promise<CWCSubmissionResult> {\n\t\tif (senator.chamber !== 'senate') {\n\t\t\tthrow new Error('This method is only for Senate offices');\n\t\t}\n\n\t\tif (!this.apiKey) {\n\t\t\treturn this.simulateSubmission(senator, 'no_api_key');\n\t\t}\n\n\t\ttry {\n\t\t\t// Generate CWC XML\n\t\t\tconst cwcMessage = {\n\t\t\t\ttemplate,\n\t\t\t\tuser: {\n\t\t\t\t\t...user,\n\t\t\t\t\taddress: {\n\t\t\t\t\t\tstreet: user.street || '',\n\t\t\t\t\t\tcity: user.city || '',\n\t\t\t\t\t\tstate: user.state || '',\n\t\t\t\t\t\tzip: user.zip || ''\n\t\t\t\t\t},\n\t\t\t\t\trepresentatives: {\n\t\t\t\t\t\thouse: {} as any, // Not needed for single senator submission\n\t\t\t\t\t\tsenate: [senator] as any\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttargetRep: senator\n\t\t\t};\n\n\t\t\tconst cwcXml = CWCGenerator.generateUserAdvocacyXML(cwcMessage);\n\n\t\t\t// Validate XML before submission\n\t\t\tconst validation = CWCGenerator.validateXML(cwcXml);\n\t\t\tif (!validation.valid) {\n\t\t\t\tconsole.error('CWC XML validation failed:', validation.errors);\n\t\t\t\treturn {\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tstatus: 'failed',\n\t\t\t\t\toffice: senator.name,\n\t\t\t\t\ttimestamp: new Date().toISOString(),\n\t\t\t\t\terror: `XML validation failed: ${validation.errors.join(', ')}`\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Submit to Senate CWC endpoint (testing for now)\n\t\t\tconst endpoint = `${this.baseUrl}/testing-messages/?apikey=${this.apiKey}`;\n\t\t\t\n\t\t\tconst response = await fetch(endpoint, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/xml',\n\t\t\t\t\t'User-Agent': 'Communique-Advocacy-Platform/1.0'\n\t\t\t\t},\n\t\t\t\tbody: cwcXml\n\t\t\t});\n\n\t\t\tconst result = await this.parseResponse(response, senator);\n\t\t\t\n\t\t\t// Log submission for debugging\n\t\t\tconsole.log('Senate CWC submission:', {\n\t\t\t\toffice: senator.name,\n\t\t\t\tstate: senator.state,\n\t\t\t\tsuccess: result.success,\n\t\t\t\tstatus: result.status,\n\t\t\t\tmessageId: result.messageId\n\t\t\t});\n\n\t\t\treturn result;\n\n\t\t} catch (error) {\n\t\t\tconsole.error('Senate CWC submission error:', error);\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\tstatus: 'failed',\n\t\t\t\toffice: senator.name,\n\t\t\t\ttimestamp: new Date().toISOString(),\n\t\t\t\terror: error instanceof Error ? error.message : 'Unknown error'\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Submit message to House office (requires proxy - not implemented)\n\t * This is a placeholder for future House integration\n\t */\n\tasync submitToHouse(\n\t\ttemplate: Template,\n\t\tuser: User,\n\t\trepresentative: CongressionalOffice,\n\t\tpersonalizedMessage: string\n\t): Promise<CWCSubmissionResult> {\n\t\tif (representative.chamber !== 'house') {\n\t\t\tthrow new Error('This method is only for House offices');\n\t\t}\n\n\t\t// House requires proxy server with whitelisted IPs\n\t\t// For now, simulate the submission\n\t\tconsole.log('House CWC submission (simulated - proxy not implemented):', {\n\t\t\toffice: representative.name,\n\t\t\tdistrict: representative.district,\n\t\t\tstate: representative.state\n\t\t});\n\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t\tstatus: 'queued',\n\t\t\toffice: representative.name,\n\t\t\ttimestamp: new Date().toISOString(),\n\t\t\tmessageId: `HOUSE-SIM-${Date.now()}`,\n\t\t\terror: 'House submissions require proxy server - currently simulated'\n\t\t};\n\t}\n\n\t/**\n\t * Submit to all of a user's representatives\n\t */\n\tasync submitToAllRepresentatives(\n\t\ttemplate: Template,\n\t\tuser: User,\n\t\trepresentatives: CongressionalOffice[],\n\t\tpersonalizedMessage: string\n\t): Promise<CWCSubmissionResult[]> {\n\t\tconst results: CWCSubmissionResult[] = [];\n\n\t\tfor (const rep of representatives) {\n\t\t\ttry {\n\t\t\t\tlet result: CWCSubmissionResult;\n\n\t\t\t\tif (rep.chamber === 'senate') {\n\t\t\t\t\tresult = await this.submitToSenate(template, user, rep, personalizedMessage);\n\t\t\t\t} else {\n\t\t\t\t\tresult = await this.submitToHouse(template, user, rep, personalizedMessage);\n\t\t\t\t}\n\n\t\t\t\tresults.push(result);\n\n\t\t\t\t// Add delay between submissions to avoid rate limiting\n\t\t\t\tawait this.delay(1000);\n\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Failed to submit to ${rep.name}:`, error);\n\t\t\t\tresults.push({\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tstatus: 'failed',\n\t\t\t\t\toffice: rep.name,\n\t\t\t\t\ttimestamp: new Date().toISOString(),\n\t\t\t\t\terror: error instanceof Error ? error.message : 'Unknown error'\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Parse CWC API response\n\t */\n\tprivate async parseResponse(response: Response, office: CongressionalOffice): Promise<CWCSubmissionResult> {\n\t\tconst timestamp = new Date().toISOString();\n\t\tconst baseResult = {\n\t\t\toffice: office.name,\n\t\t\ttimestamp\n\t\t};\n\n\t\ttry {\n\t\t\tif (!response.ok) {\n\t\t\t\tconst errorText = await response.text();\n\t\t\t\tconsole.error(`CWC API error (${response.status}):`, errorText);\n\n\t\t\t\treturn {\n\t\t\t\t\t...baseResult,\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tstatus: 'failed' as const,\n\t\t\t\t\terror: `HTTP ${response.status}: ${errorText}`\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Try to parse JSON response\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tlet cwcResponse: any;\n\n\t\t\tif (contentType?.includes('application/json')) {\n\t\t\t\tcwcResponse = await response.json();\n\t\t\t} else {\n\t\t\t\tcwcResponse = { raw: await response.text() };\n\t\t\t}\n\n\t\t\t// Determine success based on response\n\t\t\tconst success = response.status === 200 || response.status === 202;\n\t\t\tconst messageId = cwcResponse?.messageId || cwcResponse?.id || `CWC-${Date.now()}`;\n\t\t\tconst status = cwcResponse?.status || (success ? 'submitted' : 'failed');\n\n\t\t\treturn {\n\t\t\t\t...baseResult,\n\t\t\t\tsuccess,\n\t\t\t\tstatus: status as CWCSubmissionResult['status'],\n\t\t\t\tmessageId,\n\t\t\t\tcwcResponse\n\t\t\t};\n\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to parse CWC response:', error);\n\t\t\treturn {\n\t\t\t\t...baseResult,\n\t\t\t\tsuccess: false,\n\t\t\t\tstatus: 'failed',\n\t\t\t\terror: 'Failed to parse CWC response'\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Simulate submission when API key is not available\n\t */\n\tprivate simulateSubmission(office: CongressionalOffice, reason: string): CWCSubmissionResult {\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t\tstatus: 'queued',\n\t\t\toffice: office.name,\n\t\t\ttimestamp: new Date().toISOString(),\n\t\t\tmessageId: `SIM-${Date.now()}`,\n\t\t\terror: `Simulated submission: ${reason}`\n\t\t};\n\t}\n\n\t/**\n\t * Add delay between API calls\n\t */\n\tprivate delay(ms: number): Promise<void> {\n\t\treturn new Promise(resolve => setTimeout(resolve, ms));\n\t}\n\n\t/**\n\t * Get list of active Senate offices\n\t * This should be called regularly to ensure we only send to participating offices\n\t */\n\tasync getActiveOffices(): Promise<{ success: boolean; offices?: any[]; error?: string }> {\n\t\tif (!this.apiKey) {\n\t\t\treturn { success: false, error: 'No API key configured' };\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await fetch(`${this.baseUrl}/active_offices?apikey=${this.apiKey}`);\n\t\t\t\n\t\t\tif (!response.ok) {\n\t\t\t\treturn {\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\terror: `HTTP ${response.status}: ${await response.text()}`\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst offices = await response.json();\n\t\t\t\n\t\t\tconsole.log('Active Senate offices retrieved:', {\n\t\t\t\tcount: Array.isArray(offices) ? offices.length : 'unknown',\n\t\t\t\ttimestamp: new Date().toISOString()\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tsuccess: true,\n\t\t\t\toffices: Array.isArray(offices) ? offices : [offices]\n\t\t\t};\n\n\t\t} catch (error) {\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\terror: error instanceof Error ? error.message : 'Failed to retrieve offices'\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Test connectivity to CWC API\n\t */\n\tasync testConnection(): Promise<{ connected: boolean; error?: string }> {\n\t\tif (!this.apiKey) {\n\t\t\treturn { connected: false, error: 'No API key configured' };\n\t\t}\n\n\t\ttry {\n\t\t\t// Test connection by getting active offices\n\t\t\tconst result = await this.getActiveOffices();\n\t\t\treturn {\n\t\t\t\tconnected: result.success,\n\t\t\t\terror: result.error\n\t\t\t};\n\n\t\t} catch (error) {\n\t\t\treturn {\n\t\t\t\tconnected: false,\n\t\t\t\terror: error instanceof Error ? error.message : 'Connection failed'\n\t\t\t};\n\t\t}\n\t}\n}\n\n// Singleton instance\nexport const cwcClient = new CWCClient();"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"17a65654b5ac267ef2c49f00a3afa2ba56d18d39"}}