{"/Users/noot/Documents/communique/src/routes/api/user/address/+server.ts":{"path":"/Users/noot/Documents/communique/src/routes/api/user/address/+server.ts","statementMap":{"0":{"start":{"line":4,"column":2},"end":{"line":82,"column":3}},"1":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"2":{"start":{"line":6,"column":6},"end":{"line":6,"column":62}},"3":{"start":{"line":8,"column":81},"end":{"line":8,"column":101}},"4":{"start":{"line":9,"column":28},"end":{"line":9,"column":72}},"5":{"start":{"line":10,"column":4},"end":{"line":16,"column":5}},"6":{"start":{"line":11,"column":6},"end":{"line":11,"column":64}},"7":{"start":{"line":12,"column":11},"end":{"line":16,"column":5}},"8":{"start":{"line":13,"column":6},"end":{"line":13,"column":54}},"9":{"start":{"line":15,"column":6},"end":{"line":15,"column":81}},"10":{"start":{"line":17,"column":24},"end":{"line":26,"column":6}},"11":{"start":{"line":27,"column":4},"end":{"line":66,"column":5}},"12":{"start":{"line":28,"column":6},"end":{"line":30,"column":9}},"13":{"start":{"line":31,"column":6},"end":{"line":65,"column":7}},"14":{"start":{"line":32,"column":28},"end":{"line":38,"column":10}},"15":{"start":{"line":40,"column":8},"end":{"line":58,"column":9}},"16":{"start":{"line":41,"column":10},"end":{"line":41,"column":44}},"17":{"start":{"line":43,"column":25},"end":{"line":56,"column":12}},"18":{"start":{"line":57,"column":10},"end":{"line":57,"column":39}},"19":{"start":{"line":59,"column":8},"end":{"line":64,"column":11}},"20":{"start":{"line":67,"column":4},"end":{"line":77,"column":7}},"21":{"start":{"line":79,"column":4},"end":{"line":81,"column":24}},"22":{"start":{"line":85,"column":16},"end":{"line":85,"column":61}},"23":{"start":{"line":85,"column":49},"end":{"line":85,"column":60}},"24":{"start":{"line":86,"column":2},"end":{"line":99,"column":3}},"25":{"start":{"line":87,"column":19},"end":{"line":87,"column":27}},"26":{"start":{"line":88,"column":17},"end":{"line":88,"column":25}},"27":{"start":{"line":89,"column":21},"end":{"line":89,"column":29}},"28":{"start":{"line":90,"column":26},"end":{"line":90,"column":75}},"29":{"start":{"line":91,"column":4},"end":{"line":98,"column":5}},"30":{"start":{"line":92,"column":6},"end":{"line":97,"column":8}},"31":{"start":{"line":100,"column":2},"end":{"line":105,"column":4}}},"fnMap":{"0":{"name":"POST","decl":{"start":{"line":3,"column":22},"end":{"line":3,"column":26}},"loc":{"start":{"line":3,"column":48},"end":{"line":83,"column":1}},"line":3},"1":{"name":"parseAddressString","decl":{"start":{"line":84,"column":9},"end":{"line":84,"column":27}},"loc":{"start":{"line":84,"column":37},"end":{"line":106,"column":1}},"line":84},"2":{"name":"(anonymous_2)","decl":{"start":{"line":85,"column":39},"end":{"line":85,"column":40}},"loc":{"start":{"line":85,"column":49},"end":{"line":85,"column":60}},"line":85}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{},"end":{}}],"line":5},"1":{"loc":{"start":{"line":10,"column":4},"end":{"line":16,"column":5}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":16,"column":5}},{"start":{"line":12,"column":11},"end":{"line":16,"column":5}}],"line":10},"2":{"loc":{"start":{"line":10,"column":8},"end":{"line":10,"column":42}},"type":"binary-expr","locations":[{"start":{"line":10,"column":8},"end":{"line":10,"column":14}},{"start":{"line":10,"column":18},"end":{"line":10,"column":22}},{"start":{"line":10,"column":26},"end":{"line":10,"column":31}},{"start":{"line":10,"column":35},"end":{"line":10,"column":42}}],"line":10},"3":{"loc":{"start":{"line":12,"column":11},"end":{"line":16,"column":5}},"type":"if","locations":[{"start":{"line":12,"column":11},"end":{"line":16,"column":5}},{"start":{"line":14,"column":11},"end":{"line":16,"column":5}}],"line":12},"4":{"loc":{"start":{"line":27,"column":4},"end":{"line":66,"column":5}},"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":66,"column":5}},{"start":{},"end":{}}],"line":27},"5":{"loc":{"start":{"line":27,"column":8},"end":{"line":27,"column":53}},"type":"binary-expr","locations":[{"start":{"line":27,"column":8},"end":{"line":27,"column":23}},{"start":{"line":27,"column":27},"end":{"line":27,"column":53}}],"line":27},"6":{"loc":{"start":{"line":40,"column":8},"end":{"line":58,"column":9}},"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":58,"column":9}},{"start":{"line":42,"column":15},"end":{"line":58,"column":9}}],"line":40},"7":{"loc":{"start":{"line":51,"column":21},"end":{"line":51,"column":36}},"type":"binary-expr","locations":[{"start":{"line":51,"column":21},"end":{"line":51,"column":30}},{"start":{"line":51,"column":34},"end":{"line":51,"column":36}}],"line":51},"8":{"loc":{"start":{"line":52,"column":21},"end":{"line":52,"column":36}},"type":"binary-expr","locations":[{"start":{"line":52,"column":21},"end":{"line":52,"column":30}},{"start":{"line":52,"column":34},"end":{"line":52,"column":36}}],"line":52},"9":{"loc":{"start":{"line":53,"column":22},"end":{"line":53,"column":38}},"type":"binary-expr","locations":[{"start":{"line":53,"column":22},"end":{"line":53,"column":32}},{"start":{"line":53,"column":36},"end":{"line":53,"column":38}}],"line":53},"10":{"loc":{"start":{"line":86,"column":2},"end":{"line":99,"column":3}},"type":"if","locations":[{"start":{"line":86,"column":2},"end":{"line":99,"column":3}},{"start":{},"end":{}}],"line":86},"11":{"loc":{"start":{"line":91,"column":4},"end":{"line":98,"column":5}},"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":98,"column":5}},{"start":{},"end":{}}],"line":91}},"s":{"0":14,"1":14,"2":1,"3":13,"4":12,"5":12,"6":8,"7":4,"8":3,"9":1,"10":11,"11":10,"12":3,"13":3,"14":4,"15":4,"16":1,"17":3,"18":2,"19":3,"20":9,"21":3,"22":3,"23":7,"24":3,"25":2,"26":2,"27":2,"28":2,"29":2,"30":2,"31":1},"f":{"0":14,"1":3,"2":7},"b":{"0":[1,13],"1":[8,4],"2":[12,8,8,8],"3":[3,1],"4":[3,7],"5":[10,4],"6":[1,3],"7":[3,1],"8":[3,1],"9":[3,1],"10":[2,1],"11":[2,0]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/routes/api/user/address/+server.ts"],"sourcesContent":["import { json } from '@sveltejs/kit';\nimport { db } from '$lib/server/db';\n\nexport async function POST({ request, locals }) {\n\ttry {\n\t\t// Ensure user is authenticated\n\t\tif (!locals.user) {\n\t\t\treturn json({ error: 'Unauthorized' }, { status: 401 });\n\t\t}\n\t\t\n\t\tconst { address, verified, representatives, street, city, state, zipCode } = await request.json();\n\t\t\n\t\t// Address can be provided as a single string or as separate components\n\t\tlet addressComponents = { street: '', city: '', state: '', zip: '' };\n\t\t\n\t\tif (street && city && state && zipCode) {\n\t\t\t// Separate components provided\n\t\t\taddressComponents = { street, city, state, zip: zipCode };\n\t\t} else if (address) {\n\t\t\t// Parse full address string into components\n\t\t\taddressComponents = parseAddressString(address);\n\t\t} else {\n\t\t\treturn json({ error: 'Address information is required' }, { status: 400 });\n\t\t}\n\t\t\n\t\t// Update user with address components\n\t\tconst updatedUser = await db.user.update({\n\t\t\twhere: { id: locals.user.id },\n\t\t\tdata: {\n\t\t\t\tstreet: addressComponents.street,\n\t\t\t\tcity: addressComponents.city,\n\t\t\t\tstate: addressComponents.state,\n\t\t\t\tzip: addressComponents.zip,\n\t\t\t\tupdatedAt: new Date()\n\t\t\t}\n\t\t});\n\t\t\n\t\t// If representatives were found, store them for this user\n\t\tif (representatives && representatives.length > 0) {\n\t\t\t// First, clear any existing representatives for this user\n\t\t\tawait db.user_representatives.deleteMany({\n\t\t\t\twhere: { user_id: locals.user.id }\n\t\t\t});\n\t\t\t\n\t\t\t// Store new representatives\n\t\t\tfor (const rep of representatives) {\n\t\t\t\t// First, ensure the representative exists in the database\n\t\t\t\tconst existingRep = await db.representative.findFirst({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tname: rep.name,\n\t\t\t\t\t\tstate: rep.state,\n\t\t\t\t\t\tchamber: rep.chamber\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tlet representativeId;\n\t\t\t\t\n\t\t\t\tif (existingRep) {\n\t\t\t\t\trepresentativeId = existingRep.id;\n\t\t\t\t} else {\n\t\t\t\t\t// Create new representative record\n\t\t\t\t\tconst newRep = await db.representative.create({\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tname: rep.name,\n\t\t\t\t\t\t\tstate: rep.state,\n\t\t\t\t\t\t\tdistrict: rep.district,\n\t\t\t\t\t\t\tchamber: rep.chamber,\n\t\t\t\t\t\t\tparty: 'Unknown', // Would be filled from actual API\n\t\t\t\t\t\t\temail: rep.email || '',\n\t\t\t\t\t\t\tphone: rep.phone || '',\n\t\t\t\t\t\t\toffice: rep.office || '',\n\t\t\t\t\t\t\twebsite: ''\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\trepresentativeId = newRep.id;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Link representative to user\n\t\t\t\tawait db.user_representatives.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tuser_id: locals.user.id,\n\t\t\t\t\t\trepresentative_id: representativeId\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn json({ \n\t\t\tsuccess: true, \n\t\t\tmessage: 'Address saved successfully',\n\t\t\tuser: {\n\t\t\t\tid: updatedUser.id,\n\t\t\t\tstreet: updatedUser.street,\n\t\t\t\tcity: updatedUser.city,\n\t\t\t\tstate: updatedUser.state,\n\t\t\t\tzip: updatedUser.zip\n\t\t\t}\n\t\t});\n\t\t\n\t} catch (error) {\n\t\treturn json({ \n\t\t\terror: 'Failed to save address' \n\t\t}, { status: 500 });\n\t}\n}\n\nfunction parseAddressString(address: string): { street: string; city: string; state: string; zip: string } {\n\t// Basic address parsing - in production you'd want more robust parsing\n\tconst parts = address.split(',').map(part => part.trim());\n\t\n\tif (parts.length >= 3) {\n\t\tconst street = parts[0];\n\t\tconst city = parts[1];\n\t\tconst stateZip = parts[2];\n\t\t\n\t\t// Extract state and ZIP from \"STATE ZIP\" format\n\t\tconst stateZipMatch = stateZip.match(/^([A-Z]{2})\\s+(\\d{5}(-\\d{4})?)$/);\n\t\tif (stateZipMatch) {\n\t\t\treturn {\n\t\t\t\tstreet,\n\t\t\t\tcity,\n\t\t\t\tstate: stateZipMatch[1],\n\t\t\t\tzip: stateZipMatch[2]\n\t\t\t};\n\t\t}\n\t}\n\t\n\t// Fallback - return the address as street with empty other fields\n\treturn {\n\t\tstreet: address,\n\t\tcity: '',\n\t\tstate: '',\n\t\tzip: ''\n\t};\n}"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9535995b44945163e9160e8f02ec7d12c08df788"}}