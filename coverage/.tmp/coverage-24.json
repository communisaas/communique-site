{"/Users/noot/Documents/communique/src/lib/server/verification-sessions.ts":{"path":"/Users/noot/Documents/communique/src/lib/server/verification-sessions.ts","statementMap":{"0":{"start":{"line":1,"column":52},"end":{"line":1,"column":61}},"1":{"start":{"line":3,"column":21},"end":{"line":3,"column":57}},"2":{"start":{"line":4,"column":2},"end":{"line":8,"column":3}},"3":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"4":{"start":{"line":6,"column":6},"end":{"line":6,"column":39}}},"fnMap":{"0":{"name":"cleanupOldSessions","decl":{"start":{"line":2,"column":16},"end":{"line":2,"column":34}},"loc":{"start":{"line":2,"column":37},"end":{"line":9,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{},"end":{}}],"line":5}},"s":{"0":1,"1":1,"2":1,"3":1,"4":0},"f":{"0":1},"b":{"0":[0,1]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/lib/server/verification-sessions.ts"],"sourcesContent":["// Shared verification session storage\n// In production, this would be Redis/Database\n\ninterface VerificationSession {\n\tuserId: string;\n\ttemplateSlug: string;\n\tdisclosures: Record<string, any>;\n\tqrCodeData: string;\n\tstatus: 'pending' | 'verified' | 'failed';\n\tcredentialSubject?: any;\n\tcreatedAt: Date;\n}\n\n// In-memory storage for verification sessions (use Redis/DB in production)\nexport const verificationSessions = new Map<string, VerificationSession>();\n\n// Cleanup function to remove old sessions\nexport function cleanupOldSessions() {\n\tconst oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n\tfor (const [key, session] of verificationSessions.entries()) {\n\t\tif (session.createdAt < oneHourAgo) {\n\t\t\tverificationSessions.delete(key);\n\t\t}\n\t}\n}\n\nexport type { VerificationSession };"],"mappings":"AAcO,aAAM,uBAAuB,oBAAI,IAAiC;AAGlE,gBAAS,qBAAqB;AACpC,QAAM,aAAa,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,GAAI;AACvD,aAAW,CAAC,KAAK,OAAO,KAAK,qBAAqB,QAAQ,GAAG;AAC5D,QAAI,QAAQ,YAAY,YAAY;AACnC,2BAAqB,OAAO,GAAG;AAAA,IAChC;AAAA,EACD;AACD;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0a3161897151a7816fa355e7470f3b703aad6ce8"},"/Users/noot/Documents/communique/src/routes/api/identity/init/+server.ts":{"path":"/Users/noot/Documents/communique/src/routes/api/identity/init/+server.ts","statementMap":{"0":{"start":{"line":4,"column":20},"end":{"line":62,"column":1}},"1":{"start":{"line":5,"column":2},"end":{"line":61,"column":3}},"2":{"start":{"line":6,"column":66},"end":{"line":6,"column":86}},"3":{"start":{"line":7,"column":4},"end":{"line":12,"column":5}},"4":{"start":{"line":8,"column":6},"end":{"line":11,"column":8}},"5":{"start":{"line":13,"column":22},"end":{"line":13,"column":76}},"6":{"start":{"line":14,"column":4},"end":{"line":19,"column":5}},"7":{"start":{"line":15,"column":6},"end":{"line":18,"column":8}},"8":{"start":{"line":20,"column":24},"end":{"line":25,"column":5}},"9":{"start":{"line":26,"column":23},"end":{"line":26,"column":50}},"10":{"start":{"line":27,"column":4},"end":{"line":34,"column":7}},"11":{"start":{"line":35,"column":4},"end":{"line":35,"column":25}},"12":{"start":{"line":36,"column":4},"end":{"line":41,"column":7}},"13":{"start":{"line":42,"column":4},"end":{"line":47,"column":7}},"14":{"start":{"line":49,"column":4},"end":{"line":49,"column":49}},"15":{"start":{"line":50,"column":4},"end":{"line":56,"column":5}},"16":{"start":{"line":51,"column":6},"end":{"line":55,"column":9}},"17":{"start":{"line":57,"column":4},"end":{"line":60,"column":6}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":20},"end":{"line":4,"column":21}},"loc":{"start":{"line":4,"column":43},"end":{"line":62,"column":1}},"line":4}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":4},"end":{"line":12,"column":5}},"type":"if","locations":[{"start":{"line":7,"column":4},"end":{"line":12,"column":5}},{"start":{},"end":{}}],"line":7},"1":{"loc":{"start":{"line":7,"column":8},"end":{"line":7,"column":32}},"type":"binary-expr","locations":[{"start":{"line":7,"column":8},"end":{"line":7,"column":15}},{"start":{"line":7,"column":19},"end":{"line":7,"column":32}}],"line":7},"2":{"loc":{"start":{"line":14,"column":4},"end":{"line":19,"column":5}},"type":"if","locations":[{"start":{"line":14,"column":4},"end":{"line":19,"column":5}},{"start":{},"end":{}}],"line":14},"3":{"loc":{"start":{"line":23,"column":15},"end":{"line":23,"column":37}},"type":"binary-expr","locations":[{"start":{"line":23,"column":15},"end":{"line":23,"column":32}},{"start":{"line":23,"column":36},"end":{"line":23,"column":37}}],"line":23},"4":{"loc":{"start":{"line":50,"column":4},"end":{"line":56,"column":5}},"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":56,"column":5}},{"start":{},"end":{}}],"line":50}},"s":{"0":1,"1":6,"2":6,"3":6,"4":4,"5":2,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1},"f":{"0":6},"b":{"0":[4,2],"1":[6,4],"2":[1,0],"3":[1,0],"4":[1,0]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/routes/api/identity/init/+server.ts"],"sourcesContent":["import { json } from '@sveltejs/kit';\nimport type { RequestHandler } from './$types';\nimport { SELF_XYZ_CONFIG, createUserConfig } from '$lib/server/selfxyz-config';\nimport { verificationSessions, cleanupOldSessions } from '$lib/server/verification-sessions';\n\nexport const POST: RequestHandler = async ({ request }) => {\n\ttry {\n\t\tconst { userId, templateSlug, requireAddress, disclosures } = await request.json();\n\n\t\tif (!userId || !templateSlug) {\n\t\t\treturn json(\n\t\t\t\t{ success: false, error: 'Missing required fields' },\n\t\t\t\t{ status: 400 }\n\t\t\t);\n\t\t}\n\n\t\t// Generate Self.xyz app configuration with user context\n\t\tconst appConfig = createUserConfig(userId, templateSlug, requireAddress);\n\t\t\n\t\t// Merge any additional disclosures\n\t\tif (disclosures) {\n\t\t\tappConfig.disclosures = {\n\t\t\t\t...appConfig.disclosures,\n\t\t\t\t...disclosures\n\t\t\t};\n\t\t}\n\n\t\t// Create QR code data directly (Self.xyz app format)\n\t\t// This matches the format that SelfAppBuilder.build() would generate\n\t\tconst builtConfig = {\n\t\t\t...appConfig,\n\t\t\tsessionId: userId,\n\t\t\tversion: appConfig.version || 2,\n\t\t\tuserIdType: 'uuid'\n\t\t};\n\t\t\n\t\t// Create QR code data string (the app will read this)\n\t\tconst qrCodeData = JSON.stringify(builtConfig);\n\n\t\t// Store session for polling\n\t\tverificationSessions.set(userId, {\n\t\t\tuserId,\n\t\t\ttemplateSlug,\n\t\t\tdisclosures: appConfig.disclosures,\n\t\t\tqrCodeData,\n\t\t\tstatus: 'pending',\n\t\t\tcreatedAt: new Date()\n\t\t});\n\n\t\t// Clean up old sessions (>1 hour)\n\t\tcleanupOldSessions();\n\n\t\tconsole.log('Self.xyz verification session initialized:', {\n\t\t\tuserId,\n\t\t\ttemplateSlug,\n\t\t\tdisclosures: Object.keys(appConfig.disclosures),\n\t\t\tsessionCount: verificationSessions.size\n\t\t});\n\n\t\treturn json({\n\t\t\tsuccess: true,\n\t\t\tqrCodeData,\n\t\t\tsessionId: userId,\n\t\t\tconfig: appConfig\n\t\t});\n\n\t} catch (error) {\n\t\tconsole.error('Self.xyz init error:', error);\n\t\t\n\t\t// Log detailed error for debugging\n\t\tif (error instanceof Error) {\n\t\t\tconsole.error('Initialization error details:', {\n\t\t\t\tname: error.name,\n\t\t\t\tmessage: error.message,\n\t\t\t\tstack: error.stack?.split('\\n').slice(0, 3)\n\t\t\t});\n\t\t}\n\n\t\treturn json(\n\t\t\t{ success: false, error: 'Failed to initialize Self.xyz verification' },\n\t\t\t{ status: 500 }\n\t\t);\n\t}\n};\n\n// Export the verification sessions for use in other endpoints\n// verificationSessions is internal to this module"],"mappings":"AAAA,SAAS,YAAY;AAErB,SAAS,iBAAiB,wBAAwB;AAClD,SAAS,sBAAsB,0BAA0B;AAElD,aAAM,OAAuB,OAAO,EAAE,QAAQ,MAAM;AAC1D,MAAI;AACH,UAAM,EAAE,QAAQ,cAAc,gBAAgB,YAAY,IAAI,MAAM,QAAQ,KAAK;AAEjF,QAAI,CAAC,UAAU,CAAC,cAAc;AAC7B,aAAO;AAAA,QACN,EAAE,SAAS,OAAO,OAAO,0BAA0B;AAAA,QACnD,EAAE,QAAQ,IAAI;AAAA,MACf;AAAA,IACD;AAGA,UAAM,YAAY,iBAAiB,QAAQ,cAAc,cAAc;AAGvE,QAAI,aAAa;AAChB,gBAAU,cAAc;AAAA,QACvB,GAAG,UAAU;AAAA,QACb,GAAG;AAAA,MACJ;AAAA,IACD;AAIA,UAAM,cAAc;AAAA,MACnB,GAAG;AAAA,MACH,WAAW;AAAA,MACX,SAAS,UAAU,WAAW;AAAA,MAC9B,YAAY;AAAA,IACb;AAGA,UAAM,aAAa,KAAK,UAAU,WAAW;AAG7C,yBAAqB,IAAI,QAAQ;AAAA,MAChC;AAAA,MACA;AAAA,MACA,aAAa,UAAU;AAAA,MACvB;AAAA,MACA,QAAQ;AAAA,MACR,WAAW,oBAAI,KAAK;AAAA,IACrB,CAAC;AAGD,uBAAmB;AAEnB,YAAQ,IAAI,8CAA8C;AAAA,MACzD;AAAA,MACA;AAAA,MACA,aAAa,OAAO,KAAK,UAAU,WAAW;AAAA,MAC9C,cAAc,qBAAqB;AAAA,IACpC,CAAC;AAED,WAAO,KAAK;AAAA,MACX,SAAS;AAAA,MACT;AAAA,MACA,WAAW;AAAA,MACX,QAAQ;AAAA,IACT,CAAC;AAAA,EAEF,SAAS,OAAO;AACf,YAAQ,MAAM,wBAAwB,KAAK;AAG3C,QAAI,iBAAiB,OAAO;AAC3B,cAAQ,MAAM,iCAAiC;AAAA,QAC9C,MAAM,MAAM;AAAA,QACZ,SAAS,MAAM;AAAA,QACf,OAAO,MAAM,OAAO,MAAM,IAAI,EAAE,MAAM,GAAG,CAAC;AAAA,MAC3C,CAAC;AAAA,IACF;AAEA,WAAO;AAAA,MACN,EAAE,SAAS,OAAO,OAAO,6CAA6C;AAAA,MACtE,EAAE,QAAQ,IAAI;AAAA,IACf;AAAA,EACD;AACD;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7576f7ca14a9de5cdfb2d6cf234d4578e38a1c10"}}