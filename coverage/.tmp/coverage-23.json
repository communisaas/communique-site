{"/Users/noot/Documents/communique/src/routes/api/address/verify/+server.ts":{"path":"/Users/noot/Documents/communique/src/routes/api/address/verify/+server.ts","statementMap":{"0":{"start":{"line":4,"column":2},"end":{"line":51,"column":3}},"1":{"start":{"line":5,"column":45},"end":{"line":5,"column":65}},"2":{"start":{"line":6,"column":4},"end":{"line":11,"column":5}},"3":{"start":{"line":7,"column":6},"end":{"line":10,"column":26}},"4":{"start":{"line":12,"column":21},"end":{"line":12,"column":39}},"5":{"start":{"line":13,"column":4},"end":{"line":18,"column":5}},"6":{"start":{"line":14,"column":6},"end":{"line":17,"column":26}},"7":{"start":{"line":19,"column":24},"end":{"line":19,"column":65}},"8":{"start":{"line":20,"column":22},"end":{"line":20,"column":169}},"9":{"start":{"line":21,"column":21},"end":{"line":21,"column":43}},"10":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"11":{"start":{"line":23,"column":6},"end":{"line":23,"column":72}},"12":{"start":{"line":25,"column":23},"end":{"line":25,"column":44}},"13":{"start":{"line":26,"column":4},"end":{"line":31,"column":5}},"14":{"start":{"line":27,"column":6},"end":{"line":30,"column":26}},"15":{"start":{"line":32,"column":18},"end":{"line":32,"column":53}},"16":{"start":{"line":33,"column":29},"end":{"line":33,"column":64}},"17":{"start":{"line":34,"column":21},"end":{"line":34,"column":85}},"18":{"start":{"line":35,"column":28},"end":{"line":35,"column":84}},"19":{"start":{"line":36,"column":4},"end":{"line":44,"column":7}},"20":{"start":{"line":46,"column":4},"end":{"line":46,"column":56}},"21":{"start":{"line":47,"column":4},"end":{"line":50,"column":24}},"22":{"start":{"line":54,"column":2},"end":{"line":66,"column":3}},"23":{"start":{"line":55,"column":35},"end":{"line":55,"column":79}},"24":{"start":{"line":56,"column":4},"end":{"line":62,"column":5}},"25":{"start":{"line":57,"column":17},"end":{"line":57,"column":48}},"26":{"start":{"line":58,"column":6},"end":{"line":60,"column":7}},"27":{"start":{"line":59,"column":8},"end":{"line":59,"column":43}},"28":{"start":{"line":61,"column":6},"end":{"line":61,"column":61}},"29":{"start":{"line":63,"column":4},"end":{"line":63,"column":39}},"30":{"start":{"line":65,"column":4},"end":{"line":65,"column":39}},"31":{"start":{"line":69,"column":2},"end":{"line":91,"column":4}}},"fnMap":{"0":{"name":"POST","decl":{"start":{"line":3,"column":22},"end":{"line":3,"column":26}},"loc":{"start":{"line":3,"column":40},"end":{"line":52,"column":1}},"line":3},"1":{"name":"extractCongressionalDistrictFromCensus","decl":{"start":{"line":53,"column":9},"end":{"line":53,"column":47}},"loc":{"start":{"line":53,"column":68},"end":{"line":67,"column":1}},"line":53},"2":{"name":"createRepresentativesFromDistrict","decl":{"start":{"line":68,"column":9},"end":{"line":68,"column":42}},"loc":{"start":{"line":68,"column":60},"end":{"line":92,"column":1}},"line":68}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":4},"end":{"line":11,"column":5}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":11,"column":5}},{"start":{},"end":{}}],"line":6},"1":{"loc":{"start":{"line":6,"column":8},"end":{"line":6,"column":46}},"type":"binary-expr","locations":[{"start":{"line":6,"column":8},"end":{"line":6,"column":15}},{"start":{"line":6,"column":19},"end":{"line":6,"column":24}},{"start":{"line":6,"column":28},"end":{"line":6,"column":34}},{"start":{"line":6,"column":38},"end":{"line":6,"column":46}}],"line":6},"2":{"loc":{"start":{"line":13,"column":4},"end":{"line":18,"column":5}},"type":"if","locations":[{"start":{"line":13,"column":4},"end":{"line":18,"column":5}},{"start":{},"end":{}}],"line":13},"3":{"loc":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},{"start":{},"end":{}}],"line":22},"4":{"loc":{"start":{"line":26,"column":4},"end":{"line":31,"column":5}},"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":31,"column":5}},{"start":{},"end":{}}],"line":26},"5":{"loc":{"start":{"line":33,"column":29},"end":{"line":33,"column":64}},"type":"binary-expr","locations":[{"start":{"line":33,"column":29},"end":{"line":33,"column":49}},{"start":{"line":33,"column":53},"end":{"line":33,"column":64}}],"line":33},"6":{"loc":{"start":{"line":56,"column":4},"end":{"line":62,"column":5}},"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":62,"column":5}},{"start":{},"end":{}}],"line":56},"7":{"loc":{"start":{"line":56,"column":8},"end":{"line":56,"column":67}},"type":"binary-expr","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":30}},{"start":{"line":56,"column":34},"end":{"line":56,"column":67}}],"line":56},"8":{"loc":{"start":{"line":58,"column":6},"end":{"line":60,"column":7}},"type":"if","locations":[{"start":{"line":58,"column":6},"end":{"line":60,"column":7}},{"start":{},"end":{}}],"line":58}},"s":{"0":7,"1":7,"2":7,"3":1,"4":6,"5":6,"6":1,"7":5,"8":5,"9":5,"10":3,"11":0,"12":3,"13":3,"14":1,"15":2,"16":2,"17":2,"18":2,"19":2,"20":2,"21":2,"22":2,"23":2,"24":2,"25":2,"26":2,"27":1,"28":1,"29":0,"30":0,"31":2},"f":{"0":7,"1":2,"2":2},"b":{"0":[1,6],"1":[7,7,7,7],"2":[1,5],"3":[0,3],"4":[1,2],"5":[2,0],"6":[2,0],"7":[2,2],"8":[1,1]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/routes/api/address/verify/+server.ts"],"sourcesContent":["import { json } from '@sveltejs/kit';\nimport { env } from '$env/dynamic/private';\n\n// Real address verification using Google Civic Information API\nexport async function POST({ request }) {\n\ttry {\n\t\tconst { street, city, state, zipCode } = await request.json();\n\t\t\n\t\t// Basic validation\n\t\tif (!street || !city || !state || !zipCode) {\n\t\t\treturn json({ \n\t\t\t\tverified: false, \n\t\t\t\terror: 'All address fields are required' \n\t\t\t}, { status: 400 });\n\t\t}\n\t\t\n\t\t// Validate ZIP code format\n\t\tconst zipRegex = /^\\d{5}(-\\d{4})?$/;\n\t\tif (!zipRegex.test(zipCode)) {\n\t\t\treturn json({ \n\t\t\t\tverified: false, \n\t\t\t\terror: 'Invalid ZIP code format' \n\t\t\t}, { status: 400 });\n\t\t}\n\t\t\n\t\t// Format address for Google Civic API\n\t\tconst fullAddress = `${street}, ${city}, ${state} ${zipCode}`;\n\t\t\n\t\t// Use Census Bureau Geocoding API for address validation and district lookup\n\t\tconst censusUrl = `https://geocoding.geo.census.gov/geocoder/geographies/onelineaddress?address=${encodeURIComponent(fullAddress)}&benchmark=4&vintage=4&format=json`;\n\t\t\n\t\tconst response = await fetch(censusUrl);\n\t\t\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`Census geocoding API error: ${response.status}`);\n\t\t}\n\t\t\n\t\tconst censusData = await response.json();\n\t\t\n\t\t// Check if address was found\n\t\tif (!censusData.result?.addressMatches?.length) {\n\t\t\treturn json({ \n\t\t\t\tverified: false, \n\t\t\t\terror: 'Address not found. Please check and try again.' \n\t\t\t}, { status: 400 });\n\t\t}\n\t\t\n\t\tconst match = censusData.result.addressMatches[0];\n\t\t\n\t\t// Extract normalized address\n\t\tconst correctedAddress = match.matchedAddress || fullAddress;\n\t\t\n\t\t// Extract congressional district and create representatives\n\t\tconst district = extractCongressionalDistrictFromCensus(match.geographies, state);\n\t\tconst representatives = await createRepresentativesFromDistrict(district, state);\n\t\t\n\t\treturn json({\n\t\t\tverified: true,\n\t\t\tcorrected: correctedAddress !== fullAddress,\n\t\t\toriginalAddress: fullAddress,\n\t\t\tcorrectedAddress,\n\t\t\trepresentatives,\n\t\t\tdistrict,\n\t\t\tmessage: 'Address verified successfully'\n\t\t});\n\t\t\n\t} catch (error) {\n\t\tconsole.error('Address verification error:', error);\n\t\treturn json({ \n\t\t\tverified: false, \n\t\t\terror: 'Address verification service temporarily unavailable' \n\t\t}, { status: 500 });\n\t}\n}\n\n/**\n * Extract congressional district from Census Bureau geocoding response\n */\nfunction extractCongressionalDistrictFromCensus(geographies: any, state: string): string {\n\ttry {\n\t\t// Look for 119th Congressional Districts\n\t\tconst congressionalDistricts = geographies['119th Congressional Districts'];\n\t\tif (congressionalDistricts && congressionalDistricts.length > 0) {\n\t\t\tconst cd = congressionalDistricts[0].CD119;\n\t\t\tif (cd === '98') {\n\t\t\t\t// Special case for DC delegate\n\t\t\t\treturn `${state.toUpperCase()}-AL`;\n\t\t\t}\n\t\t\treturn `${state.toUpperCase()}-${cd.padStart(2, '0')}`;\n\t\t}\n\t\t\n\t\t// Fallback to at-large\n\t\treturn `${state.toUpperCase()}-AL`;\n\t\t\n\t} catch (error) {\n\t\treturn `${state.toUpperCase()}-01`;\n\t}\n}\n\n/**\n * Create representative data from district and state\n * This uses existing Congress.gov API integration\n */\nfunction createRepresentativesFromDistrict(district: string, state: string) {\n\t// Simplified version - just return basic structure\n\t// This will be enhanced once the main flow works\n\treturn [\n\t\t{\n\t\t\tname: `Representative for ${district}`,\n\t\t\toffice: `House Representative, ${district}`,\n\t\t\tchamber: 'house',\n\t\t\tparty: 'Unknown',\n\t\t\tdistrict: district\n\t\t},\n\t\t{\n\t\t\tname: `Senior Senator for ${state.toUpperCase()}`,\n\t\t\toffice: `Senator, ${state.toUpperCase()}`,\n\t\t\tchamber: 'senate',\n\t\t\tparty: 'Unknown',\n\t\t\tdistrict: state.toUpperCase()\n\t\t},\n\t\t{\n\t\t\tname: `Junior Senator for ${state.toUpperCase()}`,\n\t\t\toffice: `Senator, ${state.toUpperCase()}`,\n\t\t\tchamber: 'senate',\n\t\t\tparty: 'Unknown',\n\t\t\tdistrict: state.toUpperCase()\n\t\t}\n\t];\n}\n\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9ee76dfb6b9a3d27d5ed891d2d89b9327feb37df"}}