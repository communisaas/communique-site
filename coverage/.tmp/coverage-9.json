{"/Users/noot/Documents/communique/src/lib/congress/cwc-generator.ts":{"path":"/Users/noot/Documents/communique/src/lib/congress/cwc-generator.ts","statementMap":{"0":{"start":{"line":7,"column":42},"end":{"line":7,"column":49}},"1":{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},"2":{"start":{"line":9,"column":6},"end":{"line":9,"column":45}},"3":{"start":{"line":11,"column":22},"end":{"line":11,"column":64}},"4":{"start":{"line":12,"column":22},"end":{"line":12,"column":88}},"5":{"start":{"line":13,"column":42},"end":{"line":13,"column":81}},"6":{"start":{"line":14,"column":21},"end":{"line":14,"column":54}},"7":{"start":{"line":15,"column":16},"end":{"line":51,"column":7}},"8":{"start":{"line":52,"column":4},"end":{"line":52,"column":15}},"9":{"start":{"line":59,"column":42},"end":{"line":59,"column":49}},"10":{"start":{"line":60,"column":22},"end":{"line":60,"column":88}},"11":{"start":{"line":61,"column":42},"end":{"line":61,"column":81}},"12":{"start":{"line":62,"column":21},"end":{"line":62,"column":54}},"13":{"start":{"line":63,"column":16},"end":{"line":97,"column":7}},"14":{"start":{"line":98,"column":4},"end":{"line":98,"column":15}},"15":{"start":{"line":105,"column":20},"end":{"line":105,"column":80}},"16":{"start":{"line":106,"column":4},"end":{"line":112,"column":6}},"17":{"start":{"line":107,"column":15},"end":{"line":111,"column":8}},"18":{"start":{"line":118,"column":22},"end":{"line":118,"column":32}},"19":{"start":{"line":119,"column":17},"end":{"line":119,"column":89}},"20":{"start":{"line":120,"column":4},"end":{"line":120,"column":55}},"21":{"start":{"line":126,"column":18},"end":{"line":126,"column":74}},"22":{"start":{"line":127,"column":23},"end":{"line":127,"column":74}},"23":{"start":{"line":128,"column":4},"end":{"line":128,"column":39}},"24":{"start":{"line":134,"column":15},"end":{"line":134,"column":16}},"25":{"start":{"line":135,"column":4},"end":{"line":139,"column":5}},"26":{"start":{"line":135,"column":17},"end":{"line":135,"column":18}},"27":{"start":{"line":136,"column":19},"end":{"line":136,"column":36}},"28":{"start":{"line":137,"column":6},"end":{"line":137,"column":39}},"29":{"start":{"line":138,"column":6},"end":{"line":138,"column":25}},"30":{"start":{"line":140,"column":4},"end":{"line":140,"column":55}},"31":{"start":{"line":146,"column":4},"end":{"line":161,"column":7}},"32":{"start":{"line":147,"column":6},"end":{"line":160,"column":7}},"33":{"start":{"line":149,"column":10},"end":{"line":149,"column":24}},"34":{"start":{"line":151,"column":10},"end":{"line":151,"column":24}},"35":{"start":{"line":153,"column":10},"end":{"line":153,"column":25}},"36":{"start":{"line":155,"column":10},"end":{"line":155,"column":26}},"37":{"start":{"line":157,"column":10},"end":{"line":157,"column":25}},"38":{"start":{"line":159,"column":10},"end":{"line":159,"column":22}},"39":{"start":{"line":167,"column":19},"end":{"line":167,"column":21}},"40":{"start":{"line":168,"column":27},"end":{"line":168,"column":88}},"41":{"start":{"line":169,"column":4},"end":{"line":197,"column":5}},"42":{"start":{"line":170,"column":37},"end":{"line":177,"column":7}},"43":{"start":{"line":178,"column":6},"end":{"line":182,"column":9}},"44":{"start":{"line":179,"column":8},"end":{"line":181,"column":9}},"45":{"start":{"line":180,"column":10},"end":{"line":180,"column":69}},"46":{"start":{"line":184,"column":36},"end":{"line":191,"column":7}},"47":{"start":{"line":192,"column":6},"end":{"line":196,"column":9}},"48":{"start":{"line":193,"column":8},"end":{"line":195,"column":9}},"49":{"start":{"line":194,"column":10},"end":{"line":194,"column":68}},"50":{"start":{"line":198,"column":4},"end":{"line":201,"column":6}},"51":{"start":{"line":207,"column":27},"end":{"line":207,"column":51}},"52":{"start":{"line":208,"column":4},"end":{"line":210,"column":5}},"53":{"start":{"line":209,"column":6},"end":{"line":209,"column":21}},"54":{"start":{"line":211,"column":4},"end":{"line":213,"column":5}},"55":{"start":{"line":212,"column":6},"end":{"line":212,"column":19}},"56":{"start":{"line":214,"column":4},"end":{"line":216,"column":5}},"57":{"start":{"line":215,"column":6},"end":{"line":215,"column":22}},"58":{"start":{"line":217,"column":4},"end":{"line":217,"column":17}},"59":{"start":{"line":223,"column":21},"end":{"line":265,"column":5}},"60":{"start":{"line":266,"column":4},"end":{"line":270,"column":7}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":2},"end":{"line":6,"column":3}},"loc":{"start":{"line":6,"column":42},"end":{"line":53,"column":3}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":58,"column":2},"end":{"line":58,"column":3}},"loc":{"start":{"line":58,"column":36},"end":{"line":99,"column":3}},"line":58},"2":{"name":"(anonymous_2)","decl":{"start":{"line":104,"column":2},"end":{"line":104,"column":3}},"loc":{"start":{"line":104,"column":45},"end":{"line":113,"column":3}},"line":104},"3":{"name":"(anonymous_3)","decl":{"start":{"line":107,"column":6},"end":{"line":107,"column":7}},"loc":{"start":{"line":107,"column":15},"end":{"line":111,"column":8}},"line":107},"4":{"name":"(anonymous_4)","decl":{"start":{"line":117,"column":2},"end":{"line":117,"column":3}},"loc":{"start":{"line":117,"column":62},"end":{"line":121,"column":3}},"line":117},"5":{"name":"(anonymous_5)","decl":{"start":{"line":125,"column":2},"end":{"line":125,"column":3}},"loc":{"start":{"line":125,"column":66},"end":{"line":129,"column":3}},"line":125},"6":{"name":"(anonymous_6)","decl":{"start":{"line":133,"column":2},"end":{"line":133,"column":3}},"loc":{"start":{"line":133,"column":25},"end":{"line":141,"column":3}},"line":133},"7":{"name":"(anonymous_7)","decl":{"start":{"line":145,"column":2},"end":{"line":145,"column":3}},"loc":{"start":{"line":145,"column":24},"end":{"line":162,"column":3}},"line":145},"8":{"name":"(anonymous_8)","decl":{"start":{"line":146,"column":35},"end":{"line":146,"column":36}},"loc":{"start":{"line":146,"column":45},"end":{"line":161,"column":5}},"line":146},"9":{"name":"(anonymous_9)","decl":{"start":{"line":166,"column":2},"end":{"line":166,"column":3}},"loc":{"start":{"line":166,"column":26},"end":{"line":202,"column":3}},"line":166},"10":{"name":"(anonymous_10)","decl":{"start":{"line":178,"column":37},"end":{"line":178,"column":38}},"loc":{"start":{"line":178,"column":50},"end":{"line":182,"column":7}},"line":178},"11":{"name":"(anonymous_11)","decl":{"start":{"line":192,"column":36},"end":{"line":192,"column":37}},"loc":{"start":{"line":192,"column":49},"end":{"line":196,"column":7}},"line":192},"12":{"name":"(anonymous_12)","decl":{"start":{"line":206,"column":2},"end":{"line":206,"column":3}},"loc":{"start":{"line":206,"column":48},"end":{"line":218,"column":3}},"line":206},"13":{"name":"(anonymous_13)","decl":{"start":{"line":222,"column":2},"end":{"line":222,"column":3}},"loc":{"start":{"line":222,"column":38},"end":{"line":271,"column":3}},"line":222}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":10,"column":5}},{"start":{},"end":{}}],"line":8},"1":{"loc":{"start":{"line":13,"column":43},"end":{"line":13,"column":69}},"type":"binary-expr","locations":[{"start":{"line":13,"column":43},"end":{"line":13,"column":52}},{"start":{"line":13,"column":56},"end":{"line":13,"column":69}}],"line":13},"2":{"loc":{"start":{"line":14,"column":21},"end":{"line":14,"column":54}},"type":"binary-expr","locations":[{"start":{"line":14,"column":21},"end":{"line":14,"column":44}},{"start":{"line":14,"column":48},"end":{"line":14,"column":54}}],"line":14},"3":{"loc":{"start":{"line":40,"column":10},"end":{"line":40,"column":74}},"type":"cond-expr","locations":[{"start":{"line":40,"column":23},"end":{"line":40,"column":69}},{"start":{"line":40,"column":72},"end":{"line":40,"column":74}}],"line":40},"4":{"loc":{"start":{"line":44,"column":34},"end":{"line":44,"column":83}},"type":"binary-expr","locations":[{"start":{"line":44,"column":34},"end":{"line":44,"column":50}},{"start":{"line":44,"column":54},"end":{"line":44,"column":83}}],"line":44},"5":{"loc":{"start":{"line":61,"column":43},"end":{"line":61,"column":69}},"type":"binary-expr","locations":[{"start":{"line":61,"column":43},"end":{"line":61,"column":52}},{"start":{"line":61,"column":56},"end":{"line":61,"column":69}}],"line":61},"6":{"loc":{"start":{"line":62,"column":21},"end":{"line":62,"column":54}},"type":"binary-expr","locations":[{"start":{"line":62,"column":21},"end":{"line":62,"column":44}},{"start":{"line":62,"column":48},"end":{"line":62,"column":54}}],"line":62},"7":{"loc":{"start":{"line":86,"column":43},"end":{"line":86,"column":59}},"type":"binary-expr","locations":[{"start":{"line":86,"column":43},"end":{"line":86,"column":53}},{"start":{"line":86,"column":57},"end":{"line":86,"column":59}}],"line":86},"8":{"loc":{"start":{"line":89,"column":34},"end":{"line":89,"column":83}},"type":"binary-expr","locations":[{"start":{"line":89,"column":34},"end":{"line":89,"column":50}},{"start":{"line":89,"column":54},"end":{"line":89,"column":83}}],"line":89},"9":{"loc":{"start":{"line":147,"column":6},"end":{"line":160,"column":7}},"type":"switch","locations":[{"start":{"line":148,"column":8},"end":{"line":149,"column":24}},{"start":{"line":150,"column":8},"end":{"line":151,"column":24}},{"start":{"line":152,"column":8},"end":{"line":153,"column":25}},{"start":{"line":154,"column":8},"end":{"line":155,"column":26}},{"start":{"line":156,"column":8},"end":{"line":157,"column":25}},{"start":{"line":158,"column":8},"end":{"line":159,"column":22}}],"line":147},"10":{"loc":{"start":{"line":168,"column":27},"end":{"line":168,"column":88}},"type":"binary-expr","locations":[{"start":{"line":168,"column":27},"end":{"line":168,"column":55}},{"start":{"line":168,"column":59},"end":{"line":168,"column":88}}],"line":168},"11":{"loc":{"start":{"line":169,"column":4},"end":{"line":197,"column":5}},"type":"if","locations":[{"start":{"line":169,"column":4},"end":{"line":197,"column":5}},{"start":{"line":183,"column":11},"end":{"line":197,"column":5}}],"line":169},"12":{"loc":{"start":{"line":179,"column":8},"end":{"line":181,"column":9}},"type":"if","locations":[{"start":{"line":179,"column":8},"end":{"line":181,"column":9}},{"start":{},"end":{}}],"line":179},"13":{"loc":{"start":{"line":193,"column":8},"end":{"line":195,"column":9}},"type":"if","locations":[{"start":{"line":193,"column":8},"end":{"line":195,"column":9}},{"start":{},"end":{}}],"line":193},"14":{"loc":{"start":{"line":208,"column":4},"end":{"line":210,"column":5}},"type":"if","locations":[{"start":{"line":208,"column":4},"end":{"line":210,"column":5}},{"start":{},"end":{}}],"line":208},"15":{"loc":{"start":{"line":211,"column":4},"end":{"line":213,"column":5}},"type":"if","locations":[{"start":{"line":211,"column":4},"end":{"line":213,"column":5}},{"start":{},"end":{}}],"line":211},"16":{"loc":{"start":{"line":214,"column":4},"end":{"line":216,"column":5}},"type":"if","locations":[{"start":{"line":214,"column":4},"end":{"line":216,"column":5}},{"start":{},"end":{}}],"line":214}},"s":{"0":9,"1":9,"2":2,"3":7,"4":7,"5":7,"6":7,"7":7,"8":7,"9":2,"10":2,"11":2,"12":2,"13":2,"14":2,"15":1,"16":1,"17":2,"18":13,"19":13,"20":13,"21":11,"22":11,"23":11,"24":24,"25":24,"26":24,"27":1021,"28":1021,"29":1021,"30":24,"31":107,"32":14,"33":3,"34":3,"35":4,"36":4,"37":0,"38":0,"39":4,"40":4,"41":4,"42":1,"43":1,"44":6,"45":0,"46":3,"47":3,"48":18,"49":10,"50":4,"51":3,"52":3,"53":1,"54":2,"55":0,"56":2,"57":1,"58":1,"59":1,"60":1},"f":{"0":9,"1":2,"2":1,"3":2,"4":13,"5":11,"6":24,"7":107,"8":14,"9":4,"10":6,"11":18,"12":3,"13":1},"b":{"0":[2,7],"1":[7,1],"2":[7,2],"3":[6,1],"4":[7,0],"5":[2,0],"6":[2,0],"7":[2,0],"8":[2,0],"9":[3,3,4,4,0,0],"10":[4,2],"11":[1,3],"12":[0,6],"13":[10,8],"14":[1,2],"15":[0,2],"16":[1,1]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/lib/congress/cwc-generator.ts"],"sourcesContent":["import type { Template } from '$lib/types/template';\n\ninterface UserRepresentative {\n    bioguideId: string;\n    name: string;\n    party: string;\n    state: string;\n    district: string;\n    chamber: 'house' | 'senate';\n    officeCode: string;\n}\n\ninterface UserAddress {\n    street: string;\n    city: string;\n    state: string;\n    zip: string;\n}\n\ninterface User {\n    id: string;\n    name: string;\n    email: string;\n    phone?: string;\n    address: UserAddress;\n    representatives: {\n        house: UserRepresentative;\n        senate: UserRepresentative[];\n    };\n}\n\ninterface CWCMessage {\n    template: Template;\n    user: User;\n    targetRep: UserRepresentative; // Which specific rep to send to\n}\n\nexport class CWCGenerator {\n    /**\n     * Generate CWC XML for a user's advocacy message\n     * This is the core function used when processing mailto: links\n     */\n    static generateUserAdvocacyXML(message: CWCMessage): string {\n        const { template, user, targetRep } = message;\n        \n        // Use Senate-specific format if targeting Senate\n        if (targetRep.chamber === 'senate') {\n            return this.generateSenateXML(message);\n        }\n        \n        const timestamp = new Date().toISOString();\n        const messageId = this.generateMessageId(user.id, template.id, targetRep.bioguideId);\n        \n        // Extract user name parts\n        const [firstName, ...lastNameParts] = (user.name || 'Constituent').split(' ');\n        const lastName = lastNameParts.join(' ') || 'User';\n        \n        const xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<CWC version=\"2.0\">\n    <MessageHeader>\n        <MessageId>${this.escapeXML(messageId)}</MessageId>\n        <Timestamp>${timestamp}</Timestamp>\n        <DeliveryAgent>\n            <Name>Communique Advocacy Platform</Name>\n            <Email>cwc@communique.org</Email>\n            <Phone>+1-555-CWC-MAIL</Phone>\n        </DeliveryAgent>\n        <OfficeCode>${this.escapeXML(targetRep.officeCode)}</OfficeCode>\n    </MessageHeader>\n    \n    <ConstituentData>\n        <Name>\n            <First>${this.escapeXML(firstName)}</First>\n            <Last>${this.escapeXML(lastName)}</Last>\n        </Name>\n        <Address>\n            <Street>${this.escapeXML(user.address.street)}</Street>\n            <City>${this.escapeXML(user.address.city)}</City>\n            <State>${this.escapeXML(user.address.state)}</State>\n            <Zip>${this.escapeXML(user.address.zip)}</Zip>\n        </Address>\n        <Email>${this.escapeXML(user.email)}</Email>\n        ${user.phone ? `<Phone>${this.escapeXML(user.phone)}</Phone>` : ''}\n    </ConstituentData>\n    \n    <MessageData>\n        <Subject>${this.escapeXML(template.subject || 'Congressional Communication')}</Subject>\n        <Body>${this.escapeXML(template.message_body)}</Body>\n        \n        <MessageMetadata>\n            <IntegrityHash>${this.generateIntegrityHash(user.id, template.id, targetRep.bioguideId)}</IntegrityHash>\n        </MessageMetadata>\n    </MessageData>\n</CWC>`;\n        \n        return xml;\n    }\n\n    /**\n     * Generate Senate-specific CWC XML\n     * The Senate uses a different XML schema than the House\n     */\n    static generateSenateXML(message: CWCMessage): string {\n        const { template, user, targetRep } = message;\n        \n        const messageId = this.generateMessageId(user.id, template.id, targetRep.bioguideId);\n        \n        // Extract user name parts\n        const [firstName, ...lastNameParts] = (user.name || 'Constituent').split(' ');\n        const lastName = lastNameParts.join(' ') || 'User';\n        \n        // Simplified Senate XML format based on error feedback\n        const xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<CWC>\n    <DeliveryId>${this.escapeXML(messageId)}</DeliveryId>\n    <DeliveryAgent>\n        <Name>Communique Advocacy Platform</Name>\n        <Email>cwc@communique.org</Email>\n        <Phone>+1-555-CWC-MAIL</Phone>\n    </DeliveryAgent>\n    <Constituent>\n        <Prefix></Prefix>\n        <FirstName>${this.escapeXML(firstName)}</FirstName>\n        <MiddleName></MiddleName>\n        <LastName>${this.escapeXML(lastName)}</LastName>\n        <Suffix></Suffix>\n        <Title></Title>\n        <ConstituentAddress>\n            <Address1>${this.escapeXML(user.address.street)}</Address1>\n            <Address2></Address2>\n            <City>${this.escapeXML(user.address.city)}</City>\n            <StateAbbreviation>${this.escapeXML(user.address.state)}</StateAbbreviation>\n            <Zip>${this.escapeXML(user.address.zip)}</Zip>\n        </ConstituentAddress>\n        <ConstituentEmail>${this.escapeXML(user.email)}</ConstituentEmail>\n        <ConstituentPhone>${this.escapeXML(user.phone || '')}</ConstituentPhone>\n    </Constituent>\n    <Message>\n        <Subject>${this.escapeXML(template.subject || 'Congressional Communication')}</Subject>\n        <LibraryOfCongressTopics></LibraryOfCongressTopics>\n        <BillNumber></BillNumber>\n        <ProOrCon></ProOrCon>\n        <OrganizationAcronym></OrganizationAcronym>\n        <ConstituentMessage>${this.escapeXML(template.message_body)}</ConstituentMessage>\n    </Message>\n    <OfficeCode>${this.escapeXML(targetRep.officeCode)}</OfficeCode>\n</CWC>`;\n        \n        return xml;\n    }\n    \n    /**\n     * Generate CWC XML for all of a user's representatives\n     * Used when template targets \"all reps\" \n     */\n    static generateMultiRepXML(template: Template, user: User): string[] {\n        const allReps = [user.representatives.house, ...user.representatives.senate];\n        \n        return allReps.map(rep => \n            this.generateUserAdvocacyXML({\n                template,\n                user,\n                targetRep: rep\n            })\n        );\n    }\n    \n    /**\n     * Generate unique message ID for CWC submission\n     */\n    static generateMessageId(userId: string, templateId: string, repBioguideId: string): string {\n        const timestamp = Date.now();\n        const hash = this.simpleHash(`${userId}-${templateId}-${repBioguideId}-${timestamp}`);\n        return `CWC-${templateId.substring(0, 6)}-${hash}`;\n    }\n    \n    /**\n     * Generate integrity hash for duplicate prevention\n     */\n    static generateIntegrityHash(userId: string, templateId: string, repBioguideId: string): string {\n        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\n        const dataString = `${userId}:${templateId}:${repBioguideId}:${today}`;\n        return this.simpleHash(dataString);\n    }\n    \n    /**\n     * Simple hash function for message integrity\n     */\n    static simpleHash(str: string): string {\n        let hash = 0;\n        for (let i = 0; i < str.length; i++) {\n            const char = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32-bit integer\n        }\n        return Math.abs(hash).toString(36).substring(0, 8);\n    }\n    \n    /**\n     * Escape XML special characters\n     */\n    static escapeXML(str: string): string {\n        return str.replace(/[<>&'\"]/g, (char) => {\n            switch (char) {\n                case '<': return '&lt;';\n                case '>': return '&gt;';\n                case '&': return '&amp;';\n                case '\"': return '&quot;';\n                case \"'\": return '&#39;';\n                default: return char;\n            }\n        });\n    }\n    \n    /**\n     * Basic XML validation\n     */\n    static validateXML(xml: string): { valid: boolean; errors: string[] } {\n        const errors: string[] = [];\n        \n        // Determine if this is Senate or House format\n        const isSenateFormat = xml.includes('<DeliveryId>') && xml.includes('<Constituent>');\n        \n        if (isSenateFormat) {\n            // Senate-specific validation\n            const senateRequiredElements = [\n                '<CWC>',\n                '<DeliveryId>',\n                '<DeliveryAgent>',\n                '<Constituent>',\n                '<Message>',\n                '<OfficeCode>'\n            ];\n            \n            senateRequiredElements.forEach(element => {\n                if (!xml.includes(element)) {\n                    errors.push(`Missing required Senate element: ${element}`);\n                }\n            });\n        } else {\n            // House-specific validation\n            const houseRequiredElements = [\n                '<CWC version=\"2.0\"',\n                '<MessageId>',\n                '<DeliveryAgent>',\n                '<OfficeCode>',\n                '<ConstituentData>',\n                '<MessageData>'\n            ];\n            \n            houseRequiredElements.forEach(element => {\n                if (!xml.includes(element)) {\n                    errors.push(`Missing required House element: ${element}`);\n                }\n            });\n        }\n        \n        return {\n            valid: errors.length === 0,\n            errors\n        };\n    }\n    \n    /**\n     * Determine delivery method based on template configuration\n     */\n    static getDeliveryMethod(template: Template, targetRep: UserRepresentative): 'cwc' | 'email' | 'hybrid' {\n        // Check template delivery configuration\n        const deliveryConfig = template.delivery_config as Record<string, unknown>;\n        \n        if (deliveryConfig?.method === 'direct_email') {\n            return 'email';\n        }\n        \n        if (deliveryConfig?.method === 'cwc_only') {\n            return 'cwc';\n        }\n        \n        if (deliveryConfig?.method === 'hybrid') {\n            return 'hybrid';\n        }\n        \n        // Default: Use CWC for congressional offices\n        return 'cwc';\n    }\n    \n    /**\n     * Preview XML without sensitive data (for testing/debugging)\n     */\n    static generatePreviewXML(template: Template): string {\n        const mockUser: User = {\n            id: 'preview-user',\n            name: 'Jane Doe',\n            email: 'jane.doe@example.com',\n            phone: '+1-555-123-4567',\n            address: {\n                street: '123 Main Street',\n                city: 'San Francisco',\n                state: 'CA',\n                zip: '94102'\n            },\n            representatives: {\n                house: {\n                    bioguideId: 'P000197',\n                    name: 'Nancy Pelosi',\n                    party: 'Democratic',\n                    state: 'CA',\n                    district: '11',\n                    chamber: 'house',\n                    officeCode: 'P000197'\n                },\n                senate: [\n                    {\n                        bioguideId: 'F000062',\n                        name: 'Dianne Feinstein',\n                        party: 'Democratic',\n                        state: 'CA',\n                        district: '00',\n                        chamber: 'senate',\n                        officeCode: 'F000062'\n                    },\n                    {\n                        bioguideId: 'P000145',\n                        name: 'Alex Padilla',\n                        party: 'Democratic',\n                        state: 'CA',\n                        district: '00',\n                        chamber: 'senate',\n                        officeCode: 'P000145'\n                    }\n                ]\n            }\n        };\n        \n        return this.generateUserAdvocacyXML({\n            template,\n            user: mockUser,\n            targetRep: mockUser.representatives.house\n        });\n    }\n} "],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b939f7eccf4f720a3c282cd31844eb35a8777c63"}}