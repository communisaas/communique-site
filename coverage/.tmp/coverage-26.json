{"/Users/noot/Documents/communique/src/lib/services/zipDistrictLookup.ts":{"path":"/Users/noot/Documents/communique/src/lib/services/zipDistrictLookup.ts","statementMap":{"0":{"start":{"line":2,"column":32},"end":{"line":2,"column":41}},"1":{"start":{"line":3,"column":13},"end":{"line":3,"column":18}},"2":{"start":{"line":8,"column":4},"end":{"line":8,"column":30}},"3":{"start":{"line":8,"column":23},"end":{"line":8,"column":30}},"4":{"start":{"line":9,"column":4},"end":{"line":36,"column":5}},"5":{"start":{"line":10,"column":23},"end":{"line":10,"column":131}},"6":{"start":{"line":11,"column":6},"end":{"line":13,"column":7}},"7":{"start":{"line":12,"column":8},"end":{"line":12,"column":81}},"8":{"start":{"line":14,"column":22},"end":{"line":14,"column":43}},"9":{"start":{"line":15,"column":20},"end":{"line":15,"column":46}},"10":{"start":{"line":16,"column":6},"end":{"line":30,"column":7}},"11":{"start":{"line":16,"column":19},"end":{"line":16,"column":20}},"12":{"start":{"line":17,"column":51},"end":{"line":17,"column":91}},"13":{"start":{"line":17,"column":82},"end":{"line":17,"column":90}},"14":{"start":{"line":18,"column":8},"end":{"line":29,"column":9}},"15":{"start":{"line":19,"column":25},"end":{"line":24,"column":11}},"16":{"start":{"line":25,"column":10},"end":{"line":27,"column":11}},"17":{"start":{"line":26,"column":12},"end":{"line":26,"column":43}},"18":{"start":{"line":28,"column":10},"end":{"line":28,"column":50}},"19":{"start":{"line":31,"column":6},"end":{"line":31,"column":27}},"20":{"start":{"line":32,"column":6},"end":{"line":32,"column":86}},"21":{"start":{"line":34,"column":6},"end":{"line":34,"column":64}},"22":{"start":{"line":35,"column":6},"end":{"line":35,"column":18}},"23":{"start":{"line":43,"column":4},"end":{"line":43,"column":26}},"24":{"start":{"line":44,"column":21},"end":{"line":44,"column":63}},"25":{"start":{"line":45,"column":20},"end":{"line":45,"column":50}},"26":{"start":{"line":46,"column":4},"end":{"line":52,"column":5}},"27":{"start":{"line":47,"column":6},"end":{"line":51,"column":8}},"28":{"start":{"line":53,"column":28},"end":{"line":53,"column":119}},"29":{"start":{"line":53,"column":58},"end":{"line":53,"column":108}},"30":{"start":{"line":54,"column":4},"end":{"line":61,"column":5}},"31":{"start":{"line":55,"column":26},"end":{"line":55,"column":36}},"32":{"start":{"line":56,"column":6},"end":{"line":60,"column":8}},"33":{"start":{"line":62,"column":4},"end":{"line":69,"column":5}},"34":{"start":{"line":63,"column":21},"end":{"line":63,"column":39}},"35":{"start":{"line":64,"column":6},"end":{"line":68,"column":8}},"36":{"start":{"line":70,"column":43},"end":{"line":70,"column":52}},"37":{"start":{"line":71,"column":4},"end":{"line":74,"column":5}},"38":{"start":{"line":72,"column":23},"end":{"line":72,"column":49}},"39":{"start":{"line":73,"column":6},"end":{"line":73,"column":76}},"40":{"start":{"line":75,"column":21},"end":{"line":75,"column":23}},"41":{"start":{"line":76,"column":19},"end":{"line":76,"column":20}},"42":{"start":{"line":77,"column":4},"end":{"line":82,"column":5}},"43":{"start":{"line":78,"column":6},"end":{"line":81,"column":7}},"44":{"start":{"line":79,"column":8},"end":{"line":79,"column":25}},"45":{"start":{"line":80,"column":8},"end":{"line":80,"column":30}},"46":{"start":{"line":83,"column":25},"end":{"line":83,"column":97}},"47":{"start":{"line":83,"column":73},"end":{"line":83,"column":89}},"48":{"start":{"line":84,"column":4},"end":{"line":89,"column":6}},"49":{"start":{"line":95,"column":4},"end":{"line":95,"column":26}},"50":{"start":{"line":96,"column":21},"end":{"line":96,"column":63}},"51":{"start":{"line":97,"column":4},"end":{"line":97,"column":48}},"52":{"start":{"line":100,"column":33},"end":{"line":100,"column":63}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":2},"end":{"line":7,"column":3}},"loc":{"start":{"line":7,"column":19},"end":{"line":37,"column":3}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":17,"column":75},"end":{"line":17,"column":76}},"loc":{"start":{"line":17,"column":82},"end":{"line":17,"column":90}},"line":17},"2":{"name":"(anonymous_2)","decl":{"start":{"line":42,"column":2},"end":{"line":42,"column":3}},"loc":{"start":{"line":42,"column":39},"end":{"line":90,"column":3}},"line":42},"3":{"name":"(anonymous_3)","decl":{"start":{"line":53,"column":51},"end":{"line":53,"column":52}},"loc":{"start":{"line":53,"column":58},"end":{"line":53,"column":108}},"line":53},"4":{"name":"(anonymous_4)","decl":{"start":{"line":83,"column":66},"end":{"line":83,"column":67}},"loc":{"start":{"line":83,"column":73},"end":{"line":83,"column":89}},"line":83},"5":{"name":"(anonymous_5)","decl":{"start":{"line":94,"column":2},"end":{"line":94,"column":3}},"loc":{"start":{"line":94,"column":33},"end":{"line":98,"column":3}},"line":94}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":4},"end":{"line":8,"column":30}},"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":8,"column":30}},{"start":{},"end":{}}],"line":8},"1":{"loc":{"start":{"line":11,"column":6},"end":{"line":13,"column":7}},"type":"if","locations":[{"start":{"line":11,"column":6},"end":{"line":13,"column":7}},{"start":{},"end":{}}],"line":11},"2":{"loc":{"start":{"line":18,"column":8},"end":{"line":29,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":29,"column":9}},{"start":{},"end":{}}],"line":18},"3":{"loc":{"start":{"line":18,"column":12},"end":{"line":18,"column":36}},"type":"binary-expr","locations":[{"start":{"line":18,"column":12},"end":{"line":18,"column":16}},{"start":{"line":18,"column":20},"end":{"line":18,"column":30}},{"start":{"line":18,"column":34},"end":{"line":18,"column":36}}],"line":18},"4":{"loc":{"start":{"line":25,"column":10},"end":{"line":27,"column":11}},"type":"if","locations":[{"start":{"line":25,"column":10},"end":{"line":27,"column":11}},{"start":{},"end":{}}],"line":25},"5":{"loc":{"start":{"line":46,"column":4},"end":{"line":52,"column":5}},"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":52,"column":5}},{"start":{},"end":{}}],"line":46},"6":{"loc":{"start":{"line":46,"column":8},"end":{"line":46,"column":40}},"type":"binary-expr","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":16}},{"start":{"line":46,"column":20},"end":{"line":46,"column":40}}],"line":46},"7":{"loc":{"start":{"line":48,"column":15},"end":{"line":48,"column":43}},"type":"binary-expr","locations":[{"start":{"line":48,"column":15},"end":{"line":48,"column":35}},{"start":{"line":48,"column":39},"end":{"line":48,"column":43}}],"line":48},"8":{"loc":{"start":{"line":53,"column":28},"end":{"line":53,"column":119}},"type":"cond-expr","locations":[{"start":{"line":53,"column":36},"end":{"line":53,"column":109}},{"start":{"line":53,"column":112},"end":{"line":53,"column":119}}],"line":53},"9":{"loc":{"start":{"line":54,"column":4},"end":{"line":61,"column":5}},"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":61,"column":5}},{"start":{},"end":{}}],"line":54},"10":{"loc":{"start":{"line":62,"column":4},"end":{"line":69,"column":5}},"type":"if","locations":[{"start":{"line":62,"column":4},"end":{"line":69,"column":5}},{"start":{},"end":{}}],"line":62},"11":{"loc":{"start":{"line":73,"column":36},"end":{"line":73,"column":69}},"type":"binary-expr","locations":[{"start":{"line":73,"column":36},"end":{"line":73,"column":64}},{"start":{"line":73,"column":68},"end":{"line":73,"column":69}}],"line":73},"12":{"loc":{"start":{"line":78,"column":6},"end":{"line":81,"column":7}},"type":"if","locations":[{"start":{"line":78,"column":6},"end":{"line":81,"column":7}},{"start":{},"end":{}}],"line":78},"13":{"loc":{"start":{"line":97,"column":11},"end":{"line":97,"column":47}},"type":"binary-expr","locations":[{"start":{"line":97,"column":11},"end":{"line":97,"column":41}},{"start":{"line":97,"column":45},"end":{"line":97,"column":47}}],"line":97}},"s":{"0":1,"1":1,"2":15,"3":7,"4":8,"5":8,"6":7,"7":0,"8":7,"9":7,"10":7,"11":7,"12":30,"13":120,"14":30,"15":30,"16":30,"17":24,"18":30,"19":7,"20":7,"21":1,"22":1,"23":5,"24":5,"25":5,"26":5,"27":1,"28":4,"29":5,"30":4,"31":0,"32":0,"33":4,"34":3,"35":3,"36":1,"37":1,"38":2,"39":2,"40":1,"41":1,"42":1,"43":2,"44":1,"45":1,"46":1,"47":2,"48":1,"49":1,"50":1,"51":1,"52":1},"f":{"0":15,"1":120,"2":5,"3":5,"4":2,"5":1},"b":{"0":[7,8],"1":[0,7],"2":[30,0],"3":[30,30,30],"4":[24,6],"5":[1,4],"6":[5,4],"7":[1,0],"8":[4,0],"9":[0,4],"10":[3,1],"11":[2,2],"12":[1,1],"13":[1,0]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/lib/services/zipDistrictLookup.ts"],"sourcesContent":["/**\n * ZIP Code to Congressional District Lookup Service\n * Uses data from OpenSourceActivismTech/us-zipcodes-congress\n */\n\ninterface ZipDistrictRecord {\n    state_fips: string;\n    state_abbr: string;\n    zcta: string;\n    cd: string;\n}\n\nclass ZipDistrictLookupService {\n    private lookupTable: Map<string, ZipDistrictRecord[]> = new Map();\n    private isLoaded = false;\n\n    /**\n     * Load ZIP-district mapping data\n     */\n    async loadData(): Promise<void> {\n        if (this.isLoaded) return;\n\n        try {\n            const response = await fetch('https://raw.githubusercontent.com/OpenSourceActivismTech/us-zipcodes-congress/master/zccd.csv');\n            if (!response.ok) {\n                throw new Error(`Failed to fetch ZIP-district data: ${response.status}`);\n            }\n\n            const csvText = await response.text();\n            const lines = csvText.trim().split('\\n');\n            \n            // Skip header row\n            for (let i = 1; i < lines.length; i++) {\n                const [state_fips, state_abbr, zcta, cd] = lines[i].split(',').map(s => s.trim());\n                \n                if (zcta && state_abbr && cd) {\n                    const record: ZipDistrictRecord = {\n                        state_fips,\n                        state_abbr,\n                        zcta,\n                        cd\n                    };\n\n                    // Store by ZIP code (can have multiple districts per ZIP)\n                    if (!this.lookupTable.has(zcta)) {\n                        this.lookupTable.set(zcta, []);\n                    }\n                    this.lookupTable.get(zcta)!.push(record);\n                }\n            }\n\n            this.isLoaded = true;\n            console.log(`Loaded ${this.lookupTable.size} ZIP codes with district mappings`);\n            \n        } catch (error) {\n            console.error('Failed to load ZIP-district data:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Look up congressional district(s) for a ZIP code\n     * Returns the most likely district or all possible districts\n     */\n    async lookupDistrict(zipCode: string, state?: string): Promise<{\n        state: string;\n        district: string;\n        confidence: 'high' | 'medium' | 'low';\n        alternatives?: string[];\n    }> {\n        await this.loadData();\n\n        // Clean ZIP code (remove +4 extension)\n        const cleanZip = zipCode.replace(/\\D/g, '').substring(0, 5);\n        \n        const records = this.lookupTable.get(cleanZip);\n        \n        if (!records || records.length === 0) {\n            // No data found - return fallback\n            return {\n                state: state?.toUpperCase() || 'XX',\n                district: '01',\n                confidence: 'low'\n            };\n        }\n\n        // If state is provided, filter by state\n        const filteredRecords = state ? \n            records.filter(r => r.state_abbr.toUpperCase() === state.toUpperCase()) : \n            records;\n\n        if (filteredRecords.length === 0) {\n            // State mismatch - use first available\n            const firstRecord = records[0];\n            return {\n                state: firstRecord.state_abbr.toUpperCase(),\n                district: firstRecord.cd.padStart(2, '0'),\n                confidence: 'low'\n            };\n        }\n\n        if (filteredRecords.length === 1) {\n            // Single district - high confidence\n            const record = filteredRecords[0];\n            return {\n                state: record.state_abbr.toUpperCase(),\n                district: record.cd.padStart(2, '0'),\n                confidence: 'high'\n            };\n        }\n\n        // Multiple districts - return most common one\n        const districtCounts = new Map<string, number>();\n        for (const record of filteredRecords) {\n            const district = record.cd.padStart(2, '0');\n            districtCounts.set(district, (districtCounts.get(district) || 0) + 1);\n        }\n\n        // Find the most frequent district\n        let mostCommon = '';\n        let maxCount = 0;\n        for (const [district, count] of districtCounts) {\n            if (count > maxCount) {\n                maxCount = count;\n                mostCommon = district;\n            }\n        }\n\n        const alternatives = Array.from(districtCounts.keys())\n            .filter(d => d !== mostCommon)\n            .sort();\n\n        return {\n            state: filteredRecords[0].state_abbr.toUpperCase(),\n            district: mostCommon,\n            confidence: 'medium',\n            alternatives\n        };\n    }\n\n    /**\n     * Get all possible districts for a ZIP code (for debugging)\n     */\n    async getAllDistricts(zipCode: string): Promise<ZipDistrictRecord[]> {\n        await this.loadData();\n        const cleanZip = zipCode.replace(/\\D/g, '').substring(0, 5);\n        return this.lookupTable.get(cleanZip) || [];\n    }\n}\n\n// Export singleton instance\nexport const zipDistrictLookup = new ZipDistrictLookupService();"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d6d2accc8274c87b112152d84199f23aaa5fa688"}}