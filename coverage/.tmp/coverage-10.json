{"/Users/noot/Documents/communique/src/lib/services/geolocation.ts":{"path":"/Users/noot/Documents/communique/src/lib/services/geolocation.ts","statementMap":{"0":{"start":{"line":4,"column":4},"end":{"line":6,"column":5}},"1":{"start":{"line":5,"column":6},"end":{"line":5,"column":61}},"2":{"start":{"line":7,"column":4},"end":{"line":7,"column":39}},"3":{"start":{"line":19,"column":8},"end":{"line":19,"column":15}},"4":{"start":{"line":20,"column":4},"end":{"line":33,"column":5}},"5":{"start":{"line":21,"column":21},"end":{"line":25,"column":8}},"6":{"start":{"line":26,"column":6},"end":{"line":31,"column":8}},"7":{"start":{"line":34,"column":4},"end":{"line":46,"column":5}},"8":{"start":{"line":35,"column":6},"end":{"line":45,"column":7}},"9":{"start":{"line":36,"column":27},"end":{"line":36,"column":53}},"10":{"start":{"line":37,"column":8},"end":{"line":43,"column":10}},"11":{"start":{"line":47,"column":4},"end":{"line":47,"column":54}},"12":{"start":{"line":53,"column":4},"end":{"line":53,"column":73}},"13":{"start":{"line":59,"column":4},"end":{"line":73,"column":5}},"14":{"start":{"line":60,"column":22},"end":{"line":60,"column":58}},"15":{"start":{"line":61,"column":21},"end":{"line":61,"column":77}},"16":{"start":{"line":62,"column":6},"end":{"line":64,"column":7}},"17":{"start":{"line":63,"column":8},"end":{"line":63,"column":67}},"18":{"start":{"line":65,"column":19},"end":{"line":65,"column":30}},"19":{"start":{"line":66,"column":6},"end":{"line":70,"column":8}},"20":{"start":{"line":72,"column":6},"end":{"line":72,"column":20}},"21":{"start":{"line":79,"column":4},"end":{"line":91,"column":5}},"22":{"start":{"line":80,"column":22},"end":{"line":80,"column":58}},"23":{"start":{"line":81,"column":21},"end":{"line":81,"column":70}},"24":{"start":{"line":82,"column":6},"end":{"line":84,"column":7}},"25":{"start":{"line":83,"column":8},"end":{"line":83,"column":71}},"26":{"start":{"line":85,"column":19},"end":{"line":85,"column":30}},"27":{"start":{"line":86,"column":6},"end":{"line":88,"column":8}},"28":{"start":{"line":90,"column":6},"end":{"line":90,"column":20}},"29":{"start":{"line":97,"column":4},"end":{"line":115,"column":7}},"30":{"start":{"line":98,"column":6},"end":{"line":101,"column":7}},"31":{"start":{"line":99,"column":8},"end":{"line":99,"column":55}},"32":{"start":{"line":100,"column":8},"end":{"line":100,"column":15}},"33":{"start":{"line":102,"column":6},"end":{"line":114,"column":8}},"34":{"start":{"line":104,"column":10},"end":{"line":108,"column":13}},"35":{"start":{"line":111,"column":10},"end":{"line":111,"column":67}},"36":{"start":{"line":121,"column":4},"end":{"line":135,"column":5}},"37":{"start":{"line":122,"column":22},"end":{"line":122,"column":58}},"38":{"start":{"line":123,"column":21},"end":{"line":123,"column":58}},"39":{"start":{"line":124,"column":6},"end":{"line":126,"column":7}},"40":{"start":{"line":125,"column":8},"end":{"line":125,"column":63}},"41":{"start":{"line":127,"column":19},"end":{"line":127,"column":30}},"42":{"start":{"line":128,"column":6},"end":{"line":132,"column":8}},"43":{"start":{"line":134,"column":6},"end":{"line":134,"column":18}},"44":{"start":{"line":141,"column":4},"end":{"line":141,"column":33}},"45":{"start":{"line":141,"column":24},"end":{"line":141,"column":33}},"46":{"start":{"line":142,"column":4},"end":{"line":142,"column":35}},"47":{"start":{"line":142,"column":24},"end":{"line":142,"column":35}},"48":{"start":{"line":143,"column":4},"end":{"line":143,"column":36}},"49":{"start":{"line":143,"column":25},"end":{"line":143,"column":36}},"50":{"start":{"line":144,"column":4},"end":{"line":144,"column":36}},"51":{"start":{"line":144,"column":25},"end":{"line":144,"column":36}},"52":{"start":{"line":145,"column":4},"end":{"line":145,"column":36}},"53":{"start":{"line":145,"column":25},"end":{"line":145,"column":36}},"54":{"start":{"line":146,"column":4},"end":{"line":146,"column":15}},"55":{"start":{"line":152,"column":4},"end":{"line":154,"column":5}},"56":{"start":{"line":153,"column":6},"end":{"line":153,"column":62}},"57":{"start":{"line":155,"column":4},"end":{"line":172,"column":5}},"58":{"start":{"line":157,"column":6},"end":{"line":166,"column":7}},"59":{"start":{"line":158,"column":25},"end":{"line":161,"column":9}},"60":{"start":{"line":162,"column":8},"end":{"line":162,"column":49}},"61":{"start":{"line":163,"column":13},"end":{"line":166,"column":7}},"62":{"start":{"line":164,"column":25},"end":{"line":164,"column":71}},"63":{"start":{"line":165,"column":8},"end":{"line":165,"column":49}},"64":{"start":{"line":167,"column":20},"end":{"line":167,"column":55}},"65":{"start":{"line":168,"column":25},"end":{"line":168,"column":80}},"66":{"start":{"line":169,"column":6},"end":{"line":169,"column":35}},"67":{"start":{"line":171,"column":6},"end":{"line":171,"column":45}},"68":{"start":{"line":178,"column":23},"end":{"line":184,"column":5}},"69":{"start":{"line":185,"column":4},"end":{"line":185,"column":55}},"70":{"start":{"line":188,"column":27},"end":{"line":188,"column":59}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":2},"end":{"line":3,"column":3}},"loc":{"start":{"line":3,"column":23},"end":{"line":8,"column":3}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":2},"end":{"line":12,"column":3}},"loc":{"start":{"line":12,"column":34},"end":{"line":48,"column":3}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":52,"column":2},"end":{"line":52,"column":3}},"loc":{"start":{"line":52,"column":31},"end":{"line":54,"column":3}},"line":52},"3":{"name":"(anonymous_3)","decl":{"start":{"line":58,"column":2},"end":{"line":58,"column":3}},"loc":{"start":{"line":58,"column":40},"end":{"line":74,"column":3}},"line":58},"4":{"name":"(anonymous_4)","decl":{"start":{"line":78,"column":2},"end":{"line":78,"column":3}},"loc":{"start":{"line":78,"column":27},"end":{"line":92,"column":3}},"line":78},"5":{"name":"(anonymous_5)","decl":{"start":{"line":96,"column":2},"end":{"line":96,"column":3}},"loc":{"start":{"line":96,"column":30},"end":{"line":116,"column":3}},"line":96},"6":{"name":"(anonymous_6)","decl":{"start":{"line":97,"column":23},"end":{"line":97,"column":24}},"loc":{"start":{"line":97,"column":44},"end":{"line":115,"column":5}},"line":97},"7":{"name":"(anonymous_7)","decl":{"start":{"line":103,"column":8},"end":{"line":103,"column":9}},"loc":{"start":{"line":103,"column":22},"end":{"line":109,"column":9}},"line":103},"8":{"name":"(anonymous_8)","decl":{"start":{"line":110,"column":8},"end":{"line":110,"column":9}},"loc":{"start":{"line":110,"column":19},"end":{"line":112,"column":9}},"line":110},"9":{"name":"(anonymous_9)","decl":{"start":{"line":120,"column":2},"end":{"line":120,"column":3}},"loc":{"start":{"line":120,"column":24},"end":{"line":136,"column":3}},"line":120},"10":{"name":"(anonymous_10)","decl":{"start":{"line":140,"column":2},"end":{"line":140,"column":3}},"loc":{"start":{"line":140,"column":40},"end":{"line":147,"column":3}},"line":140},"11":{"name":"(anonymous_11)","decl":{"start":{"line":151,"column":2},"end":{"line":151,"column":3}},"loc":{"start":{"line":151,"column":53},"end":{"line":173,"column":3}},"line":151},"12":{"name":"(anonymous_12)","decl":{"start":{"line":177,"column":2},"end":{"line":177,"column":3}},"loc":{"start":{"line":177,"column":40},"end":{"line":186,"column":3}},"line":177}},"branchMap":{"0":{"loc":{"start":{"line":4,"column":4},"end":{"line":6,"column":5}},"type":"if","locations":[{"start":{"line":4,"column":4},"end":{"line":6,"column":5}},{"start":{},"end":{}}],"line":4},"1":{"loc":{"start":{"line":12,"column":20},"end":{"line":12,"column":32}},"type":"default-arg","locations":[{"start":{"line":12,"column":30},"end":{"line":12,"column":32}}],"line":12},"2":{"loc":{"start":{"line":14,"column":6},"end":{"line":14,"column":31}},"type":"default-arg","locations":[{"start":{"line":14,"column":27},"end":{"line":14,"column":31}}],"line":14},"3":{"loc":{"start":{"line":15,"column":6},"end":{"line":15,"column":19}},"type":"default-arg","locations":[{"start":{"line":15,"column":16},"end":{"line":15,"column":19}}],"line":15},"4":{"loc":{"start":{"line":16,"column":6},"end":{"line":16,"column":22}},"type":"default-arg","locations":[{"start":{"line":16,"column":19},"end":{"line":16,"column":22}}],"line":16},"5":{"loc":{"start":{"line":18,"column":6},"end":{"line":18,"column":25}},"type":"default-arg","locations":[{"start":{"line":18,"column":21},"end":{"line":18,"column":25}}],"line":18},"6":{"loc":{"start":{"line":34,"column":4},"end":{"line":46,"column":5}},"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":46,"column":5}},{"start":{},"end":{}}],"line":34},"7":{"loc":{"start":{"line":62,"column":6},"end":{"line":64,"column":7}},"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":64,"column":7}},{"start":{},"end":{}}],"line":62},"8":{"loc":{"start":{"line":82,"column":6},"end":{"line":84,"column":7}},"type":"if","locations":[{"start":{"line":82,"column":6},"end":{"line":84,"column":7}},{"start":{},"end":{}}],"line":82},"9":{"loc":{"start":{"line":98,"column":6},"end":{"line":101,"column":7}},"type":"if","locations":[{"start":{"line":98,"column":6},"end":{"line":101,"column":7}},{"start":{},"end":{}}],"line":98},"10":{"loc":{"start":{"line":124,"column":6},"end":{"line":126,"column":7}},"type":"if","locations":[{"start":{"line":124,"column":6},"end":{"line":126,"column":7}},{"start":{},"end":{}}],"line":124},"11":{"loc":{"start":{"line":141,"column":4},"end":{"line":141,"column":33}},"type":"if","locations":[{"start":{"line":141,"column":4},"end":{"line":141,"column":33}},{"start":{},"end":{}}],"line":141},"12":{"loc":{"start":{"line":142,"column":4},"end":{"line":142,"column":35}},"type":"if","locations":[{"start":{"line":142,"column":4},"end":{"line":142,"column":35}},{"start":{},"end":{}}],"line":142},"13":{"loc":{"start":{"line":143,"column":4},"end":{"line":143,"column":36}},"type":"if","locations":[{"start":{"line":143,"column":4},"end":{"line":143,"column":36}},{"start":{},"end":{}}],"line":143},"14":{"loc":{"start":{"line":144,"column":4},"end":{"line":144,"column":36}},"type":"if","locations":[{"start":{"line":144,"column":4},"end":{"line":144,"column":36}},{"start":{},"end":{}}],"line":144},"15":{"loc":{"start":{"line":145,"column":4},"end":{"line":145,"column":36}},"type":"if","locations":[{"start":{"line":145,"column":4},"end":{"line":145,"column":36}},{"start":{},"end":{}}],"line":145},"16":{"loc":{"start":{"line":152,"column":4},"end":{"line":154,"column":5}},"type":"if","locations":[{"start":{"line":152,"column":4},"end":{"line":154,"column":5}},{"start":{},"end":{}}],"line":152},"17":{"loc":{"start":{"line":157,"column":6},"end":{"line":166,"column":7}},"type":"if","locations":[{"start":{"line":157,"column":6},"end":{"line":166,"column":7}},{"start":{"line":163,"column":13},"end":{"line":166,"column":7}}],"line":157},"18":{"loc":{"start":{"line":163,"column":13},"end":{"line":166,"column":7}},"type":"if","locations":[{"start":{"line":163,"column":13},"end":{"line":166,"column":7}},{"start":{},"end":{}}],"line":163},"19":{"loc":{"start":{"line":168,"column":25},"end":{"line":168,"column":80}},"type":"cond-expr","locations":[{"start":{"line":168,"column":33},"end":{"line":168,"column":52}},{"start":{"line":168,"column":55},"end":{"line":168,"column":80}}],"line":168},"20":{"loc":{"start":{"line":180,"column":6},"end":{"line":180,"column":113}},"type":"cond-expr","locations":[{"start":{"line":180,"column":29},"end":{"line":180,"column":108}},{"start":{"line":180,"column":111},"end":{"line":180,"column":113}}],"line":180},"21":{"loc":{"start":{"line":181,"column":6},"end":{"line":181,"column":33}},"type":"binary-expr","locations":[{"start":{"line":181,"column":6},"end":{"line":181,"column":27}},{"start":{"line":181,"column":31},"end":{"line":181,"column":33}}],"line":181}},"s":{"0":26,"1":1,"2":26,"3":12,"4":12,"5":12,"6":8,"7":4,"8":3,"9":3,"10":2,"11":2,"12":1,"13":6,"14":6,"15":6,"16":4,"17":1,"18":3,"19":3,"20":3,"21":3,"22":3,"23":3,"24":3,"25":1,"26":2,"27":2,"28":1,"29":12,"30":12,"31":1,"32":1,"33":11,"34":8,"35":3,"36":3,"37":3,"38":3,"39":3,"40":1,"41":2,"42":2,"43":1,"44":8,"45":2,"46":6,"47":2,"48":4,"49":1,"50":3,"51":1,"52":2,"53":1,"54":1,"55":5,"56":1,"57":4,"58":4,"59":3,"60":3,"61":1,"62":1,"63":1,"64":4,"65":4,"66":4,"67":0,"68":2,"69":2,"70":1},"f":{"0":26,"1":12,"2":1,"3":6,"4":3,"5":12,"6":12,"7":8,"8":3,"9":3,"10":8,"11":5,"12":2},"b":{"0":[1,25],"1":[10],"2":[11],"3":[11],"4":[11],"5":[11],"6":[3,1],"7":[1,3],"8":[1,2],"9":[1,11],"10":[1,2],"11":[2,6],"12":[2,4],"13":[1,3],"14":[1,2],"15":[1,1],"16":[1,4],"17":[3,1],"18":[1,0],"19":[2,2],"20":[1,1],"21":[2,1]},"inputSourceMap":{"version":3,"sources":["/Users/noot/Documents/communique/src/lib/services/geolocation.ts"],"sourcesContent":["import type { UserAddress } from '$lib/types/user';\n\nexport interface GeolocationData {\n    source: 'browser_api' | 'manual_address' | 'ip_fallback';\n    coordinates?: {\n        lat: number;\n        lng: number;\n        accuracy: number;\n    };\n    address?: {\n        zip: string;\n        city?: string;\n        state?: string;\n        street?: string;\n    };\n    district?: {\n        congressional: string;\n        state_house?: string;\n        state_senate?: string;\n    };\n    timestamp: number;\n    confidence: number; // 0-1 score\n}\n\nexport interface GeolocationOptions {\n    enableHighAccuracy?: boolean;\n    timeout?: number;\n    maximumAge?: number;\n    fallbackToIP?: boolean;\n}\n\nexport class GeolocationService {\n    private static instance: GeolocationService;\n    \n    public static getInstance(): GeolocationService {\n        if (!GeolocationService.instance) {\n            GeolocationService.instance = new GeolocationService();\n        }\n        return GeolocationService.instance;\n    }\n\n    /**\n     * Get user's location with progressive fallbacks\n     */\n    async getLocation(options: GeolocationOptions = {}): Promise<GeolocationData> {\n        const {\n            enableHighAccuracy = true,\n            timeout = 10000,\n            maximumAge = 300000, // 5 minutes\n            fallbackToIP = true\n        } = options;\n\n        // Try browser geolocation first (highest accuracy)\n        try {\n            const coords = await this.getBrowserLocation({\n                enableHighAccuracy,\n                timeout,\n                maximumAge\n            });\n            \n            return {\n                source: 'browser_api',\n                coordinates: coords,\n                timestamp: Date.now(),\n                confidence: this.calculateLocationConfidence(coords.accuracy)\n            };\n        } catch (error) {\n        }\n\n        // Fallback to IP-based location (lower accuracy)\n        if (fallbackToIP) {\n            try {\n                const ipLocation = await this.getIPLocation();\n                return {\n                    source: 'ip_fallback',\n                    address: ipLocation,\n                    timestamp: Date.now(),\n                    confidence: 0.3 // IP location is rough\n                };\n            } catch (error) {\n            }\n        }\n\n        throw new Error('All geolocation methods failed');\n    }\n\n    /**\n     * Prompt user for manual address entry (high confidence)\n     */\n    async requestManualAddress(): Promise<GeolocationData> {\n        // This would integrate with your existing address input UI\n        throw new Error('Manual address collection requires UI integration');\n    }\n\n    /**\n     * Convert coordinates to congressional district\n     */\n    async coordinatesToDistrict(lat: number, lng: number): Promise<GeolocationData['district']> {\n        try {\n            // Use Google Civic Information API or similar\n            const { api } = await import('$lib/utils/apiClient');\n            const result = await api.get(`/api/geo/district?lat=${lat}&lng=${lng}`);\n            \n            if (!result.success) {\n                throw new Error(`District lookup failed: ${result.error}`);\n            }\n            \n            const data = result.data;\n            \n            return {\n                congressional: data.congressional_district,\n                state_house: data.state_house_district,\n                state_senate: data.state_senate_district\n            };\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    /**\n     * Convert ZIP code to approximate district\n     */\n    async zipToDistrict(zip: string): Promise<GeolocationData['district']> {\n        try {\n            const { api } = await import('$lib/utils/apiClient');\n            const result = await api.get(`/api/geo/zip-district?zip=${zip}`);\n            \n            if (!result.success) {\n                throw new Error(`ZIP district lookup failed: ${result.error}`);\n            }\n            \n            const data = result.data;\n            \n            return {\n                congressional: data.congressional_district\n            };\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    /**\n     * Get browser geolocation with promise wrapper\n     */\n    private getBrowserLocation(options: PositionOptions): Promise<{\n        lat: number;\n        lng: number;\n        accuracy: number;\n    }> {\n        return new Promise((resolve, reject) => {\n            if (!navigator.geolocation) {\n                reject(new Error('Geolocation not supported'));\n                return;\n            }\n\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    resolve({\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude,\n                        accuracy: position.coords.accuracy\n                    });\n                },\n                (error) => {\n                    reject(new Error(`Geolocation error: ${error.message}`));\n                },\n                options\n            );\n        });\n    }\n\n    /**\n     * Get approximate location from IP address\n     */\n    private async getIPLocation(): Promise<GeolocationData['address']> {\n        try {\n            // Use a service like ipapi.co or similar\n            const { api } = await import('$lib/utils/apiClient');\n            const result = await api.get('/api/geo/ip-location');\n            \n            if (!result.success) {\n                throw new Error(`IP location failed: ${result.error}`);\n            }\n            \n            const data = result.data;\n            \n            return {\n                zip: data.postal_code,\n                city: data.city,\n                state: data.region_code\n            };\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Calculate confidence score based on accuracy\n     */\n    private calculateLocationConfidence(accuracy: number): number {\n        // GPS accuracy in meters -> confidence score\n        if (accuracy <= 10) return 1.0;      // Very high confidence\n        if (accuracy <= 50) return 0.9;      // High confidence  \n        if (accuracy <= 100) return 0.8;     // Good confidence\n        if (accuracy <= 500) return 0.6;     // Medium confidence\n        if (accuracy <= 1000) return 0.4;    // Low confidence\n        return 0.2;                          // Very low confidence\n    }\n\n    /**\n     * Check if location is within expected district\n     */\n    async validateLocation(\n        location: GeolocationData,\n        expectedDistrict?: string\n    ): Promise<{ valid: boolean; confidence: number }> {\n        if (!expectedDistrict) {\n            return { valid: true, confidence: location.confidence };\n        }\n\n        try {\n            let actualDistrict: string | undefined;\n\n            if (location.coordinates) {\n                const district = await this.coordinatesToDistrict(\n                    location.coordinates.lat,\n                    location.coordinates.lng\n                );\n                actualDistrict = district?.congressional;\n            } else if (location.address?.zip) {\n                const district = await this.zipToDistrict(location.address.zip);\n                actualDistrict = district?.congressional;\n            }\n\n            const valid = actualDistrict === expectedDistrict;\n            const confidence = valid ? location.confidence : location.confidence * 0.5;\n\n            return { valid, confidence };\n        } catch (error) {\n            return { valid: false, confidence: 0 };\n        }\n    }\n\n    /**\n     * Generate location fingerprint for anti-astroturf detection\n     */\n    generateLocationFingerprint(location: GeolocationData): string {\n        const components = [\n            location.source,\n            location.coordinates ? \n                `${location.coordinates.lat.toFixed(3)},${location.coordinates.lng.toFixed(3)}` : \n                '',\n            location.address?.zip || '',\n            location.timestamp.toString(),\n            location.confidence.toString()\n        ];\n\n        // Simple hash for fingerprinting (use crypto.subtle in production)\n        return btoa(components.join('|')).substring(0, 16);\n    }\n}\n\n// Export singleton instance\nexport const geolocation = GeolocationService.getInstance();"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"dca8264d4c5915dcbcaa2e2c4657b6f8a0521da1"}}