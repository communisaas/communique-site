AWSTemplateFormatVersion: '2010-09-09'
Description: 'Senate CWC Worker Lambda Function Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: 'production'
    AllowedValues: ['production', 'staging', 'development']
    Description: 'Deployment environment'

  CWCApiKey:
    Type: String
    NoEcho: true
    Description: 'Senate CWC API Key'

  JobStatusApiUrl:
    Type: String
    Description: 'Communique job status API URL'

  LambdaWebhookSecret:
    Type: String
    NoEcho: true
    Description: 'Secret for Lambda webhook authentication'

Resources:
  # DynamoDB Table for Rate Limiting
  RateLimitTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'communique-rate-limits-${Environment}'
      BillingMode: ON_DEMAND
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: action
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: action
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: 'communique-senate-worker'

  # SQS Dead Letter Queue
  SenateSubmissionsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'senate-submissions-dlq-${Environment}'
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeoutSeconds: 60
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: 'communique-senate-worker'

  # SQS FIFO Queue for Senate Submissions
  SenateSubmissionsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'senate-submissions-${Environment}.fifo'
      FifoQueue: true
      ContentBasedDeduplication: true
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeoutSeconds: 300 # 5 minutes
      ReceiveMessageWaitTimeSeconds: 20 # Long polling
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SenateSubmissionsDLQ.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: 'communique-senate-worker'

  # IAM Role for Lambda Function
  SenateWorkerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'communique-senate-worker-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt SenateSubmissionsQueue.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt SenateSubmissionsDLQ.Arn
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt RateLimitTable.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: 'communique-senate-worker'

  # Lambda Function
  SenateWorkerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'communique-senate-worker-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return { statusCode: 200, body: 'Placeholder - deploy actual code' };
          };
      Role: !GetAtt SenateWorkerLambdaRole.Arn
      Timeout: 60
      MemorySize: 512
      ReservedConcurrencyLimit: 5
      Environment:
        Variables:
          CWC_API_KEY: !Ref CWCApiKey
          CWC_API_BASE_URL: 'https://soapbox.senate.gov/api'
          DYNAMO_TABLE_NAME: !Ref RateLimitTable
          JOB_STATUS_API_URL: !Ref JobStatusApiUrl
          LAMBDA_WEBHOOK_SECRET: !Ref LambdaWebhookSecret
          MAX_RETRIES: '3'
          RATE_LIMIT_WINDOW_SECONDS: '3600'
          RATE_LIMIT_COUNT: '10'
          VISIBILITY_TIMEOUT_SECONDS: '300'
      DeadLetterConfig:
        TargetArn: !GetAtt SenateSubmissionsDLQ.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: 'communique-senate-worker'

  # Event Source Mapping for SQS
  SQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SenateSubmissionsQueue.Arn
      FunctionName: !Ref SenateWorkerFunction
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5
      FunctionResponseTypes:
        - ReportBatchItemFailures

  # CloudWatch Log Group
  SenateWorkerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/communique-senate-worker-${Environment}'
      RetentionInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: 'communique-senate-worker'

  # CloudWatch Alarms
  ErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'Senate-Worker-Error-Rate-${Environment}'
      AlarmDescription: 'Senate worker Lambda error rate too high'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SenateWorkerFunction
      TreatMissingData: notBreaching

  DurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'Senate-Worker-Duration-${Environment}'
      AlarmDescription: 'Senate worker Lambda duration too high'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 45000 # 45 seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SenateWorkerFunction
      TreatMissingData: notBreaching

  DLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'Senate-Worker-DLQ-Messages-${Environment}'
      AlarmDescription: 'Messages in Senate worker DLQ'
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt SenateSubmissionsDLQ.QueueName
      TreatMissingData: notBreaching

Outputs:
  SenateSubmissionsQueueArn:
    Description: 'ARN of the Senate submissions SQS queue'
    Value: !GetAtt SenateSubmissionsQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SenateSubmissionsQueue'

  SenateSubmissionsQueueUrl:
    Description: 'URL of the Senate submissions SQS queue'
    Value: !Ref SenateSubmissionsQueue
    Export:
      Name: !Sub '${AWS::StackName}-SenateSubmissionsQueueUrl'

  RateLimitTableName:
    Description: 'Name of the DynamoDB rate limit table'
    Value: !Ref RateLimitTable
    Export:
      Name: !Sub '${AWS::StackName}-RateLimitTable'

  LambdaFunctionArn:
    Description: 'ARN of the Senate worker Lambda function'
    Value: !GetAtt SenateWorkerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'

  LambdaFunctionName:
    Description: 'Name of the Senate worker Lambda function'
    Value: !Ref SenateWorkerFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'
